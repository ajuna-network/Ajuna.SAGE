//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.AjunaSolo.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.AjunaSolo.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.AjunaSolo.NET.RestClient.Generated.Clients;
   using Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager;
   
   public class CasinoJamSeasonsControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonStatus GetTestValue2()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonStatus result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonStatus();
         result.SeasonId = this.GetTestValueU32();
         result.Early = this.GetTestValueBool();
         result.Active = this.GetTestValueBool();
         result.EarlyEnded = this.GetTestValueBool();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestCurrentSeasonStatus()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonStatus mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribeCurrentSeasonStatus());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetCurrentSeasonStatus(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonStatus rpcResult = await rpcClient.GetCurrentSeasonStatus();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLatestSeason()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeLatestSeason());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLatestSeason(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetLatestSeason();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple GetTestValue5()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestFinishedSeasons()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseTuple mockupValue = this.GetTestValue5();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeFinishedSeasons(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetFinishedSeasons(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseTuple rpcResult = await rpcClient.GetFinishedSeasons(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestNextSeasonChain()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeNextSeasonChain(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetNextSeasonChain(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetNextSeasonChain(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPrevSeasonChain()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribePrevSeasonChain(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPrevSeasonChain(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetPrevSeasonChain(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonConfig GetTestValue9()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonConfig result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonConfig();
         result.Fee = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonFeeConfig();
         result.Fee = this.GetTestValue10();
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonFeeConfig GetTestValue10()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonFeeConfig result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonFeeConfig();
         result.TransferAsset = this.GetTestValueU128();
         result.BuyAssetMin = this.GetTestValueU128();
         result.BuyPercent = this.GetTestValueU8();
         result.UpgradeAssetInventory = this.GetTestValueU128();
         result.UnlockTradeAsset = this.GetTestValueU128();
         result.UnlockTransferAsset = this.GetTestValueU128();
         result.StateTransitionBaseFee = this.GetTestValueU128();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestSeasons()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonConfig mockupValue = this.GetTestValue9();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeSeasons(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetSeasons(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonConfig rpcResult = await rpcClient.GetSeasons(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonMetadata GetTestValue12()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonMetadata result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonMetadata();
         result.Name = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2();
         result.Name = this.GetTestValue13();
         result.Description = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3();
         result.Description = this.GetTestValue14();
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2 GetTestValue13()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3 GetTestValue14()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT3();
         result.Value = new Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestSeasonMetadatas()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonMetadata mockupValue = this.GetTestValue12();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeSeasonMetadatas(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetSeasonMetadatas(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonMetadata rpcResult = await rpcClient.GetSeasonMetadatas(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonSchedule GetTestValue16()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonSchedule result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonSchedule();
         result.EarlyStart = this.GetTestValueU32();
         result.Start = this.GetTestValueU32();
         result.End = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
         result.End.Create(this.GetTestValueU32());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestSeasonSchedules()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonSchedule mockupValue = this.GetTestValue16();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeSeasonSchedules(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetSeasonSchedules(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonSchedule rpcResult = await rpcClient.GetSeasonSchedules(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.EnumSeasonScheduledAction GetTestValue18()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.EnumSeasonScheduledAction result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.EnumSeasonScheduledAction();
         // NOT IMPLEMENTED >> Initialize Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.EnumSeasonScheduledAction
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestSeasonScheduledActions()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.EnumSeasonScheduledAction mockupValue = this.GetTestValue18();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeSeasonScheduledActions(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetSeasonScheduledActions(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.EnumSeasonScheduledAction rpcResult = await rpcClient.GetSeasonScheduledActions(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAssetSeasonRegister()
      {
         // Construct new Mockup client to test with.
         CasinoJamSeasonsControllerMockupClient mockupClient = new CasinoJamSeasonsControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSeasonsControllerClient rpcClient = new CasinoJamSeasonsControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeAssetSeasonRegister(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAssetSeasonRegister(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetAssetSeasonRegister(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
