//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Substrate.AjunaSolo.NET.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Substrate.AjunaSolo.NET.RestClient.Mockup.Generated.Clients;
   using Substrate.AjunaSolo.NET.RestClient.Generated.Clients;
   using Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto;
   using Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config;
   using Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition;
   using Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base;
   using Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player;
   using Substrate.NetApi.Model.Types.Base;
   using Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset;
   using Substrate.NetApi.Model.Types.Primitive;
   using Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager;
   
   public class CasinoJamSageControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue2()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestOrganizer()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 mockupValue = this.GetTestValue2();


         Assert.IsTrue(await rpcClient.SubscribeOrganizer());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetOrganizer(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 rpcResult = await rpcClient.GetOrganizer();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig GetTestValue4()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig();
         result.Transfer = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.TransferConfig();
         result.Transfer = this.GetTestValue5();
         result.Trade = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.TradeConfig();
         result.Trade = this.GetTestValue6();
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.TransferConfig GetTestValue5()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.TransferConfig result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.TransferConfig();
         result.Open = this.GetTestValueBool();
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.TradeConfig GetTestValue6()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.TradeConfig result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.TradeConfig();
         result.Open = this.GetTestValueBool();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestGeneralConfigStore()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig mockupValue = this.GetTestValue4();


         Assert.IsTrue(await rpcClient.SubscribeGeneralConfigStore());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetGeneralConfigStore(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig rpcResult = await rpcClient.GetGeneralConfigStore();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig GetTestValue8()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig();
         result.RewardMultiplier = this.GetTestValueU8();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestTransitionConfigStore()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig mockupValue = this.GetTestValue8();


         Assert.IsTrue(await rpcClient.SubscribeTransitionConfigStore());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetTransitionConfigStore(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig rpcResult = await rpcClient.GetTransitionConfigStore();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8 GetTestValue10()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8();
         result.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature> GetTestValue11()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature>();
         result.Create(this.GetTestValueU32(), this.GetTestValue12());
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature GetTestValue12()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature();
         result.Create(this.GetTestValueEnum<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.LockableFeature>());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestSeasonUnlocks()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8 mockupValue = this.GetTestValue10();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature> mockupKey = this.GetTestValue11();

         Assert.IsTrue(await rpcClient.SubscribeSeasonUnlocks(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetSeasonUnlocks(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8 rpcResult = await rpcClient.GetSeasonUnlocks(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerConfig GetTestValue14()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerConfig result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerConfig();
         result.InventoryTier = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.EnumInventoryTier();
         result.InventoryTier.Create(this.GetTestValueEnum<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.InventoryTier>());
         result.Locks = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.Locks();
         result.Locks = this.GetTestValue15();
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.Locks GetTestValue15()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.Locks result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.Locks();
         result.AssetTransfer = this.GetTestValueBool();
         result.AssetTrade = this.GetTestValueBool();
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> GetTestValue16()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>();
         result.Create(this.GetTestValue17(), this.GetTestValueU32());
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue17()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPlayerSeasonConfigs()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerConfig mockupValue = this.GetTestValue14();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> mockupKey = this.GetTestValue16();

         Assert.IsTrue(await rpcClient.SubscribePlayerSeasonConfigs(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPlayerSeasonConfigs(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerConfig rpcResult = await rpcClient.GetPlayerSeasonConfigs(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerStats GetTestValue19()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerStats result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerStats();
         result.MintedAmount = this.GetTestValueU32();
         result.ForgedAmount = this.GetTestValueU32();
         result.BoughtAmount = this.GetTestValueU32();
         result.SoldAmount = this.GetTestValueU32();
         result.FirstMint = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
         result.FirstMint.Create(this.GetTestValueU32());
         result.LatestMint = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
         result.LatestMint.Create(this.GetTestValueU32());
         result.FirstForge = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
         result.FirstForge.Create(this.GetTestValueU32());
         result.LatestForge = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
         result.LatestForge.Create(this.GetTestValueU32());
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> GetTestValue20()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>();
         result.Create(this.GetTestValue21(), this.GetTestValueU32());
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue21()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPlayerSeasonStats()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerStats mockupValue = this.GetTestValue19();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> mockupKey = this.GetTestValue20();

         Assert.IsTrue(await rpcClient.SubscribePlayerSeasonStats(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPlayerSeasonStats(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerStats rpcResult = await rpcClient.GetPlayerSeasonStats(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset> GetTestValue23()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset>();
         result.Create(this.GetTestValue24(), this.GetTestValue25());
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue24()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset GetTestValue25()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset();
         result.Id = this.GetTestValueU32();
         result.CollectionId = this.GetTestValueU8();
         result.Genesis = this.GetTestValueU32();
         result.Variant = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumAssetVariant();
         result.Variant = this.GetTestValue26();
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumAssetVariant GetTestValue26()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumAssetVariant result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumAssetVariant();
         // NOT IMPLEMENTED >> Initialize Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumAssetVariant
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAssets()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset> mockupValue = this.GetTestValue23();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeAssets(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAssets(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset> rpcResult = await rpcClient.GetAssets(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple GetTestValue28()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple();
         return result;
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetTestValue29()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>();
         result.Create(this.GetTestValue30(), this.GetTestValueU32(), this.GetTestValueU32());
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue30()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAssetOwners()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Base.BaseTuple mockupValue = this.GetTestValue28();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> mockupKey = this.GetTestValue29();

         Assert.IsTrue(await rpcClient.SubscribeAssetOwners(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAssetOwners(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Base.BaseTuple rpcResult = await rpcClient.GetAssetOwners(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> GetTestValue32()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>();
         result.Create(this.GetTestValue33(), this.GetTestValueU32());
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue33()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAssetsOwnedCount()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U8 mockupValue = this.GetTestValueU8();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> mockupKey = this.GetTestValue32();

         Assert.IsTrue(await rpcClient.SubscribeAssetsOwnedCount(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAssetsOwnedCount(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U8 rpcResult = await rpcClient.GetAssetsOwnedCount(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType GetTestValue35()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType();
         // NOT IMPLEMENTED >> Initialize Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestSeasonTradeFilters()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType mockupValue = this.GetTestValue35();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeSeasonTradeFilters(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetSeasonTradeFilters(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType rpcResult = await rpcClient.GetSeasonTradeFilters(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType GetTestValue37()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType();
         // NOT IMPLEMENTED >> Initialize Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestSeasonTransferFilters()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType mockupValue = this.GetTestValue37();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeSeasonTransferFilters(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetSeasonTransferFilters(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType rpcResult = await rpcClient.GetSeasonTransferFilters(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> GetTestValue39()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>();
         result.Create(this.GetTestValueU32(), this.GetTestValueU32());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAssetTradePrices()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U128 mockupValue = this.GetTestValueU128();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> mockupKey = this.GetTestValue39();

         Assert.IsTrue(await rpcClient.SubscribeAssetTradePrices(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAssetTradePrices(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U128 rpcResult = await rpcClient.GetAssetTradePrices(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager.Lock GetTestValue41()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager.Lock result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager.Lock();
         result.Id = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr8U8();
         result.Id.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         result.Locker = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Locker = this.GetTestValue42();
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue42()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Substrate.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLockedAssets()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager.Lock mockupValue = this.GetTestValue41();
         Substrate.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeLockedAssets(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLockedAssets(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager.Lock rpcResult = await rpcClient.GetLockedAssets(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> GetTestValue44()
      {
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> result;
         result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind>();
         result.Create(this.GetTestValueU32(), this.GetTestValue45());
         return result;
      }
      public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind GetTestValue45()
      {
         Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind result;
         result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind();
         // NOT IMPLEMENTED >> Initialize Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestAssetFunds()
      {
         // Construct new Mockup client to test with.
         CasinoJamSageControllerMockupClient mockupClient = new CasinoJamSageControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         CasinoJamSageControllerClient rpcClient = new CasinoJamSageControllerClient(_httpClient, subscriptionClient);
         Substrate.NetApi.Model.Types.Primitive.U128 mockupValue = this.GetTestValueU128();
         Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> mockupKey = this.GetTestValue44();

         Assert.IsTrue(await rpcClient.SubscribeAssetFunds(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetAssetFunds(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Substrate.NetApi.Model.Types.Primitive.U128 rpcResult = await rpcClient.GetAssetFunds(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
