//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> CasinoJamSageStorage
    /// </summary>
    public sealed class CasinoJamSageStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CasinoJamSageStorage Constructor
        /// </summary>
        public CasinoJamSageStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "Organizer"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "GeneralConfigStore"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "TransitionConfigStore"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "SeasonUnlocks"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature>), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "PlayerSeasonConfigs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "PlayerSeasonStats"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerStats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "Assets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "AssetOwners"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "AssetsOwnedCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Primitive.U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "SeasonTradeFilters"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "SeasonTransferFilters"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "AssetTradePrices"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "LockedAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager.Lock)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSage", "AssetFunds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> OrganizerParams
        ///  Organizer of the game. Essentially the administrator with certain privileges.
        /// </summary>
        public static string OrganizerParams()
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "Organizer", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OrganizerDefault
        /// Default value as hex string
        /// </summary>
        public static string OrganizerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Organizer
        ///  Organizer of the game. Essentially the administrator with certain privileges.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> Organizer(string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.OrganizerParams();
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GeneralConfigStoreParams
        ///  Tracks global configuration values that can be changed by the organizer only.
        /// </summary>
        public static string GeneralConfigStoreParams()
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "GeneralConfigStore", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GeneralConfigStoreDefault
        /// Default value as hex string
        /// </summary>
        public static string GeneralConfigStoreDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> GeneralConfigStore
        ///  Tracks global configuration values that can be changed by the organizer only.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig> GeneralConfigStore(string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.GeneralConfigStoreParams();
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TransitionConfigStoreParams
        ///  Configuration values specific to the transition being used.
        /// </summary>
        public static string TransitionConfigStoreParams()
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "TransitionConfigStore", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> TransitionConfigStoreDefault
        /// Default value as hex string
        /// </summary>
        public static string TransitionConfigStoreDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TransitionConfigStore
        ///  Configuration values specific to the transition being used.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig> TransitionConfigStore(string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.TransitionConfigStoreParams();
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonUnlocksParams
        ///  Some features need to be unlocked fulfilling certain criteria.
        /// 
        ///  This storage keeps track of the `UnlockRule` that needs to be satisfied to unlock the
        ///  feature. If there is no unlock rule, the feature can't be unlocked in that season.
        /// </summary>
        public static string SeasonUnlocksParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature> key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "SeasonUnlocks", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> SeasonUnlocksDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonUnlocksDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonUnlocks
        ///  Some features need to be unlocked fulfilling certain criteria.
        /// 
        ///  This storage keeps track of the `UnlockRule` that needs to be satisfied to unlock the
        ///  feature. If there is no unlock rule, the feature can't be unlocked in that season.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8> SeasonUnlocks(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature> key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.SeasonUnlocksParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PlayerSeasonConfigsParams
        ///  Tracks player configs per season. This can be mutated by unlocking certain privileges, e.g.
        ///  upgrading the storage inventory size.
        /// </summary>
        public static string PlayerSeasonConfigsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "PlayerSeasonConfigs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> PlayerSeasonConfigsDefault
        /// Default value as hex string
        /// </summary>
        public static string PlayerSeasonConfigsDefault()
        {
            return "0x190000";
        }
        
        /// <summary>
        /// >> PlayerSeasonConfigs
        ///  Tracks player configs per season. This can be mutated by unlocking certain privileges, e.g.
        ///  upgrading the storage inventory size.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerConfig> PlayerSeasonConfigs(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.PlayerSeasonConfigsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PlayerSeasonStatsParams
        ///  Tracks player stats per season.
        /// </summary>
        public static string PlayerSeasonStatsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "PlayerSeasonStats", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> PlayerSeasonStatsDefault
        /// Default value as hex string
        /// </summary>
        public static string PlayerSeasonStatsDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> PlayerSeasonStats
        ///  Tracks player stats per season.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerStats> PlayerSeasonStats(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.PlayerSeasonStatsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerStats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetsParams
        ///  Maps the `AssetId` to its owner and the asset.
        /// </summary>
        public static string AssetsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "Assets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Assets
        ///  Maps the `AssetId` to its owner and the asset.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset>> Assets(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.AssetsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetOwnersParams
        ///  Keeps track of the assets owned by an account and in which season the asset was created.
        /// 
        ///  We mostly do ownership checks on this in the runtime. Whereas the frontends want to display
        ///  a list. This has to be queried with a `state.getKeysPaged` followed by a `state.getStorage`
        ///  call. Maybe it makes sense to implement a runtime api call for this to reduce networking
        ///  bandwidth.
        /// </summary>
        public static string AssetOwnersParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "AssetOwners", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> AssetOwnersDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetOwnersDefault()
        {
            return "0x";
        }
        
        /// <summary>
        /// >> AssetOwners
        ///  Keeps track of the assets owned by an account and in which season the asset was created.
        /// 
        ///  We mostly do ownership checks on this in the runtime. Whereas the frontends want to display
        ///  a list. This has to be queried with a `state.getKeysPaged` followed by a `state.getStorage`
        ///  call. Maybe it makes sense to implement a runtime api call for this to reduce networking
        ///  bandwidth.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> AssetOwners(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.AssetOwnersParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetsOwnedCountParams
        ///  Keeps track of how many assets an account owns.
        /// </summary>
        public static string AssetsOwnedCountParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "AssetsOwnedCount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> AssetsOwnedCountDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetsOwnedCountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetsOwnedCount
        ///  Keeps track of how many assets an account owns.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U8> AssetsOwnedCount(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.AssetsOwnedCountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonTradeFiltersParams
        ///  A filter that assets need to pass in order to be traded.
        /// 
        ///  The filter can be changed by the organizer.
        /// </summary>
        public static string SeasonTradeFiltersParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "SeasonTradeFilters", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonTradeFiltersDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonTradeFiltersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonTradeFilters
        ///  A filter that assets need to pass in order to be traded.
        /// 
        ///  The filter can be changed by the organizer.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType> SeasonTradeFilters(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.SeasonTradeFiltersParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonTransferFiltersParams
        ///  A filter that assets need to pass in order to be transfer.
        /// 
        ///  The filter can be changed by the organizer.
        /// </summary>
        public static string SeasonTransferFiltersParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "SeasonTransferFilters", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonTransferFiltersDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonTransferFiltersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonTransferFilters
        ///  A filter that assets need to pass in order to be transfer.
        /// 
        ///  The filter can be changed by the organizer.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType> SeasonTransferFilters(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.SeasonTransferFiltersParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetTradePricesParams
        ///  Tracks assets that have been put on the market with a certain price.
        /// </summary>
        public static string AssetTradePricesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "AssetTradePrices", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> AssetTradePricesDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetTradePricesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetTradePrices
        ///  Tracks assets that have been put on the market with a certain price.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> AssetTradePrices(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.AssetTradePricesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LockedAssetsParams
        ///  Tracks assets that have been locked either through the `lock_asset` extrinsic, or by
        ///  other pallets via this pallet's `AssetManager` implementation.
        /// 
        ///  A locked asset can't be transferred, traded, consumed or mutated.
        /// </summary>
        public static string LockedAssetsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "LockedAssets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LockedAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string LockedAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LockedAssets
        ///  Tracks assets that have been locked either through the `lock_asset` extrinsic, or by
        ///  other pallets via this pallet's `AssetManager` implementation.
        /// 
        ///  A locked asset can't be transferred, traded, consumed or mutated.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager.Lock> LockedAssets(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.LockedAssetsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager.Lock>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetFundsParams
        ///  Tracks how many funds assets have, which will be returned to the owner, once the
        ///  asset is consumed
        /// </summary>
        public static string AssetFundsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> key)
        {
            return RequestGenerator.GetStorage("CasinoJamSage", "AssetFunds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AssetFundsDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetFundsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetFunds
        ///  Tracks how many funds assets have, which will be returned to the owner, once the
        ///  asset is consumed
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> AssetFunds(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSageStorage.AssetFundsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CasinoJamSageCalls
    /// </summary>
    public sealed class CasinoJamSageCalls
    {
        
        /// <summary>
        /// >> set_organizer
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetOrganizer(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 organizer)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(organizer.Encode());
            return new Method(40, "CasinoJamSage", 0, "set_organizer", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_general_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateGeneralConfig(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig new_config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_config.Encode());
            return new Method(40, "CasinoJamSage", 1, "update_general_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_transition_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateTransitionConfig(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig new_config)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_config.Encode());
            return new Method(40, "CasinoJamSage", 2, "update_transition_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_unlock_rule
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateUnlockRule(Substrate.NetApi.Model.Types.Primitive.U32 season_id, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature feature, Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8 unlock_rule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(feature.Encode());
            byteArray.AddRange(unlock_rule.Encode());
            return new Method(40, "CasinoJamSage", 3, "update_unlock_rule", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> upgrade_asset_inventory
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpgradeAssetInventory(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> beneficiary, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> in_season, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> payment)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(beneficiary.Encode());
            byteArray.AddRange(in_season.Encode());
            byteArray.AddRange(payment.Encode());
            return new Method(40, "CasinoJamSage", 4, "upgrade_asset_inventory", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_asset_filter
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateAssetFilter(Substrate.NetApi.Model.Types.Primitive.U32 season_id, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumAssetFilter filter)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(filter.Encode());
            return new Method(40, "CasinoJamSage", 5, "update_asset_filter", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferAsset(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 to, Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> payment)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(payment.Encode());
            return new Method(40, "CasinoJamSage", 6, "transfer_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_asset_price
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetAssetPrice(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Primitive.U128 price)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(price.Encode());
            return new Method(40, "CasinoJamSage", 7, "set_asset_price", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_asset_price
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveAssetPrice(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(40, "CasinoJamSage", 8, "remove_asset_price", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> buy_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BuyAsset(Substrate.NetApi.Model.Types.Primitive.U32 asset_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> payment)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            byteArray.AddRange(payment.Encode());
            return new Method(40, "CasinoJamSage", 9, "buy_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> lock_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method LockAsset(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(40, "CasinoJamSage", 10, "lock_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnlockAsset(Substrate.NetApi.Model.Types.Primitive.U32 asset_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset_id.Encode());
            return new Method(40, "CasinoJamSage", 11, "unlock_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> unlock_feature
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UnlockFeature(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumUnlockTarget target, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature feature, Substrate.NetApi.Model.Types.Primitive.U32 season_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> payment)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(feature.Encode());
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(payment.Encode());
            return new Method(40, "CasinoJamSage", 12, "unlock_feature", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> state_transition
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method StateTransition(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.EnumCasinoAction transition_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32> asset_ids, Substrate.NetApi.Model.Types.Base.BaseTuple extra, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind> payment_kind)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(transition_id.Encode());
            byteArray.AddRange(asset_ids.Encode());
            byteArray.AddRange(extra.Encode());
            byteArray.AddRange(payment_kind.Encode());
            return new Method(40, "CasinoJamSage", 13, "state_transition", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> CasinoJamSageConstants
    /// </summary>
    public sealed class CasinoJamSageConstants
    {
        
        /// <summary>
        /// >> PalletId
        ///  This pallet's id.
        /// 
        ///  It will be used as a lock identifier when locking assets.
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.frame_support.PalletId PalletId()
        {
            var result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.frame_support.PalletId();
            result.Create("0x736167652F686A6D");
            return result;
        }
    }
    
    /// <summary>
    /// >> CasinoJamSageErrors
    /// </summary>
    public enum CasinoJamSageErrors
    {
        
        /// <summary>
        /// >> OrganizerNotSet
        /// There is no account set as the organizer
        /// </summary>
        OrganizerNotSet,
        
        /// <summary>
        /// >> UnknownAsset
        /// The asset doesn't exist.
        /// </summary>
        UnknownAsset,
        
        /// <summary>
        /// >> TransferClosed
        /// Transfer is not available at the moment.
        /// </summary>
        TransferClosed,
        
        /// <summary>
        /// >> TradeClosed
        /// Trading is not available at the moment.
        /// </summary>
        TradeClosed,
        
        /// <summary>
        /// >> MaxOwnershipReached
        /// Max asset ownership reached.
        /// </summary>
        MaxOwnershipReached,
        
        /// <summary>
        /// >> MaxStorageTierReached
        /// Max asset storage tier reached.
        /// </summary>
        MaxStorageTierReached,
        
        /// <summary>
        /// >> AssetNotOwned
        /// Asset belongs to someone else.
        /// </summary>
        AssetNotOwned,
        
        /// <summary>
        /// >> AlreadyOwned
        /// Attempt to buy already owned asset.
        /// </summary>
        AlreadyOwned,
        
        /// <summary>
        /// >> AssetCannotBeTransfered
        /// This asset cannot be used in transfer.
        /// </summary>
        AssetCannotBeTransfered,
        
        /// <summary>
        /// >> AssetCannotBeTraded
        /// This asset cannot be used in trade.
        /// </summary>
        AssetCannotBeTraded,
        
        /// <summary>
        /// >> AssetNotInTrade
        /// An asset selected for buying is not actually in sale.
        /// </summary>
        AssetNotInTrade,
        
        /// <summary>
        /// >> CannotTransferAssetInTrade
        /// An asset listed for trade cannot be transferred to another account.
        /// </summary>
        CannotTransferAssetInTrade,
        
        /// <summary>
        /// >> CannotLockAssetInTrade
        /// An asset in trade cannot be locked.
        /// </summary>
        CannotLockAssetInTrade,
        
        /// <summary>
        /// >> AssetLocked
        /// The asset is currently locked and cannot be used.
        /// </summary>
        AssetLocked,
        
        /// <summary>
        /// >> AssetLockedByOtherApplication
        /// The asset is locked by another application.
        /// </summary>
        AssetLockedByOtherApplication,
        
        /// <summary>
        /// >> AssetNotLocked
        /// The asset is not currently locked and cannot be unlocked.
        /// </summary>
        AssetNotLocked,
        
        /// <summary>
        /// >> AssetsFundsTooLow
        /// The asset does not own enough funds for the operation..
        /// </summary>
        AssetsFundsTooLow,
        
        /// <summary>
        /// >> CannotTransferToSelf
        /// Tried transferring to his or her own account.
        /// </summary>
        CannotTransferToSelf,
        
        /// <summary>
        /// >> FeatureLocked
        /// The feature is locked for the current player
        /// </summary>
        FeatureLocked,
        
        /// <summary>
        /// >> FeatureUnavailableInSeason
        /// The feature trying to be unlocked is not available for the selected season
        /// </summary>
        FeatureUnavailableInSeason,
        
        /// <summary>
        /// >> FeatureLockedThroughPayment
        /// The feature trying to be unlocked cannot be unlocked with payment
        /// </summary>
        FeatureLockedThroughPayment,
        
        /// <summary>
        /// >> UnlockCriteriaNotFulfilled
        /// The feature trying to be unlocked has missing requirements to be fulfilled by
        /// the account trying to unlock it
        /// </summary>
        UnlockCriteriaNotFulfilled,
        
        /// <summary>
        /// >> TooManyAssetsInTransition
        /// The amount of input assets in the transition is greater than 'MAX_ASSETS_IN_TRANSITION'
        /// </summary>
        TooManyAssetsInTransition,
        
        /// <summary>
        /// >> TransitionRuleNotSatisfied
        /// The rule for a given transition was not satisfied.
        /// </summary>
        TransitionRuleNotSatisfied,
        
        /// <summary>
        /// >> TransferError
        /// A transfer error occurred inside the transition.
        /// </summary>
        TransferError,
        
        /// <summary>
        /// >> FeeError
        /// An error occurred during the fee payment of the ransition.
        /// </summary>
        FeeError,
        
        /// <summary>
        /// >> AssetLength
        /// Invalid number of assets for this transition.
        /// </summary>
        AssetLength,
        
        /// <summary>
        /// >> AssetOwnership
        /// Asset Ownership error.
        /// </summary>
        AssetOwnership,
        
        /// <summary>
        /// >> VoucherNotAllowed
        /// Voucher is not allowed for that transition.
        /// </summary>
        VoucherNotAllowed,
        
        /// <summary>
        /// >> Transition
        /// An error occurred during the state transition.
        /// </summary>
        Transition,
    }
}
