//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> CasinoJamSeasonsStorage
    /// </summary>
    public sealed class CasinoJamSeasonsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CasinoJamSeasonsStorage Constructor
        /// </summary>
        public CasinoJamSeasonsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "CurrentSeasonStatus"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonStatus)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "LatestSeason"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "FinishedSeasons"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "NextSeasonChain"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "PrevSeasonChain"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "Seasons"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "SeasonMetadatas"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonMetadata)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "SeasonSchedules"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonSchedule)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "SeasonScheduledActions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.EnumSeasonScheduledAction)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamSeasons", "AssetSeasonRegister"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> CurrentSeasonStatusParams
        /// </summary>
        public static string CurrentSeasonStatusParams()
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "CurrentSeasonStatus", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentSeasonStatusDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentSeasonStatusDefault()
        {
            return "0x0100";
        }
        
        /// <summary>
        /// >> CurrentSeasonStatus
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonStatus> CurrentSeasonStatus(string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.CurrentSeasonStatusParams();
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonStatus>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LatestSeasonParams
        ///  Latest SeasonId created through 'update_season'
        /// </summary>
        public static string LatestSeasonParams()
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "LatestSeason", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LatestSeasonDefault
        /// Default value as hex string
        /// </summary>
        public static string LatestSeasonDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LatestSeason
        ///  Latest SeasonId created through 'update_season'
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LatestSeason(string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.LatestSeasonParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FinishedSeasonsParams
        /// </summary>
        public static string FinishedSeasonsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "FinishedSeasons", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> FinishedSeasonsDefault
        /// Default value as hex string
        /// </summary>
        public static string FinishedSeasonsDefault()
        {
            return "0x";
        }
        
        /// <summary>
        /// >> FinishedSeasons
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> FinishedSeasons(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.FinishedSeasonsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextSeasonChainParams
        ///  Use to represent a linked list of SeasonId. All entries will have a
        ///  value indicating the next season id to them except the latest season added
        ///  which will not have a value for it.
        /// </summary>
        public static string NextSeasonChainParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "NextSeasonChain", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NextSeasonChainDefault
        /// Default value as hex string
        /// </summary>
        public static string NextSeasonChainDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NextSeasonChain
        ///  Use to represent a linked list of SeasonId. All entries will have a
        ///  value indicating the next season id to them except the latest season added
        ///  which will not have a value for it.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextSeasonChain(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.NextSeasonChainParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PrevSeasonChainParams
        ///  Use to represent a linked list of SeasonId. All entries will have a
        ///  value indicating the previous season id to them except the firsts season added
        ///  which will not have a value for it.
        /// </summary>
        public static string PrevSeasonChainParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "PrevSeasonChain", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PrevSeasonChainDefault
        /// Default value as hex string
        /// </summary>
        public static string PrevSeasonChainDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PrevSeasonChain
        ///  Use to represent a linked list of SeasonId. All entries will have a
        ///  value indicating the previous season id to them except the firsts season added
        ///  which will not have a value for it.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> PrevSeasonChain(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.PrevSeasonChainParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonsParams
        ///  Storage for the seasons.
        /// </summary>
        public static string SeasonsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "Seasons", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonsDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Seasons
        ///  Storage for the seasons.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonConfig> Seasons(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.SeasonsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonMetadatasParams
        ///  Storage for the season's metadata.
        /// </summary>
        public static string SeasonMetadatasParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "SeasonMetadatas", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonMetadatasDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonMetadatasDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonMetadatas
        ///  Storage for the season's metadata.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonMetadata> SeasonMetadatas(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.SeasonMetadatasParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonMetadata>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonSchedulesParams
        ///  Storage for the season's schedules.
        /// </summary>
        public static string SeasonSchedulesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "SeasonSchedules", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonSchedulesDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonSchedulesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonSchedules
        ///  Storage for the season's schedules.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonSchedule> SeasonSchedules(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.SeasonSchedulesParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonSchedule>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SeasonScheduledActionsParams
        /// </summary>
        public static string SeasonScheduledActionsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "SeasonScheduledActions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SeasonScheduledActionsDefault
        /// Default value as hex string
        /// </summary>
        public static string SeasonScheduledActionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SeasonScheduledActions
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.EnumSeasonScheduledAction> SeasonScheduledActions(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.SeasonScheduledActionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.EnumSeasonScheduledAction>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AssetSeasonRegisterParams
        ///  Stores the assets season id registration.
        /// </summary>
        public static string AssetSeasonRegisterParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamSeasons", "AssetSeasonRegister", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AssetSeasonRegisterDefault
        /// Default value as hex string
        /// </summary>
        public static string AssetSeasonRegisterDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AssetSeasonRegister
        ///  Stores the assets season id registration.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> AssetSeasonRegister(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamSeasonsStorage.AssetSeasonRegisterParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CasinoJamSeasonsCalls
    /// </summary>
    public sealed class CasinoJamSeasonsCalls
    {
        
        /// <summary>
        /// >> update_season
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateSeason(Substrate.NetApi.Model.Types.Primitive.U32 season_id, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.season_manager.SeasonConfig> config, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonMetadata> metadata, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_seasons.types.SeasonSchedule> schedule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(season_id.Encode());
            byteArray.AddRange(config.Encode());
            byteArray.AddRange(metadata.Encode());
            byteArray.AddRange(schedule.Encode());
            return new Method(34, "CasinoJamSeasons", 0, "update_season", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> interrupt_active_season
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method InterruptActiveSeason()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(34, "CasinoJamSeasons", 1, "interrupt_active_season", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> CasinoJamSeasonsConstants
    /// </summary>
    public sealed class CasinoJamSeasonsConstants
    {
    }
    
    /// <summary>
    /// >> CasinoJamSeasonsErrors
    /// </summary>
    public enum CasinoJamSeasonsErrors
    {
        
        /// <summary>
        /// >> NoActiveSeason
        /// There is currently no active season
        /// </summary>
        NoActiveSeason,
        
        /// <summary>
        /// >> CannotScheduleSeasonWithoutConfig
        /// Cannot set season schedule without season config first.
        /// </summary>
        CannotScheduleSeasonWithoutConfig,
        
        /// <summary>
        /// >> CannotScheduleSeasonIfPreviousSeasonIsInfinite
        /// The previous season has no end, making it so that no
        /// new seasons can be added after it.
        /// </summary>
        CannotScheduleSeasonIfPreviousSeasonIsInfinite,
        
        /// <summary>
        /// >> CannotScheduleInfiniteSeasonIfNextSeasonExists
        /// Cannot modify a season to be infinite if a season after it has already
        /// been scheduled.
        /// </summary>
        CannotScheduleInfiniteSeasonIfNextSeasonExists,
        
        /// <summary>
        /// >> SeasonStartBeforeCurrentBlock
        /// The season's early start is before the current block.
        /// </summary>
        SeasonStartBeforeCurrentBlock,
        
        /// <summary>
        /// >> SeasonStartOverlapsPreviousSeason
        /// The season starts before the previous season starts.
        /// </summary>
        SeasonStartOverlapsPreviousSeason,
        
        /// <summary>
        /// >> SeasonStartOverlapsNextSeason
        /// The season starts after the next season starts.
        /// </summary>
        SeasonStartOverlapsNextSeason,
        
        /// <summary>
        /// >> SeasonStartBeforeEarlyStart
        /// The season's early start is earlier than its normal start.
        /// </summary>
        SeasonStartBeforeEarlyStart,
        
        /// <summary>
        /// >> SeasonEndBeforeStart
        /// The season's start block is greater than its end block.
        /// </summary>
        SeasonEndBeforeStart,
        
        /// <summary>
        /// >> AssetNotRegistered
        /// The given asset was not registered in any season.
        /// </summary>
        AssetNotRegistered,
        
        /// <summary>
        /// >> InvalidSeason
        /// The given season identifier has not been registered.
        /// </summary>
        InvalidSeason,
        
        /// <summary>
        /// >> ScheduleSlotAlreadyInUse
        /// The given season schedule update clashed with another season's schedule.
        /// </summary>
        ScheduleSlotAlreadyInUse,
    }
}
