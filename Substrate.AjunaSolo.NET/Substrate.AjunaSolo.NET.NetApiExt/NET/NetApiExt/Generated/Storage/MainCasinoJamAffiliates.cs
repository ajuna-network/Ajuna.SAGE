//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> CasinoJamAffiliatesStorage
    /// </summary>
    public sealed class CasinoJamAffiliatesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CasinoJamAffiliatesStorage Constructor
        /// </summary>
        public CasinoJamAffiliatesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamAffiliates", "Affiliatees"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT30)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamAffiliates", "Affiliators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_affiliates.traits.AffiliatorState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamAffiliates", "AffiliateRules"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.affiliates.EnumAffiliateMethods), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamAffiliates", "NextAffiliateId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CasinoJamAffiliates", "AffiliateIdMapping"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
        }
        
        /// <summary>
        /// >> AffiliateesParams
        ///  Stores the affiliated accounts from the perspectives of the affiliatee
        /// </summary>
        public static string AffiliateesParams(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamAffiliates", "Affiliatees", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AffiliateesDefault
        /// Default value as hex string
        /// </summary>
        public static string AffiliateesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Affiliatees
        ///  Stores the affiliated accounts from the perspectives of the affiliatee
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT30> Affiliatees(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamAffiliatesStorage.AffiliateesParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT30>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AffiliatorsParams
        ///  Store affiliators aka accounts that have affilatees and earn rewards from them.
        ///  Such accounts can't be affiliatees anymore.
        /// </summary>
        public static string AffiliatorsParams(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamAffiliates", "Affiliators", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AffiliatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string AffiliatorsDefault()
        {
            return "0x0000000000";
        }
        
        /// <summary>
        /// >> Affiliators
        ///  Store affiliators aka accounts that have affilatees and earn rewards from them.
        ///  Such accounts can't be affiliatees anymore.
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_affiliates.traits.AffiliatorState> Affiliators(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamAffiliatesStorage.AffiliatorsParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_affiliates.traits.AffiliatorState>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AffiliateRulesParams
        ///  Stores the affiliate logic rules
        /// </summary>
        public static string AffiliateRulesParams(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.affiliates.EnumAffiliateMethods key)
        {
            return RequestGenerator.GetStorage("CasinoJamAffiliates", "AffiliateRules", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AffiliateRulesDefault
        /// Default value as hex string
        /// </summary>
        public static string AffiliateRulesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AffiliateRules
        ///  Stores the affiliate logic rules
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15> AffiliateRules(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.affiliates.EnumAffiliateMethods key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamAffiliatesStorage.AffiliateRulesParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextAffiliateIdParams
        /// </summary>
        public static string NextAffiliateIdParams()
        {
            return RequestGenerator.GetStorage("CasinoJamAffiliates", "NextAffiliateId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextAffiliateIdDefault
        /// Default value as hex string
        /// </summary>
        public static string NextAffiliateIdDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> NextAffiliateId
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> NextAffiliateId(string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamAffiliatesStorage.NextAffiliateIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AffiliateIdMappingParams
        /// </summary>
        public static string AffiliateIdMappingParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("CasinoJamAffiliates", "AffiliateIdMapping", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AffiliateIdMappingDefault
        /// Default value as hex string
        /// </summary>
        public static string AffiliateIdMappingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AffiliateIdMapping
        /// </summary>
        public async Task<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> AffiliateIdMapping(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = CasinoJamAffiliatesStorage.AffiliateIdMappingParams(key);
            var result = await _client.GetStorageAsync<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CasinoJamAffiliatesCalls
    /// </summary>
    public sealed class CasinoJamAffiliatesCalls
    {
        
        /// <summary>
        /// >> enable_affiliator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method EnableAffiliator(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> target, Substrate.NetApi.Model.Types.Base.BaseTuple @params)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target.Encode());
            byteArray.AddRange(@params.Encode());
            return new Method(32, "CasinoJamAffiliates", 0, "enable_affiliator", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> add_affiliation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AddAffiliation(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> target_affiliatee, Substrate.NetApi.Model.Types.Primitive.U32 affiliate_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(target_affiliatee.Encode());
            byteArray.AddRange(affiliate_id.Encode());
            return new Method(32, "CasinoJamAffiliates", 1, "add_affiliation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> remove_affiliation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RemoveAffiliation(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 account)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            return new Method(32, "CasinoJamAffiliates", 2, "remove_affiliation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_rule_for
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetRuleFor(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.affiliates.EnumAffiliateMethods rule_id, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT15 rule)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(rule_id.Encode());
            byteArray.AddRange(rule.Encode());
            return new Method(32, "CasinoJamAffiliates", 3, "set_rule_for", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> clear_rule_for
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClearRuleFor(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.affiliates.EnumAffiliateMethods rule_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(rule_id.Encode());
            return new Method(32, "CasinoJamAffiliates", 4, "clear_rule_for", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> CasinoJamAffiliatesConstants
    /// </summary>
    public sealed class CasinoJamAffiliatesConstants
    {
        
        /// <summary>
        /// >> WhitelistKey
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr8U8 WhitelistKey()
        {
            var result = new Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr8U8();
            result.Create("0x0000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> AffiliateMaxLevel
        ///  The maximum depth of the affiliate relation chain,
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 AffiliateMaxLevel()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x02000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> CasinoJamAffiliatesErrors
    /// </summary>
    public enum CasinoJamAffiliatesErrors
    {
        
        /// <summary>
        /// >> CannotAffiliateSelf
        /// An account cannot affiliate itself
        /// </summary>
        CannotAffiliateSelf,
        
        /// <summary>
        /// >> TargetAccountIsNotAffiliatable
        /// The account is not allowed to receive affiliates
        /// </summary>
        TargetAccountIsNotAffiliatable,
        
        /// <summary>
        /// >> AffiliateOthersOnlyWhiteListed
        /// Only whitelisted accounts can affiliate for others
        /// </summary>
        AffiliateOthersOnlyWhiteListed,
        
        /// <summary>
        /// >> AffiliatorNotFound
        /// No account matches the provided affiliator identifier
        /// </summary>
        AffiliatorNotFound,
        
        /// <summary>
        /// >> CannotAffiliateMoreAccounts
        /// This account has reached the affiliate limit
        /// </summary>
        CannotAffiliateMoreAccounts,
        
        /// <summary>
        /// >> CannotAffiliateAlreadyAffiliatedAccount
        /// This account has already been affiliated by another affiliator
        /// </summary>
        CannotAffiliateAlreadyAffiliatedAccount,
        
        /// <summary>
        /// >> CannotAffiliateToExistingAffiliator
        /// This account is already an affiliator, so it cannot affiliate to another account
        /// </summary>
        CannotAffiliateToExistingAffiliator,
        
        /// <summary>
        /// >> CannotAffiliateBlocked
        /// The account is blocked, so it cannot be affiliated to
        /// </summary>
        CannotAffiliateBlocked,
        
        /// <summary>
        /// >> ExtrinsicAlreadyHasRule
        /// The given extrinsic identifier is already paired with an affiliate rule
        /// </summary>
        ExtrinsicAlreadyHasRule,
        
        /// <summary>
        /// >> ExtrinsicHasNoRule
        /// The given extrinsic identifier is not associated with any rule
        /// </summary>
        ExtrinsicHasNoRule,
    }
}
