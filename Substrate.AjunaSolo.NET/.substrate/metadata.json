{
  "Origin": "",
  "Magic": "0x6D657461",
  "Version": 14,
  "NodeMetadata": {
    "Types": {
      "0": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_core",
          "crypto",
          "AccountId32"
        ],
        "TypeDef": "Composite"
      },
      "1": {
        "Length": 32,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "2": {
        "Primitive": "U8",
        "TypeDef": "Primitive"
      },
      "3": {
        "TypeFields": [
          {
            "Name": "nonce",
            "TypeName": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "consumers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "providers",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "RefCount",
            "TypeId": 4
          },
          {
            "Name": "data",
            "TypeName": "AccountData",
            "TypeId": 5
          }
        ],
        "Path": [
          "frame_system",
          "AccountInfo"
        ],
        "TypeParams": [
          {
            "Name": "Nonce",
            "TypeId": 4
          },
          {
            "Name": "AccountData",
            "TypeId": 5
          }
        ],
        "TypeDef": "Composite"
      },
      "4": {
        "Primitive": "U32",
        "TypeDef": "Primitive"
      },
      "5": {
        "TypeFields": [
          {
            "Name": "free",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reserved",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "frozen",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "flags",
            "TypeName": "ExtraFlags",
            "TypeId": 7
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AccountData"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "6": {
        "Primitive": "U128",
        "TypeDef": "Primitive"
      },
      "7": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ExtraFlags"
        ],
        "TypeDef": "Composite"
      },
      "8": {
        "Primitive": "Bool",
        "TypeDef": "Primitive"
      },
      "9": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 10
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 10
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 10
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Composite"
      },
      "10": {
        "TypeFields": [
          {
            "Name": "ref_time",
            "TypeName": "u64",
            "TypeId": 11
          },
          {
            "Name": "proof_size",
            "TypeName": "u64",
            "TypeId": 11
          }
        ],
        "Path": [
          "sp_weights",
          "weight_v2",
          "Weight"
        ],
        "TypeDef": "Composite"
      },
      "11": {
        "TypeId": 12,
        "TypeDef": "Compact"
      },
      "12": {
        "Primitive": "U64",
        "TypeDef": "Primitive"
      },
      "13": {
        "TypeFields": [
          {
            "TypeName": "[u8; 32]",
            "TypeId": 1
          }
        ],
        "Path": [
          "primitive_types",
          "H256"
        ],
        "TypeDef": "Composite"
      },
      "14": {
        "TypeId": 2,
        "TypeDef": "Sequence"
      },
      "15": {
        "TypeFields": [
          {
            "Name": "logs",
            "TypeName": "Vec<DigestItem>",
            "TypeId": 16
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "Digest"
        ],
        "TypeDef": "Composite"
      },
      "16": {
        "TypeId": 17,
        "TypeDef": "Sequence"
      },
      "17": {
        "Variants": [
          {
            "Name": "PreRuntime",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 18
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 6
          },
          {
            "Name": "Consensus",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 18
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 4
          },
          {
            "Name": "Seal",
            "TypeFields": [
              {
                "TypeName": "ConsensusEngineId",
                "TypeId": 18
              },
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 5
          },
          {
            "Name": "Other",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0
          },
          {
            "Name": "RuntimeEnvironmentUpdated",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "digest",
          "DigestItem"
        ],
        "TypeDef": "Variant"
      },
      "18": {
        "Length": 4,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "19": {
        "TypeId": 20,
        "TypeDef": "Sequence"
      },
      "20": {
        "TypeFields": [
          {
            "Name": "phase",
            "TypeName": "Phase",
            "TypeId": 101
          },
          {
            "Name": "event",
            "TypeName": "E",
            "TypeId": 21
          },
          {
            "Name": "topics",
            "TypeName": "Vec<T>",
            "TypeId": 102
          }
        ],
        "Path": [
          "frame_system",
          "EventRecord"
        ],
        "TypeParams": [
          {
            "Name": "E",
            "TypeId": 21
          },
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Composite"
      },
      "21": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "frame_system::Event<Runtime>",
                "TypeId": 22
              }
            ],
            "Index": 0
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "pallet_grandpa::Event",
                "TypeId": 31
              }
            ],
            "Index": 3
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "pallet_balances::Event<Runtime>",
                "TypeId": 35
              }
            ],
            "Index": 4
          },
          {
            "Name": "TransactionPayment",
            "TypeFields": [
              {
                "TypeName": "pallet_transaction_payment::Event<Runtime>",
                "TypeId": 37
              }
            ],
            "Index": 5
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "pallet_assets::Event<Runtime>",
                "TypeId": 38
              }
            ],
            "Index": 7
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "orml_vesting::Event<Runtime>",
                "TypeId": 39
              }
            ],
            "Index": 8
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                "TypeId": 42
              }
            ],
            "Index": 9
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                "TypeId": 45
              }
            ],
            "Index": 10
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "pallet_treasury::Event<Runtime>",
                "TypeId": 46
              }
            ],
            "Index": 11
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "pallet_democracy::Event<Runtime>",
                "TypeId": 47
              }
            ],
            "Index": 12
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "pallet_sudo::Event<Runtime>",
                "TypeId": 52
              }
            ],
            "Index": 13
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "pallet_scheduler::Event<Runtime>",
                "TypeId": 54
              }
            ],
            "Index": 14
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "pallet_identity::Event<Runtime>",
                "TypeId": 57
              }
            ],
            "Index": 15
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "pallet_proxy::Event<Runtime>",
                "TypeId": 59
              }
            ],
            "Index": 16
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "pallet_multisig::Event<Runtime>",
                "TypeId": 62
              }
            ],
            "Index": 17
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "pallet_utility::Event",
                "TypeId": 64
              }
            ],
            "Index": 18
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "pallet_preimage::Event<Runtime>",
                "TypeId": 65
              }
            ],
            "Index": 19
          },
          {
            "Name": "Migrations",
            "TypeFields": [
              {
                "TypeName": "pallet_migrations::Event<Runtime>",
                "TypeId": 66
              }
            ],
            "Index": 20
          },
          {
            "Name": "CasinoJamAffiliates",
            "TypeFields": [
              {
                "TypeName": "pallet_ajuna_affiliates::Event<Runtime, pallet_ajuna_affiliates::\nInstance1>",
                "TypeId": 68
              }
            ],
            "Index": 32
          },
          {
            "Name": "CasinoJamTournament",
            "TypeFields": [
              {
                "TypeName": "pallet_ajuna_tournament::Event<Runtime, pallet_ajuna_tournament::\nInstance1>",
                "TypeId": 77
              }
            ],
            "Index": 33
          },
          {
            "Name": "CasinoJamSeasons",
            "TypeFields": [
              {
                "TypeName": "pallet_ajuna_seasons::Event<Runtime, pallet_ajuna_seasons::Instance1>",
                "TypeId": 78
              }
            ],
            "Index": 34
          },
          {
            "Name": "CasinoJamSage",
            "TypeFields": [
              {
                "TypeName": "pallet_sage::Event<Runtime, pallet_sage::Instance1>",
                "TypeId": 89
              }
            ],
            "Index": 40
          }
        ],
        "Path": [
          "ajuna_solo_runtime",
          "RuntimeEvent"
        ],
        "TypeDef": "Variant"
      },
      "22": {
        "Variants": [
          {
            "Name": "ExtrinsicSuccess",
            "TypeFields": [
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 23
              }
            ],
            "Index": 0,
            "Docs": [
              "An extrinsic completed successfully."
            ]
          },
          {
            "Name": "ExtrinsicFailed",
            "TypeFields": [
              {
                "Name": "dispatch_error",
                "TypeName": "DispatchError",
                "TypeId": 26
              },
              {
                "Name": "dispatch_info",
                "TypeName": "DispatchInfo",
                "TypeId": 23
              }
            ],
            "Index": 1,
            "Docs": [
              "An extrinsic failed."
            ]
          },
          {
            "Name": "CodeUpdated",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "`:code` was updated."
            ]
          },
          {
            "Name": "NewAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 3,
            "Docs": [
              "A new account was created."
            ]
          },
          {
            "Name": "KilledAccount",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "An account was reaped."
            ]
          },
          {
            "Name": "Remarked",
            "TypeFields": [
              {
                "Name": "sender",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 5,
            "Docs": [
              "On on-chain remark happened."
            ]
          },
          {
            "Name": "UpgradeAuthorized",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "check_version",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 6,
            "Docs": [
              "An upgrade was authorized."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Event for the System pallet."
        ]
      },
      "23": {
        "TypeFields": [
          {
            "Name": "weight",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "class",
            "TypeName": "DispatchClass",
            "TypeId": 24
          },
          {
            "Name": "pays_fee",
            "TypeName": "Pays",
            "TypeId": 25
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchInfo"
        ],
        "TypeDef": "Composite"
      },
      "24": {
        "Variants": [
          {
            "Name": "Normal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Operational",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mandatory",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "DispatchClass"
        ],
        "TypeDef": "Variant"
      },
      "25": {
        "Variants": [
          {
            "Name": "Yes",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "No",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "Pays"
        ],
        "TypeDef": "Variant"
      },
      "26": {
        "Variants": [
          {
            "Name": "Other",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "CannotLookup",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BadOrigin",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Module",
            "TypeFields": [
              {
                "TypeName": "ModuleError",
                "TypeId": 27
              }
            ],
            "Index": 3
          },
          {
            "Name": "ConsumerRemaining",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "NoProviders",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "TooManyConsumers",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Token",
            "TypeFields": [
              {
                "TypeName": "TokenError",
                "TypeId": 28
              }
            ],
            "Index": 7
          },
          {
            "Name": "Arithmetic",
            "TypeFields": [
              {
                "TypeName": "ArithmeticError",
                "TypeId": 29
              }
            ],
            "Index": 8
          },
          {
            "Name": "Transactional",
            "TypeFields": [
              {
                "TypeName": "TransactionalError",
                "TypeId": 30
              }
            ],
            "Index": 9
          },
          {
            "Name": "Exhausted",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Corruption",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Unavailable",
            "TypeFields": null,
            "Index": 12
          },
          {
            "Name": "RootNotAllowed",
            "TypeFields": null,
            "Index": 13
          }
        ],
        "Path": [
          "sp_runtime",
          "DispatchError"
        ],
        "TypeDef": "Variant"
      },
      "27": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "error",
            "TypeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
            "TypeId": 18
          }
        ],
        "Path": [
          "sp_runtime",
          "ModuleError"
        ],
        "TypeDef": "Composite"
      },
      "28": {
        "Variants": [
          {
            "Name": "FundsUnavailable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OnlyProvider",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "BelowMinimum",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "CannotCreate",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Unsupported",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "CannotCreateHold",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "NotExpendable",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "sp_runtime",
          "TokenError"
        ],
        "TypeDef": "Variant"
      },
      "29": {
        "Variants": [
          {
            "Name": "Underflow",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Overflow",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DivisionByZero",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "sp_arithmetic",
          "ArithmeticError"
        ],
        "TypeDef": "Variant"
      },
      "30": {
        "Variants": [
          {
            "Name": "LimitReached",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "NoLayer",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "sp_runtime",
          "TransactionalError"
        ],
        "TypeDef": "Variant"
      },
      "31": {
        "Variants": [
          {
            "Name": "NewAuthorities",
            "TypeFields": [
              {
                "Name": "authority_set",
                "TypeName": "AuthorityList",
                "TypeId": 32
              }
            ],
            "Index": 0,
            "Docs": [
              "New authority set has been applied."
            ]
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Current authority set has been paused."
            ]
          },
          {
            "Name": "Resumed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Current authority set has been resumed."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "32": {
        "TypeId": 33,
        "TypeDef": "Sequence"
      },
      "33": {
        "TypeIds": [
          34,
          12
        ],
        "TypeDef": "Tuple"
      },
      "34": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Public",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "35": {
        "Variants": [
          {
            "Name": "Endowed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "An account was created with some free balance."
            ]
          },
          {
            "Name": "DustLost",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "An account was removed whose balance was non-zero but below ExistentialDeposit,",
              "resulting in an outright loss."
            ]
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Transfer succeeded."
            ]
          },
          {
            "Name": "BalanceSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "free",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "A balance was set by root."
            ]
          },
          {
            "Name": "Reserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some balance was reserved (moved from free to reserved)."
            ]
          },
          {
            "Name": "Unreserved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Some balance was unreserved (moved from reserved to free)."
            ]
          },
          {
            "Name": "ReserveRepatriated",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "destination_status",
                "TypeName": "Status",
                "TypeId": 36
              }
            ],
            "Index": 6,
            "Docs": [
              "Some balance was moved from the reserve of the first account to the second account.",
              "Final argument indicates the destination balance type."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Some amount was deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Some amount was withdrawn from the account (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Slashed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "Some amount was removed from the account (e.g. for misbehavior)."
            ]
          },
          {
            "Name": "Minted",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Some amount was minted into an account."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 11,
            "Docs": [
              "Some amount was burned from an account."
            ]
          },
          {
            "Name": "Suspended",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 12,
            "Docs": [
              "Some amount was suspended from an account (it can be restored later)."
            ]
          },
          {
            "Name": "Restored",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 13,
            "Docs": [
              "Some amount was restored into an account."
            ]
          },
          {
            "Name": "Upgraded",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "An account was upgraded."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 15,
            "Docs": [
              "Total issuance was increased by `amount`, creating a credit to be balanced."
            ]
          },
          {
            "Name": "Rescinded",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 16,
            "Docs": [
              "Total issuance was decreased by `amount`, creating a debt to be balanced."
            ]
          },
          {
            "Name": "Locked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "Some balance was locked."
            ]
          },
          {
            "Name": "Unlocked",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 18,
            "Docs": [
              "Some balance was unlocked."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "Some balance was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 20,
            "Docs": [
              "Some balance was thawed."
            ]
          },
          {
            "Name": "TotalIssuanceForced",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "T::Balance",
                "TypeId": 6
              },
              {
                "Name": "new",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "The `TotalIssuance` was forcefully changed."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "36": {
        "Variants": [
          {
            "Name": "Free",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Reserved",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "BalanceStatus"
        ],
        "TypeDef": "Variant"
      },
      "37": {
        "Variants": [
          {
            "Name": "TransactionFeePaid",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "actual_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              },
              {
                "Name": "tip",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
              "has been paid by `who`."
            ]
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "38": {
        "Variants": [
          {
            "Name": "Created",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "creator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Some asset class was created."
            ]
          },
          {
            "Name": "Issued",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Some assets were issued."
            ]
          },
          {
            "Name": "Transferred",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Some assets were transferred."
            ]
          },
          {
            "Name": "Burned",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Some assets were destroyed."
            ]
          },
          {
            "Name": "TeamChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "issuer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "admin",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "freezer",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 4,
            "Docs": [
              "The management team changed."
            ]
          },
          {
            "Name": "OwnerChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "The owner changed."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 6,
            "Docs": [
              "Some account `who` was frozen."
            ]
          },
          {
            "Name": "Thawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "Some account `who` was thawed."
            ]
          },
          {
            "Name": "AssetFrozen",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Some asset `asset_id` was frozen."
            ]
          },
          {
            "Name": "AssetThawed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Some asset `asset_id` was thawed."
            ]
          },
          {
            "Name": "AccountsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "accounts_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "accounts_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Accounts were destroyed for given asset."
            ]
          },
          {
            "Name": "ApprovalsDestroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "approvals_destroyed",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "approvals_remaining",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Approvals were destroyed for given asset."
            ]
          },
          {
            "Name": "DestructionStarted",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An asset class is in the process of being destroyed."
            ]
          },
          {
            "Name": "Destroyed",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "An asset class was destroyed."
            ]
          },
          {
            "Name": "ForceCreated",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "Some asset class was force-created."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 15,
            "Docs": [
              "New metadata has been set for an asset."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been cleared for an asset."
            ]
          },
          {
            "Name": "ApprovedTransfer",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "source",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 17,
            "Docs": [
              "(Additional) funds have been approved for transfer to a destination account."
            ]
          },
          {
            "Name": "ApprovalCancelled",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 18,
            "Docs": [
              "An approval for account `delegate` was cancelled by `owner`."
            ]
          },
          {
            "Name": "TransferredApproved",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "owner",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegate",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "destination",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 19,
            "Docs": [
              "An `amount` was transferred in its entirety from `owner` to `destination` by",
              "the approved `delegate`."
            ]
          },
          {
            "Name": "AssetStatusChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              }
            ],
            "Index": 20,
            "Docs": [
              "An asset has had its attributes changed by the `Force` origin."
            ]
          },
          {
            "Name": "AssetMinBalanceChanged",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "new_min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 21,
            "Docs": [
              "The min_balance of an asset has been updated by the asset owner."
            ]
          },
          {
            "Name": "Touched",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "depositor",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 22,
            "Docs": [
              "Some account `who` was created with a deposit from `depositor`."
            ]
          },
          {
            "Name": "Blocked",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 23,
            "Docs": [
              "Some account `who` was blocked."
            ]
          },
          {
            "Name": "Deposited",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 24,
            "Docs": [
              "Some assets were deposited (e.g. for transaction fees)."
            ]
          },
          {
            "Name": "Withdrawn",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "T::AssetId",
                "TypeId": 4
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 25,
            "Docs": [
              "Some assets were withdrawn from the account (e.g. for transaction fees)."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "39": {
        "Variants": [
          {
            "Name": "VestingScheduleAdded",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "vesting_schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 40
              }
            ],
            "Index": 0,
            "Docs": [
              "Added new vesting schedule."
            ]
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "Claimed vesting."
            ]
          },
          {
            "Name": "VestingSchedulesUpdated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2,
            "Docs": [
              "Updated vesting schedules."
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "40": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "period_count",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "per_period",
            "TypeName": "Balance",
            "TypeId": 41
          }
        ],
        "Path": [
          "orml_vesting",
          "VestingSchedule"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "41": {
        "TypeId": 6,
        "TypeDef": "Compact"
      },
      "42": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "43": {
        "Variants": [
          {
            "Name": "Ok",
            "TypeFields": [
              {
                "TypeId": 44
              }
            ],
            "Index": 0
          },
          {
            "Name": "Err",
            "TypeFields": [
              {
                "TypeId": 26
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Result"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 44
          },
          {
            "Name": "E",
            "TypeId": 26
          }
        ],
        "TypeDef": "Variant"
      },
      "44": {
        "TypeIds": [],
        "TypeDef": "Tuple"
      },
      "45": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion (given hash) has been proposed (by given account) with a threshold (given",
              "`MemberCount`)."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "voted",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "A motion (given hash) has been voted on by given account, leaving",
              "a tally (yes votes and no votes given respectively as `MemberCount`)."
            ]
          },
          {
            "Name": "Approved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "A motion was approved by the required threshold."
            ]
          },
          {
            "Name": "Disapproved",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "A motion was not approved by the required threshold."
            ]
          },
          {
            "Name": "Executed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 4,
            "Docs": [
              "A motion was executed; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "MemberExecuted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 5,
            "Docs": [
              "A single member did some action; result will be `Ok` if it returned without error."
            ]
          },
          {
            "Name": "Closed",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "yes",
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "Name": "no",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A proposal was closed because its threshold was reached or after its duration was up."
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "46": {
        "Variants": [
          {
            "Name": "Spending",
            "TypeFields": [
              {
                "Name": "budget_remaining",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "Name": "Awarded",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "award",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1,
            "Docs": [
              "Some funds have been allocated."
            ]
          },
          {
            "Name": "Burnt",
            "TypeFields": [
              {
                "Name": "burnt_funds",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "Some of our funds have been burnt."
            ]
          },
          {
            "Name": "Rollover",
            "TypeFields": [
              {
                "Name": "rollover_balance",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 3,
            "Docs": [
              "Spending has finished; this is the amount that rolls over until next spend."
            ]
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 4,
            "Docs": [
              "Some funds have been deposited."
            ]
          },
          {
            "Name": "SpendApproved",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "ProposalIndex",
                "TypeId": 4
              },
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 5,
            "Docs": [
              "A new spend proposal has been approved."
            ]
          },
          {
            "Name": "UpdatedInactive",
            "TypeFields": [
              {
                "Name": "reactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "deactivated",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 6,
            "Docs": [
              "The inactive funds of the pallet have been updated."
            ]
          },
          {
            "Name": "AssetSpendApproved",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "asset_kind",
                "TypeName": "T::AssetKind",
                "TypeId": 44
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 6
              },
              {
                "Name": "beneficiary",
                "TypeName": "T::Beneficiary",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "expire_at",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "A new asset spend proposal has been approved."
            ]
          },
          {
            "Name": "AssetSpendVoided",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "An approved spend was voided."
            ]
          },
          {
            "Name": "Paid",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 44
              }
            ],
            "Index": 9,
            "Docs": [
              "A payment happened."
            ]
          },
          {
            "Name": "PaymentFailed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              },
              {
                "Name": "payment_id",
                "TypeName": "<T::Paymaster as Pay>::Id",
                "TypeId": 44
              }
            ],
            "Index": 10,
            "Docs": [
              "A payment failed and can be retried."
            ]
          },
          {
            "Name": "SpendProcessed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "A spend was processed and removed from the storage. It might have been successfully",
              "paid or it may have expired."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "47": {
        "Variants": [
          {
            "Name": "Proposed",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "A motion has been proposed by a public account."
            ]
          },
          {
            "Name": "Tabled",
            "TypeFields": [
              {
                "Name": "proposal_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A public proposal has been tabled for referendum vote."
            ]
          },
          {
            "Name": "ExternalTabled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "An external proposal has been tabled."
            ]
          },
          {
            "Name": "Started",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "threshold",
                "TypeName": "VoteThreshold",
                "TypeId": 48
              }
            ],
            "Index": 3,
            "Docs": [
              "A referendum has begun."
            ]
          },
          {
            "Name": "Passed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proposal has been approved by referendum."
            ]
          },
          {
            "Name": "NotPassed",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A proposal has been rejected by referendum."
            ]
          },
          {
            "Name": "Cancelled",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A referendum has been cancelled."
            ]
          },
          {
            "Name": "Delegated",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 7,
            "Docs": [
              "An account has delegated their vote to another account."
            ]
          },
          {
            "Name": "Undelegated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 8,
            "Docs": [
              "An account has cancelled a previous delegation operation."
            ]
          },
          {
            "Name": "Vetoed",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "until",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "An external proposal has been vetoed."
            ]
          },
          {
            "Name": "Blacklisted",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 10,
            "Docs": [
              "A proposal_hash has been blacklisted permanently."
            ]
          },
          {
            "Name": "Voted",
            "TypeFields": [
              {
                "Name": "voter",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 49
              }
            ],
            "Index": 11,
            "Docs": [
              "An account has voted in a referendum"
            ]
          },
          {
            "Name": "Seconded",
            "TypeFields": [
              {
                "Name": "seconder",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 12,
            "Docs": [
              "An account has seconded a proposal"
            ]
          },
          {
            "Name": "ProposalCanceled",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A proposal got canceled."
            ]
          },
          {
            "Name": "MetadataSet",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 51,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "Metadata for a proposal or a referendum has been set."
            ]
          },
          {
            "Name": "MetadataCleared",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 51,
                "Docs": [
                  "Metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 15,
            "Docs": [
              "Metadata for a proposal or a referendum has been cleared."
            ]
          },
          {
            "Name": "MetadataTransferred",
            "TypeFields": [
              {
                "Name": "prev_owner",
                "TypeName": "MetadataOwner",
                "TypeId": 51,
                "Docs": [
                  "Previous metadata owner."
                ]
              },
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 51,
                "Docs": [
                  "New metadata owner."
                ]
              },
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13,
                "Docs": [
                  "Preimage hash."
                ]
              }
            ],
            "Index": 16,
            "Docs": [
              "Metadata has been transferred to new owner."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "48": {
        "Variants": [
          {
            "Name": "SuperMajorityApprove",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "SuperMajorityAgainst",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "SimpleMajority",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote_threshold",
          "VoteThreshold"
        ],
        "TypeDef": "Variant"
      },
      "49": {
        "Variants": [
          {
            "Name": "Standard",
            "TypeFields": [
              {
                "Name": "vote",
                "TypeName": "Vote",
                "TypeId": 50
              },
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 0
          },
          {
            "Name": "Split",
            "TypeFields": [
              {
                "Name": "aye",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "nay",
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "AccountVote"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "50": {
        "TypeFields": [
          {
            "TypeId": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Vote"
        ],
        "TypeDef": "Composite"
      },
      "51": {
        "Variants": [
          {
            "Name": "External",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Proposal",
            "TypeFields": [
              {
                "TypeName": "PropIndex",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Referendum",
            "TypeFields": [
              {
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "MetadataOwner"
        ],
        "TypeDef": "Variant"
      },
      "52": {
        "Variants": [
          {
            "Name": "Sudid",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 43,
                "Docs": [
                  "The result of the call made by the sudo user."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A sudo call just took place."
            ]
          },
          {
            "Name": "KeyChanged",
            "TypeFields": [
              {
                "Name": "old",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 53,
                "Docs": [
                  "The old sudo key (if one was previously set)."
                ]
              },
              {
                "Name": "new",
                "TypeName": "T::AccountId",
                "TypeId": 0,
                "Docs": [
                  "The new sudo key (if one was set)."
                ]
              }
            ],
            "Index": 1,
            "Docs": [
              "The sudo key has been updated."
            ]
          },
          {
            "Name": "KeyRemoved",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The key was permanently removed."
            ]
          },
          {
            "Name": "SudoAsDone",
            "TypeFields": [
              {
                "Name": "sudo_result",
                "TypeName": "DispatchResult",
                "TypeId": 43,
                "Docs": [
                  "The result of the call made by the sudo user."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A [sudo_as](Pallet::sudo_as) call just took place."
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "53": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "54": {
        "Variants": [
          {
            "Name": "Scheduled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Scheduled some task."
            ]
          },
          {
            "Name": "Canceled",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Canceled some task."
            ]
          },
          {
            "Name": "Dispatched",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 56
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 2,
            "Docs": [
              "Dispatched some task."
            ]
          },
          {
            "Name": "RetrySet",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 56
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 3,
            "Docs": [
              "Set a retry configuration for some task."
            ]
          },
          {
            "Name": "RetryCancelled",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 56
              }
            ],
            "Index": 4,
            "Docs": [
              "Cancel a retry configuration for some task."
            ]
          },
          {
            "Name": "CallUnavailable",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 56
              }
            ],
            "Index": 5,
            "Docs": [
              "The call for the provided hash was not found so the task has been aborted."
            ]
          },
          {
            "Name": "PeriodicFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 56
              }
            ],
            "Index": 6,
            "Docs": [
              "The given task was unable to be renewed since the agenda is full at that block."
            ]
          },
          {
            "Name": "RetryFailed",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 56
              }
            ],
            "Index": 7,
            "Docs": [
              "The given task was unable to be retried since the agenda is full at that block or there",
              "was not enough weight to reschedule it."
            ]
          },
          {
            "Name": "PermanentlyOverweight",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "id",
                "TypeName": "Option<TaskName>",
                "TypeId": 56
              }
            ],
            "Index": 8,
            "Docs": [
              "The given task can never be executed since it is overweight."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Events type."
        ]
      },
      "55": {
        "TypeIds": [
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "56": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 1
          }
        ],
        "TypeDef": "Variant"
      },
      "57": {
        "Variants": [
          {
            "Name": "IdentitySet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "A name was set or reset (which will remove all judgements)."
            ]
          },
          {
            "Name": "IdentityCleared",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 1,
            "Docs": [
              "A name was cleared, and the given balance returned."
            ]
          },
          {
            "Name": "IdentityKilled",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 2,
            "Docs": [
              "A name was removed and the given balance slashed."
            ]
          },
          {
            "Name": "JudgementRequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A judgement was asked from a registrar."
            ]
          },
          {
            "Name": "JudgementUnrequested",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A judgement request was retracted."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "A judgement was given by a registrar."
            ]
          },
          {
            "Name": "RegistrarAdded",
            "TypeFields": [
              {
                "Name": "registrar_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "A registrar was added."
            ]
          },
          {
            "Name": "SubIdentityAdded",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "A sub-identity was added to an identity and the deposit paid."
            ]
          },
          {
            "Name": "SubIdentityRemoved",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "A sub-identity was removed from an identity and the deposit freed."
            ]
          },
          {
            "Name": "SubIdentityRevoked",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "main",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "deposit",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 9,
            "Docs": [
              "A sub-identity was cleared, and the given deposit repatriated from the",
              "main identity account to the sub-identity account."
            ]
          },
          {
            "Name": "AuthorityAdded",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 10,
            "Docs": [
              "A username authority was added."
            ]
          },
          {
            "Name": "AuthorityRemoved",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 11,
            "Docs": [
              "A username authority was removed."
            ]
          },
          {
            "Name": "UsernameSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 58
              }
            ],
            "Index": 12,
            "Docs": [
              "A username was set for `who`."
            ]
          },
          {
            "Name": "UsernameQueued",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 58
              },
              {
                "Name": "expiration",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 13,
            "Docs": [
              "A username was queued, but `who` must accept it prior to `expiration`."
            ]
          },
          {
            "Name": "PreapprovalExpired",
            "TypeFields": [
              {
                "Name": "whose",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 14,
            "Docs": [
              "A queued username passed its expiration without being claimed and was removed."
            ]
          },
          {
            "Name": "PrimaryUsernameSet",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 58
              }
            ],
            "Index": 15,
            "Docs": [
              "A username was set as a primary and can be looked up from `who`."
            ]
          },
          {
            "Name": "DanglingUsernameRemoved",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 58
              }
            ],
            "Index": 16,
            "Docs": [
              "A dangling username (as in, a username corresponding to an account that has removed its",
              "identity) has been removed."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "58": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "59": {
        "Variants": [
          {
            "Name": "ProxyExecuted",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 0,
            "Docs": [
              "A proxy was executed correctly, with the given."
            ]
          },
          {
            "Name": "PureCreated",
            "TypeFields": [
              {
                "Name": "pure",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "who",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 60
              },
              {
                "Name": "disambiguation_index",
                "TypeName": "u16",
                "TypeId": 61
              }
            ],
            "Index": 1,
            "Docs": [
              "A pure account has been created by new proxy with given",
              "disambiguation index and proxy type."
            ]
          },
          {
            "Name": "Announced",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "An announcement was placed to make a call in the future."
            ]
          },
          {
            "Name": "ProxyAdded",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 60
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "A proxy was added."
            ]
          },
          {
            "Name": "ProxyRemoved",
            "TypeFields": [
              {
                "Name": "delegator",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "delegatee",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 60
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "A proxy was removed."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "60": {
        "Variants": [
          {
            "Name": "Any",
            "TypeFields": null,
            "Index": 0
          }
        ],
        "Path": [
          "ajuna_solo_runtime",
          "types",
          "proxy",
          "ProxyType"
        ],
        "TypeDef": "Variant"
      },
      "61": {
        "Primitive": "U16",
        "TypeDef": "Primitive"
      },
      "62": {
        "Variants": [
          {
            "Name": "NewMultisig",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 0,
            "Docs": [
              "A new multisig operation has begun."
            ]
          },
          {
            "Name": "MultisigApproval",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 63
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 1,
            "Docs": [
              "A multisig operation has been approved by someone."
            ]
          },
          {
            "Name": "MultisigExecuted",
            "TypeFields": [
              {
                "Name": "approving",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 63
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              },
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 2,
            "Docs": [
              "A multisig operation has been executed."
            ]
          },
          {
            "Name": "MultisigCancelled",
            "TypeFields": [
              {
                "Name": "cancelling",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 63
              },
              {
                "Name": "multisig",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHash",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "A multisig operation has been cancelled."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "63": {
        "TypeFields": [
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_multisig",
          "Timepoint"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "64": {
        "Variants": [
          {
            "Name": "BatchInterrupted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 26
              }
            ],
            "Index": 0,
            "Docs": [
              "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
              "well as the error."
            ]
          },
          {
            "Name": "BatchCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Batch of dispatches completed fully with no error."
            ]
          },
          {
            "Name": "BatchCompletedWithErrors",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Batch of dispatches completed but has errors."
            ]
          },
          {
            "Name": "ItemCompleted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A single item within a Batch of dispatches has completed with no error."
            ]
          },
          {
            "Name": "ItemFailed",
            "TypeFields": [
              {
                "Name": "error",
                "TypeName": "DispatchError",
                "TypeId": 26
              }
            ],
            "Index": 4,
            "Docs": [
              "A single item within a Batch of dispatches has completed with error."
            ]
          },
          {
            "Name": "DispatchedAs",
            "TypeFields": [
              {
                "Name": "result",
                "TypeName": "DispatchResult",
                "TypeId": 43
              }
            ],
            "Index": 5,
            "Docs": [
              "A call was dispatched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Event"
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "65": {
        "Variants": [
          {
            "Name": "Noted",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 0,
            "Docs": [
              "A preimage has been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "A preimage has been requested."
            ]
          },
          {
            "Name": "Cleared",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "A preimage has ben cleared."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "66": {
        "Variants": [
          {
            "Name": "UpgradeStarted",
            "TypeFields": [
              {
                "Name": "migrations",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The number of migrations that this upgrade contains.",
                  "",
                  "This can be used to design a progress indicator in combination with counting the",
                  "`MigrationCompleted` and `MigrationSkipped` events."
                ]
              }
            ],
            "Index": 0,
            "Docs": [
              "A Runtime upgrade started.",
              "",
              "Its end is indicated by `UpgradeCompleted` or `UpgradeFailed`."
            ]
          },
          {
            "Name": "UpgradeCompleted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The current runtime upgrade completed.",
              "",
              "This implies that all of its migrations completed successfully as well."
            ]
          },
          {
            "Name": "UpgradeFailed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Runtime upgrade failed.",
              "",
              "This is very bad and will require governance intervention."
            ]
          },
          {
            "Name": "MigrationSkipped",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The index of the skipped migration within the [`Config::Migrations`] list."
                ]
              }
            ],
            "Index": 3,
            "Docs": [
              "A migration was skipped since it was already executed in the past."
            ]
          },
          {
            "Name": "MigrationAdvanced",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The index of the migration within the [`Config::Migrations`] list."
                ]
              },
              {
                "Name": "took",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The number of blocks that this migration took so far."
                ]
              }
            ],
            "Index": 4,
            "Docs": [
              "A migration progressed."
            ]
          },
          {
            "Name": "MigrationCompleted",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The index of the migration within the [`Config::Migrations`] list."
                ]
              },
              {
                "Name": "took",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The number of blocks that this migration took so far."
                ]
              }
            ],
            "Index": 5,
            "Docs": [
              "A Migration completed."
            ]
          },
          {
            "Name": "MigrationFailed",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4,
                "Docs": [
                  "The index of the migration within the [`Config::Migrations`] list."
                ]
              },
              {
                "Name": "took",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4,
                "Docs": [
                  "The number of blocks that this migration took so far."
                ]
              }
            ],
            "Index": 6,
            "Docs": [
              "A Migration failed.",
              "",
              "This implies that the whole upgrade failed and governance intervention is required."
            ]
          },
          {
            "Name": "HistoricCleared",
            "TypeFields": [
              {
                "Name": "next_cursor",
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 67,
                "Docs": [
                  "Should be passed to `clear_historic` in a successive call."
                ]
              }
            ],
            "Index": 7,
            "Docs": [
              "The set of historical migrations has been cleared."
            ]
          }
        ],
        "Path": [
          "pallet_migrations",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "67": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 14
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 14
          }
        ],
        "TypeDef": "Variant"
      },
      "68": {
        "Variants": [
          {
            "Name": "AccountMarkedAsAffiliatable",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "affiliate_id",
                "TypeName": "AffiliateId",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "AccountAffiliated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "AccountUnaffiliated",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "RuleAdded",
            "TypeFields": [
              {
                "Name": "rule_id",
                "TypeName": "T::RuleIdentifier",
                "TypeId": 69
              }
            ],
            "Index": 3
          },
          {
            "Name": "RuleCleared",
            "TypeFields": [
              {
                "Name": "rule_id",
                "TypeName": "T::RuleIdentifier",
                "TypeId": 69
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "pallet_ajuna_affiliates",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "69": {
        "Variants": [
          {
            "Name": "UpgradeAssetInventory",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "TradeAsset",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "StateTransition",
            "TypeFields": [
              {
                "TypeName": "TransitionId",
                "TypeId": 70
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "affiliates",
          "AffiliateMethods"
        ],
        "TypeParams": [
          {
            "Name": "TransitionId",
            "TypeId": 70
          }
        ],
        "TypeDef": "Variant"
      },
      "70": {
        "Variants": [
          {
            "Name": "Create",
            "TypeFields": [
              {
                "TypeName": "AssetType",
                "TypeId": 71
              }
            ],
            "Index": 0
          },
          {
            "Name": "Deposit",
            "TypeFields": [
              {
                "TypeName": "AssetType",
                "TypeId": 71
              },
              {
                "TypeName": "TokenType",
                "TypeId": 73
              }
            ],
            "Index": 1
          },
          {
            "Name": "Gamble",
            "TypeFields": [
              {
                "TypeName": "MultiplierType",
                "TypeId": 74
              }
            ],
            "Index": 2
          },
          {
            "Name": "Withdraw",
            "TypeFields": [
              {
                "TypeName": "AssetType",
                "TypeId": 71
              },
              {
                "TypeName": "TokenType",
                "TypeId": 73
              }
            ],
            "Index": 3
          },
          {
            "Name": "Rent",
            "TypeFields": [
              {
                "TypeName": "RentDuration",
                "TypeId": 75
              }
            ],
            "Index": 4
          },
          {
            "Name": "Reserve",
            "TypeFields": [
              {
                "TypeName": "ReservationDuration",
                "TypeId": 76
              }
            ],
            "Index": 5
          },
          {
            "Name": "Release",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Kick",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Return",
            "TypeFields": null,
            "Index": 8
          }
        ],
        "Path": [
          "example_transition",
          "transition",
          "CasinoAction"
        ],
        "TypeDef": "Variant"
      },
      "71": {
        "Variants": [
          {
            "Name": "Player",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Machine",
            "TypeFields": [
              {
                "TypeName": "MachineType",
                "TypeId": 72
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "example_transition",
          "transition",
          "AssetType"
        ],
        "TypeDef": "Variant"
      },
      "72": {
        "Variants": [
          {
            "Name": "Bandit",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "example_transition",
          "transition",
          "enums",
          "MachineType"
        ],
        "TypeDef": "Variant"
      },
      "73": {
        "Variants": [
          {
            "Name": "T1",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "T10",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "T100",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "T1000",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "T10000",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "T100000",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "T1000000",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "example_transition",
          "transition",
          "enums",
          "TokenType"
        ],
        "TypeDef": "Variant"
      },
      "74": {
        "Variants": [
          {
            "Name": "V0",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V1",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "V3",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "V4",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "V5",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "V6",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "V7",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "V8",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "V9",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "example_transition",
          "transition",
          "enums",
          "MultiplierType"
        ],
        "TypeDef": "Variant"
      },
      "75": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Day1",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Days2",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Days3",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Days5",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Days7",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Days14",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Days28",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Days56",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Days112",
            "TypeFields": null,
            "Index": 9
          }
        ],
        "Path": [
          "example_transition",
          "transition",
          "enums",
          "RentDuration"
        ],
        "TypeDef": "Variant"
      },
      "76": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mins5",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Mins10",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Mins15",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Mins30",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Mins45",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Hour1",
            "TypeFields": null,
            "Index": 6
          },
          {
            "Name": "Hours2",
            "TypeFields": null,
            "Index": 7
          },
          {
            "Name": "Hours3",
            "TypeFields": null,
            "Index": 8
          },
          {
            "Name": "Hours4",
            "TypeFields": null,
            "Index": 9
          },
          {
            "Name": "Hours6",
            "TypeFields": null,
            "Index": 10
          },
          {
            "Name": "Hours8",
            "TypeFields": null,
            "Index": 11
          },
          {
            "Name": "Hours12",
            "TypeFields": null,
            "Index": 12
          }
        ],
        "Path": [
          "example_transition",
          "transition",
          "enums",
          "ReservationDuration"
        ],
        "TypeDef": "Variant"
      },
      "77": {
        "Variants": [
          {
            "Name": "TournamentCreated",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "tournament_id",
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "TournamentRemoved",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "tournament_id",
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "TournamentActivePeriodStarted",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "tournament_id",
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 2
          },
          {
            "Name": "TournamentClaimPeriodStarted",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "tournament_id",
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 3
          },
          {
            "Name": "TournamentEnded",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "tournament_id",
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 4
          },
          {
            "Name": "EntityEnteredRanking",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "tournament_id",
                "TypeName": "TournamentId",
                "TypeId": 4
              },
              {
                "Name": "entity_id",
                "TypeName": "T::EntityId",
                "TypeId": 4
              },
              {
                "Name": "rank",
                "TypeName": "Rank",
                "TypeId": 4
              }
            ],
            "Index": 5
          },
          {
            "Name": "EntityBecameGoldenDuck",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "tournament_id",
                "TypeName": "TournamentId",
                "TypeId": 4
              },
              {
                "Name": "entity_id",
                "TypeName": "T::EntityId",
                "TypeId": 4
              }
            ],
            "Index": 6
          },
          {
            "Name": "RankingRewardClaimed",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "tournament_id",
                "TypeName": "TournamentId",
                "TypeId": 4
              },
              {
                "Name": "entity_id",
                "TypeName": "T::EntityId",
                "TypeId": 4
              },
              {
                "Name": "account",
                "TypeName": "AccountIdFor<T>",
                "TypeId": 0
              }
            ],
            "Index": 7
          },
          {
            "Name": "GoldenDuckRewardClaimed",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "tournament_id",
                "TypeName": "TournamentId",
                "TypeId": 4
              },
              {
                "Name": "entity_id",
                "TypeName": "T::EntityId",
                "TypeId": 4
              },
              {
                "Name": "account",
                "TypeName": "AccountIdFor<T>",
                "TypeId": 0
              }
            ],
            "Index": 8
          }
        ],
        "Path": [
          "pallet_ajuna_tournament",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "78": {
        "Variants": [
          {
            "Name": "UpdatedSeason",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "config",
                "TypeName": "Option<SeasonConfigOf<T, I>>",
                "TypeId": 79
              },
              {
                "Name": "metadata",
                "TypeName": "Option<SeasonMetadata>",
                "TypeId": 82
              },
              {
                "Name": "schedule",
                "TypeName": "Option<SeasonScheduleOf<T>>",
                "TypeId": 86
              }
            ],
            "Index": 0,
            "Docs": [
              "The season configuration for 'season_id' has been updated."
            ]
          },
          {
            "Name": "SeasonEarlyStarted",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "The season was started during its 'early_start' by the scheduler."
            ]
          },
          {
            "Name": "SeasonStarted",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "The season was started during its 'start' by the scheduler."
            ]
          },
          {
            "Name": "SeasonEnded",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "The season was ended during its 'end' by the scheduler."
            ]
          },
          {
            "Name": "SeasonEarlyEnded",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 4,
            "Docs": [
              "The season was ended prematurely by the organizer."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_seasons",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "79": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 80
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 80
          }
        ],
        "TypeDef": "Variant"
      },
      "80": {
        "TypeFields": [
          {
            "Name": "fee",
            "TypeName": "SeasonFeeConfig<Balance>",
            "TypeId": 81
          }
        ],
        "Path": [
          "ajuna_primitives",
          "season_manager",
          "SeasonConfig"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "81": {
        "TypeFields": [
          {
            "Name": "transfer_asset",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "buy_asset_min",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "buy_percent",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "upgrade_asset_inventory",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "unlock_trade_asset",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "unlock_transfer_asset",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "state_transition_base_fee",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "ajuna_primitives",
          "season_manager",
          "SeasonFeeConfig"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "82": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 83
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 83
          }
        ],
        "TypeDef": "Variant"
      },
      "83": {
        "TypeFields": [
          {
            "Name": "name",
            "TypeName": "BoundedVec<u8, ConstU32<100>>",
            "TypeId": 84
          },
          {
            "Name": "description",
            "TypeName": "BoundedVec<u8, ConstU32<1_000>>",
            "TypeId": 85
          }
        ],
        "Path": [
          "pallet_ajuna_seasons",
          "types",
          "SeasonMetadata"
        ],
        "TypeDef": "Composite"
      },
      "84": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "85": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "86": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 87
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 87
          }
        ],
        "TypeDef": "Variant"
      },
      "87": {
        "TypeFields": [
          {
            "Name": "early_start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "end",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 88
          }
        ],
        "Path": [
          "pallet_ajuna_seasons",
          "types",
          "SeasonSchedule"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "88": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "89": {
        "Variants": [
          {
            "Name": "OrganizerSet",
            "TypeFields": [
              {
                "Name": "organizer",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "An organizer has been set."
            ]
          },
          {
            "Name": "UpdatedGeneralConfig",
            "TypeFields": [
              {
                "Name": "new_config",
                "TypeName": "GeneralConfig",
                "TypeId": 90
              }
            ],
            "Index": 1,
            "Docs": [
              "General configuration updated."
            ]
          },
          {
            "Name": "UpdatedTransitionConfig",
            "TypeFields": [
              {
                "Name": "new_config",
                "TypeName": "TransitionConfigOf<T, I>",
                "TypeId": 93
              }
            ],
            "Index": 2,
            "Docs": [
              "Transition configuration updated."
            ]
          },
          {
            "Name": "UpdatedUnlockRule",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "feature",
                "TypeName": "LockableFeature",
                "TypeId": 94
              },
              {
                "Name": "updated_rule",
                "TypeName": "UnlockRule",
                "TypeId": 95
              }
            ],
            "Index": 3,
            "Docs": [
              "Unlock configuration updated for feature."
            ]
          },
          {
            "Name": "InventoryTierUpgraded",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "new_tier",
                "TypeName": "InventoryTier",
                "TypeId": 96
              }
            ],
            "Index": 4,
            "Docs": [
              "Storage tier has been upgraded."
            ]
          },
          {
            "Name": "UpdatedTradeFilter",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "filter",
                "TypeName": "TradeFilterOf<T, I>",
                "TypeId": 97
              }
            ],
            "Index": 5,
            "Docs": [
              "Trade filter has been updated"
            ]
          },
          {
            "Name": "UpdatedTransferFilter",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "filter",
                "TypeName": "TransferFilterOf<T, I>",
                "TypeId": 97
              }
            ],
            "Index": 6,
            "Docs": [
              "Transfer filter has been updated"
            ]
          },
          {
            "Name": "AssetTransferred",
            "TypeFields": [
              {
                "Name": "from",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Asset transferred."
            ]
          },
          {
            "Name": "AssetPriceSet",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "price",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 8,
            "Docs": [
              "Asset has price set for trade."
            ]
          },
          {
            "Name": "AssetPriceUnset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 9,
            "Docs": [
              "Asset has price removed for trade."
            ]
          },
          {
            "Name": "AssetTraded",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "from",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "to",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "price",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Asset has been traded."
            ]
          },
          {
            "Name": "AssetLocked",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "lock",
                "TypeName": "Lock<AccountIdOf<T>>",
                "TypeId": 99
              }
            ],
            "Index": 11,
            "Docs": [
              "Asset locked."
            ]
          },
          {
            "Name": "AssetUnlocked",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "lock",
                "TypeName": "Lock<AccountIdOf<T>>",
                "TypeId": 99
              }
            ],
            "Index": 12,
            "Docs": [
              "Asset unlocked."
            ]
          },
          {
            "Name": "FeatureUnlocked",
            "TypeFields": [
              {
                "Name": "feature",
                "TypeName": "LockableFeature",
                "TypeId": 94
              },
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 13,
            "Docs": [
              "A feature has been unlocked"
            ]
          },
          {
            "Name": "TransitionExecuted",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0,
                "Docs": [
                  "Account who initiated execution."
                ]
              },
              {
                "Name": "id",
                "TypeName": "TransitionIdOf<T, I>",
                "TypeId": 70,
                "Docs": [
                  "Transition ID that was executed."
                ]
              }
            ],
            "Index": 14,
            "Docs": [
              "A transition has been executed."
            ]
          }
        ],
        "Path": [
          "pallet_sage",
          "pallet",
          "Event"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Event` enum of this pallet"
        ]
      },
      "90": {
        "TypeFields": [
          {
            "Name": "transfer",
            "TypeName": "TransferConfig",
            "TypeId": 91
          },
          {
            "Name": "trade",
            "TypeName": "TradeConfig",
            "TypeId": 92
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "GeneralConfig"
        ],
        "TypeDef": "Composite"
      },
      "91": {
        "TypeFields": [
          {
            "Name": "open",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "TransferConfig"
        ],
        "TypeDef": "Composite"
      },
      "92": {
        "TypeFields": [
          {
            "Name": "open",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "TradeConfig"
        ],
        "TypeDef": "Composite"
      },
      "93": {
        "TypeFields": [
          {
            "Name": "reward_multiplier",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "example_transition",
          "transition",
          "CasinoJamTransitionConfig"
        ],
        "TypeDef": "Composite"
      },
      "94": {
        "Variants": [
          {
            "Name": "TradeAsset",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "TransferAsset",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "LockableFeature"
        ],
        "TypeDef": "Variant"
      },
      "95": {
        "Length": 5,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "96": {
        "Variants": [
          {
            "Name": "One",
            "TypeFields": null,
            "Index": 25
          },
          {
            "Name": "Two",
            "TypeFields": null,
            "Index": 50
          },
          {
            "Name": "Three",
            "TypeFields": null,
            "Index": 75
          },
          {
            "Name": "Four",
            "TypeFields": null,
            "Index": 100
          },
          {
            "Name": "Five",
            "TypeFields": null,
            "Index": 150
          },
          {
            "Name": "Max",
            "TypeFields": null,
            "Index": 200
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "player",
          "InventoryTier"
        ],
        "TypeDef": "Variant"
      },
      "97": {
        "Variants": [
          {
            "Name": "Player",
            "TypeFields": [
              {
                "TypeName": "PlayerType",
                "TypeId": 98
              }
            ],
            "Index": 0
          },
          {
            "Name": "Machine",
            "TypeFields": [
              {
                "TypeName": "MachineType",
                "TypeId": 72
              }
            ],
            "Index": 1
          },
          {
            "Name": "Seat",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "VariantType"
        ],
        "TypeDef": "Variant"
      },
      "98": {
        "Variants": [
          {
            "Name": "Human",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Tracker",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "example_transition",
          "transition",
          "enums",
          "PlayerType"
        ],
        "TypeDef": "Variant"
      },
      "99": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 100
          },
          {
            "Name": "locker",
            "TypeName": "AccountId",
            "TypeId": 0
          }
        ],
        "Path": [
          "ajuna_primitives",
          "asset_manager",
          "Lock"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "100": {
        "Length": 8,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "101": {
        "Variants": [
          {
            "Name": "ApplyExtrinsic",
            "TypeFields": [
              {
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finalization",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Initialization",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_system",
          "Phase"
        ],
        "TypeDef": "Variant"
      },
      "102": {
        "TypeId": 13,
        "TypeDef": "Sequence"
      },
      "103": {
        "TypeId": 55,
        "TypeDef": "Sequence"
      },
      "104": {
        "TypeFields": [
          {
            "Name": "spec_version",
            "TypeName": "codec::Compact<u32>",
            "TypeId": 105
          },
          {
            "Name": "spec_name",
            "TypeName": "sp_runtime::RuntimeString",
            "TypeId": 106
          }
        ],
        "Path": [
          "frame_system",
          "LastRuntimeUpgradeInfo"
        ],
        "TypeDef": "Composite"
      },
      "105": {
        "TypeId": 4,
        "TypeDef": "Compact"
      },
      "106": {
        "Primitive": "Str",
        "TypeDef": "Primitive"
      },
      "107": {
        "TypeFields": [
          {
            "Name": "code_hash",
            "TypeName": "T::Hash",
            "TypeId": 13
          },
          {
            "Name": "check_version",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "frame_system",
          "CodeUpgradeAuthorization"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "108": {
        "Variants": [
          {
            "Name": "remark",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "Make some on-chain remark.",
              "",
              "Can be executed by every `origin`."
            ]
          },
          {
            "Name": "set_heap_pages",
            "TypeFields": [
              {
                "Name": "pages",
                "TypeName": "u64",
                "TypeId": 12
              }
            ],
            "Index": 1,
            "Docs": [
              "Set the number of pages in the WebAssembly environment's heap."
            ]
          },
          {
            "Name": "set_code",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the new runtime code."
            ]
          },
          {
            "Name": "set_code_without_checks",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 3,
            "Docs": [
              "Set the new runtime code without doing any checks of the given `code`.",
              "",
              "Note that runtime upgrades will not run if this is called with a not-increasing spec",
              "version!"
            ]
          },
          {
            "Name": "set_storage",
            "TypeFields": [
              {
                "Name": "items",
                "TypeName": "Vec<KeyValue>",
                "TypeId": 109
              }
            ],
            "Index": 4,
            "Docs": [
              "Set some items of storage."
            ]
          },
          {
            "Name": "kill_storage",
            "TypeFields": [
              {
                "Name": "keys",
                "TypeName": "Vec<Key>",
                "TypeId": 111
              }
            ],
            "Index": 5,
            "Docs": [
              "Kill some items from storage."
            ]
          },
          {
            "Name": "kill_prefix",
            "TypeFields": [
              {
                "Name": "prefix",
                "TypeName": "Key",
                "TypeId": 14
              },
              {
                "Name": "subkeys",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Kill all storage items with a key that starts with the given prefix.",
              "",
              "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
              "the prefix we are removing to accurately calculate the weight of this function."
            ]
          },
          {
            "Name": "remark_with_event",
            "TypeFields": [
              {
                "Name": "remark",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 7,
            "Docs": [
              "Make some on-chain remark and emit event."
            ]
          },
          {
            "Name": "authorize_upgrade",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 9,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "authorize_upgrade_without_checks",
            "TypeFields": [
              {
                "Name": "code_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 10,
            "Docs": [
              "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
              "later.",
              "",
              "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
              "example that the spec name remains the same and that the version number increases. Not",
              "recommended for normal use. Use `authorize_upgrade` instead.",
              "",
              "This call requires Root origin."
            ]
          },
          {
            "Name": "apply_authorized_upgrade",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 11,
            "Docs": [
              "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
              "",
              "If the authorization required a version check, this call will ensure the spec name",
              "remains unchanged and that the spec version has increased.",
              "",
              "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
              "the new `code` in the same block or attempt to schedule the upgrade.",
              "",
              "All origins are allowed."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "109": {
        "TypeId": 110,
        "TypeDef": "Sequence"
      },
      "110": {
        "TypeIds": [
          14,
          14
        ],
        "TypeDef": "Tuple"
      },
      "111": {
        "TypeId": 14,
        "TypeDef": "Sequence"
      },
      "112": {
        "TypeFields": [
          {
            "Name": "base_block",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "max_block",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "per_class",
            "TypeName": "PerDispatchClass<WeightsPerClass>",
            "TypeId": 113
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockWeights"
        ],
        "TypeDef": "Composite"
      },
      "113": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 114
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 114
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 114
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 114
          }
        ],
        "TypeDef": "Composite"
      },
      "114": {
        "TypeFields": [
          {
            "Name": "base_extrinsic",
            "TypeName": "Weight",
            "TypeId": 10
          },
          {
            "Name": "max_extrinsic",
            "TypeName": "Option<Weight>",
            "TypeId": 115
          },
          {
            "Name": "max_total",
            "TypeName": "Option<Weight>",
            "TypeId": 115
          },
          {
            "Name": "reserved",
            "TypeName": "Option<Weight>",
            "TypeId": 115
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "WeightsPerClass"
        ],
        "TypeDef": "Composite"
      },
      "115": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 10
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 10
          }
        ],
        "TypeDef": "Variant"
      },
      "116": {
        "TypeFields": [
          {
            "Name": "max",
            "TypeName": "PerDispatchClass<u32>",
            "TypeId": 117
          }
        ],
        "Path": [
          "frame_system",
          "limits",
          "BlockLength"
        ],
        "TypeDef": "Composite"
      },
      "117": {
        "TypeFields": [
          {
            "Name": "normal",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "operational",
            "TypeName": "T",
            "TypeId": 4
          },
          {
            "Name": "mandatory",
            "TypeName": "T",
            "TypeId": 4
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "PerDispatchClass"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "118": {
        "TypeFields": [
          {
            "Name": "read",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "write",
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_weights",
          "RuntimeDbWeight"
        ],
        "TypeDef": "Composite"
      },
      "119": {
        "TypeFields": [
          {
            "Name": "spec_name",
            "TypeName": "RuntimeString",
            "TypeId": 106
          },
          {
            "Name": "impl_name",
            "TypeName": "RuntimeString",
            "TypeId": 106
          },
          {
            "Name": "authoring_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "spec_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "impl_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "apis",
            "TypeName": "ApisVec",
            "TypeId": 120
          },
          {
            "Name": "transaction_version",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "state_version",
            "TypeName": "u8",
            "TypeId": 2
          }
        ],
        "Path": [
          "sp_version",
          "RuntimeVersion"
        ],
        "TypeDef": "Composite"
      },
      "120": {
        "TypeFields": [
          {
            "TypeId": 121
          }
        ],
        "Path": [
          "Cow"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 121
          }
        ],
        "TypeDef": "Composite"
      },
      "121": {
        "TypeId": 122,
        "TypeDef": "Sequence"
      },
      "122": {
        "TypeIds": [
          100,
          4
        ],
        "TypeDef": "Tuple"
      },
      "123": {
        "Variants": [
          {
            "Name": "InvalidSpecName",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The name of specification does not match between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "SpecVersionNeedsToIncrease",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The specification version is not allowed to decrease between the current runtime",
              "and the new runtime."
            ]
          },
          {
            "Name": "FailedToExtractRuntimeVersion",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Failed to extract the runtime version from the new runtime.",
              "",
              "Either calling `Core_version` or decoding `RuntimeVersion` failed."
            ]
          },
          {
            "Name": "NonDefaultComposite",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Suicide called when the account has non-default composite data."
            ]
          },
          {
            "Name": "NonZeroRefCount",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There is a non-zero reference count preventing the account from being purged."
            ]
          },
          {
            "Name": "CallFiltered",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The origin filter prevent the call to be dispatched."
            ]
          },
          {
            "Name": "MultiBlockMigrationsOngoing",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A multi-block migration is ongoing and prevents the current code from being replaced."
            ]
          },
          {
            "Name": "NothingAuthorized",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No upgrade authorized."
            ]
          },
          {
            "Name": "Unauthorized",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The submitted code is not authorized."
            ]
          }
        ],
        "Path": [
          "frame_system",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the System pallet"
        ]
      },
      "124": {
        "Variants": [
          {
            "Name": "set",
            "TypeFields": [
              {
                "Name": "now",
                "TypeName": "T::Moment",
                "TypeId": 11
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the current time.",
              "",
              "This call should be invoked exactly once per block. It will panic at the finalization",
              "phase, if this call hasn't been invoked by that time.",
              "",
              "The timestamp should be greater than the previous one by the amount specified by",
              "[`Config::MinimumPeriod`].",
              "",
              "The dispatch origin for this call must be _None_.",
              "",
              "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
              "that changing the complexity of this call could result exhausting the resources in a",
              "block to execute any other calls.",
              "",
              "## Complexity",
              "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
              "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
              "  `on_finalize`)",
              "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
            ]
          }
        ],
        "Path": [
          "pallet_timestamp",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "125": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 127
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 126
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "126": {
        "TypeFields": [
          {
            "TypeName": "sr25519::Public",
            "TypeId": 1
          }
        ],
        "Path": [
          "sp_consensus_aura",
          "sr25519",
          "app_sr25519",
          "Public"
        ],
        "TypeDef": "Composite"
      },
      "127": {
        "TypeId": 126,
        "TypeDef": "Sequence"
      },
      "128": {
        "TypeFields": [
          {
            "TypeName": "u64",
            "TypeId": 12
          }
        ],
        "Path": [
          "sp_consensus_slots",
          "Slot"
        ],
        "TypeDef": "Composite"
      },
      "129": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "PendingPause",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Paused",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "PendingResume",
            "TypeFields": [
              {
                "Name": "scheduled_at",
                "TypeName": "N",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "N",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredState"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "130": {
        "TypeFields": [
          {
            "Name": "scheduled_at",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "delay",
            "TypeName": "N",
            "TypeId": 4
          },
          {
            "Name": "next_authorities",
            "TypeName": "BoundedAuthorityList<Limit>",
            "TypeId": 131
          },
          {
            "Name": "forced",
            "TypeName": "Option<N>",
            "TypeId": 88
          }
        ],
        "Path": [
          "pallet_grandpa",
          "StoredPendingChange"
        ],
        "TypeParams": [
          {
            "Name": "N",
            "TypeId": 4
          },
          {
            "Name": "Limit"
          }
        ],
        "TypeDef": "Composite"
      },
      "131": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 32
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 33
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "132": {
        "Variants": [
          {
            "Name": "report_equivocation",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                "TypeId": 133
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 143
              }
            ],
            "Index": 0,
            "Docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported."
            ]
          },
          {
            "Name": "report_equivocation_unsigned",
            "TypeFields": [
              {
                "Name": "equivocation_proof",
                "TypeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                "TypeId": 133
              },
              {
                "Name": "key_owner_proof",
                "TypeName": "T::KeyOwnerProof",
                "TypeId": 143
              }
            ],
            "Index": 1,
            "Docs": [
              "Report voter equivocation/misbehavior. This method will verify the",
              "equivocation proof and validate the given key ownership proof",
              "against the extracted offender. If both are valid, the offence",
              "will be reported.",
              "",
              "This extrinsic must be called unsigned and it is expected that only",
              "block authors will call it (validated in `ValidateUnsigned`), as such",
              "if the block author is defined it will be defined as the equivocation",
              "reporter."
            ]
          },
          {
            "Name": "note_stalled",
            "TypeFields": [
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "best_finalized_block_number",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Note that the current authority set of the GRANDPA finality gadget has stalled.",
              "",
              "This will trigger a forced authority set change at the beginning of the next session, to",
              "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
              "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
              "The block production rate (which may be slowed down because of finality lagging) should",
              "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
              "authority will start voting on top of `best_finalized_block_number` for new finalized",
              "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
              "block of all validators of the new authority set.",
              "",
              "Only callable by root."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "133": {
        "TypeFields": [
          {
            "Name": "set_id",
            "TypeName": "SetId",
            "TypeId": 12
          },
          {
            "Name": "equivocation",
            "TypeName": "Equivocation<H, N>",
            "TypeId": 134
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "EquivocationProof"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "134": {
        "Variants": [
          {
            "Name": "Prevote",
            "TypeFields": [
              {
                "TypeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Prevote<\nH, N>, AuthoritySignature,>",
                "TypeId": 135
              }
            ],
            "Index": 0
          },
          {
            "Name": "Precommit",
            "TypeFields": [
              {
                "TypeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Precommit\n<H, N>, AuthoritySignature,>",
                "TypeId": 140
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "135": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 34
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 139
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 139
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 34
          },
          {
            "Name": "V",
            "TypeId": 136
          },
          {
            "Name": "S",
            "TypeId": 137
          }
        ],
        "TypeDef": "Composite"
      },
      "136": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 13
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Prevote"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "137": {
        "TypeFields": [
          {
            "TypeName": "ed25519::Signature",
            "TypeId": 138
          }
        ],
        "Path": [
          "sp_consensus_grandpa",
          "app",
          "Signature"
        ],
        "TypeDef": "Composite"
      },
      "138": {
        "Length": 64,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "139": {
        "TypeIds": [
          136,
          137
        ],
        "TypeDef": "Tuple"
      },
      "140": {
        "TypeFields": [
          {
            "Name": "round_number",
            "TypeName": "u64",
            "TypeId": 12
          },
          {
            "Name": "identity",
            "TypeName": "Id",
            "TypeId": 34
          },
          {
            "Name": "first",
            "TypeName": "(V, S)",
            "TypeId": 142
          },
          {
            "Name": "second",
            "TypeName": "(V, S)",
            "TypeId": 142
          }
        ],
        "Path": [
          "finality_grandpa",
          "Equivocation"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 34
          },
          {
            "Name": "V",
            "TypeId": 141
          },
          {
            "Name": "S",
            "TypeId": 137
          }
        ],
        "TypeDef": "Composite"
      },
      "141": {
        "TypeFields": [
          {
            "Name": "target_hash",
            "TypeName": "H",
            "TypeId": 13
          },
          {
            "Name": "target_number",
            "TypeName": "N",
            "TypeId": 4
          }
        ],
        "Path": [
          "finality_grandpa",
          "Precommit"
        ],
        "TypeParams": [
          {
            "Name": "H",
            "TypeId": 13
          },
          {
            "Name": "N",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "142": {
        "TypeIds": [
          141,
          137
        ],
        "TypeDef": "Tuple"
      },
      "143": {
        "Variants": null,
        "Path": [
          "sp_core",
          "Void"
        ],
        "TypeDef": "Variant"
      },
      "144": {
        "Variants": [
          {
            "Name": "PauseFailed",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Attempt to signal GRANDPA pause when the authority set isn't live",
              "(either paused or already pending pause)."
            ]
          },
          {
            "Name": "ResumeFailed",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Attempt to signal GRANDPA resume when the authority set isn't paused",
              "(either live or already pending resume)."
            ]
          },
          {
            "Name": "ChangePending",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Attempt to signal GRANDPA change with one already pending."
            ]
          },
          {
            "Name": "TooSoon",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Cannot signal forced change so soon after last."
            ]
          },
          {
            "Name": "InvalidKeyOwnershipProof",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A key ownership proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "InvalidEquivocationProof",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "An equivocation proof provided as part of an equivocation report is invalid."
            ]
          },
          {
            "Name": "DuplicateOffenceReport",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "A given equivocation report is valid but already previously reported."
            ]
          }
        ],
        "Path": [
          "pallet_grandpa",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "145": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 148
          }
        ],
        "Path": [
          "bounded_collections",
          "weak_bounded_vec",
          "WeakBoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 146
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "146": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "LockIdentifier",
            "TypeId": 100
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "reasons",
            "TypeName": "Reasons",
            "TypeId": 147
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "BalanceLock"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "147": {
        "Variants": [
          {
            "Name": "Fee",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Misc",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "All",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "Reasons"
        ],
        "TypeDef": "Variant"
      },
      "148": {
        "TypeId": 146,
        "TypeDef": "Sequence"
      },
      "149": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 151
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 150
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "150": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "ReserveIdentifier",
            "TypeId": 100
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "ReserveData"
        ],
        "TypeParams": [
          {
            "Name": "ReserveIdentifier",
            "TypeId": 100
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "151": {
        "TypeId": 150,
        "TypeDef": "Sequence"
      },
      "152": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 154
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 153
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "153": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "Id",
            "TypeId": 44
          },
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "misc",
          "IdAmount"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 44
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "154": {
        "TypeId": 153,
        "TypeDef": "Sequence"
      },
      "155": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 154
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 153
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "156": {
        "Variants": [
          {
            "Name": "transfer_allow_death",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 0,
            "Docs": [
              "Transfer some liquid free balance to another account.",
              "",
              "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
              "If the sender's account is below the existential deposit as a result",
              "of the transfer, the account will be reaped.",
              "",
              "The dispatch origin for this call must be `Signed` by the transactor."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 2,
            "Docs": [
              "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
              "may be specified."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 3,
            "Docs": [
              "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
              "kill the origin account.",
              "",
              "99% of the time you want [`transfer_allow_death`] instead.",
              "",
              "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 4,
            "Docs": [
              "Transfer the entire transferable balance from the caller account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the account has, causing the sender account to be killed (false), or",
              "  transfer everything except at least the existential deposit, which will guarantee to",
              "  keep the sender account alive (true)."
            ]
          },
          {
            "Name": "force_unreserve",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 5,
            "Docs": [
              "Unreserve some balance from a user by force.",
              "",
              "Can only be called by ROOT."
            ]
          },
          {
            "Name": "upgrade_accounts",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 160
              }
            ],
            "Index": 6,
            "Docs": [
              "Upgrade a specified account.",
              "",
              "- `origin`: Must be `Signed`.",
              "- `who`: The account to be upgraded.",
              "",
              "This will waive the transaction fee if at least all but 10% of the accounts needed to",
              "be upgraded. (We let some not have to be upgraded just in order to allow for the",
              "possibility of churn)."
            ]
          },
          {
            "Name": "force_set_balance",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "new_free",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the regular balance of a given account.",
              "",
              "The dispatch origin for this call is `root`."
            ]
          },
          {
            "Name": "force_adjust_total_issuance",
            "TypeFields": [
              {
                "Name": "direction",
                "TypeName": "AdjustmentDirection",
                "TypeId": 161
              },
              {
                "Name": "delta",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 9,
            "Docs": [
              "Adjust the total issuance in a saturating way.",
              "",
              "Can only be called by root and always needs a positive `delta`.",
              "",
              "# Example"
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "value",
                "TypeName": "T::Balance",
                "TypeId": 41
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 10,
            "Docs": [
              "Burn the specified liquid free balance from the origin account.",
              "",
              "If the origin's account ends up below the existential deposit as a result",
              "of the burn and `keep_alive` is false, the account will be reaped.",
              "",
              "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
              "this `burn` operation will reduce total issuance by the amount _burned_."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "157": {
        "Variants": [
          {
            "Name": "Id",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 0
          },
          {
            "Name": "Index",
            "TypeFields": [
              {
                "TypeName": "AccountIndex",
                "TypeId": 158
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw",
            "TypeFields": [
              {
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 2
          },
          {
            "Name": "Address32",
            "TypeFields": [
              {
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3
          },
          {
            "Name": "Address20",
            "TypeFields": [
              {
                "TypeName": "[u8; 20]",
                "TypeId": 159
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "sp_runtime",
          "multiaddress",
          "MultiAddress"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "AccountIndex",
            "TypeId": 44
          }
        ],
        "TypeDef": "Variant"
      },
      "158": {
        "TypeId": 44,
        "TypeDef": "Compact"
      },
      "159": {
        "Length": 20,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "160": {
        "TypeId": 0,
        "TypeDef": "Sequence"
      },
      "161": {
        "Variants": [
          {
            "Name": "Increase",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Decrease",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_balances",
          "types",
          "AdjustmentDirection"
        ],
        "TypeDef": "Variant"
      },
      "162": {
        "Variants": [
          {
            "Name": "VestingBalance",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting balance too high to send value."
            ]
          },
          {
            "Name": "LiquidityRestrictions",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account liquidity restrictions prevent withdrawal."
            ]
          },
          {
            "Name": "InsufficientBalance",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Balance too low to send value."
            ]
          },
          {
            "Name": "ExistentialDeposit",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Value too low to create account due to existential deposit."
            ]
          },
          {
            "Name": "Expendability",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Transfer/payment would kill account."
            ]
          },
          {
            "Name": "ExistingVestingSchedule",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "A vesting schedule already exists for this account."
            ]
          },
          {
            "Name": "DeadAccount",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Beneficiary account must pre-exist."
            ]
          },
          {
            "Name": "TooManyReserves",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Number of named reserves exceed `MaxReserves`."
            ]
          },
          {
            "Name": "TooManyHolds",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
            ]
          },
          {
            "Name": "TooManyFreezes",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Number of freezes exceed `MaxFreezes`."
            ]
          },
          {
            "Name": "IssuanceDeactivated",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The issuance cannot be modified since it is already deactivated."
            ]
          },
          {
            "Name": "DeltaZero",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The delta cannot be zero."
            ]
          }
        ],
        "Path": [
          "pallet_balances",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "163": {
        "TypeFields": [
          {
            "TypeName": "u128",
            "TypeId": 6
          }
        ],
        "Path": [
          "sp_arithmetic",
          "fixed_point",
          "FixedU128"
        ],
        "TypeDef": "Composite"
      },
      "164": {
        "Variants": [
          {
            "Name": "V1Ancient",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "V2",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "Releases"
        ],
        "TypeDef": "Variant"
      },
      "165": {
        "TypeFields": [
          {
            "Name": "owner",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "issuer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "admin",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "freezer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "supply",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "min_balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "is_sufficient",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "accounts",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "sufficients",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "approvals",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "AssetStatus",
            "TypeId": 166
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetDetails"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "166": {
        "Variants": [
          {
            "Name": "Live",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Destroying",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetStatus"
        ],
        "TypeDef": "Variant"
      },
      "167": {
        "TypeIds": [
          4,
          0
        ],
        "TypeDef": "Tuple"
      },
      "168": {
        "TypeFields": [
          {
            "Name": "balance",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "status",
            "TypeName": "AccountStatus",
            "TypeId": 169
          },
          {
            "Name": "reason",
            "TypeName": "ExistenceReason<DepositBalance, AccountId>",
            "TypeId": 170
          },
          {
            "Name": "extra",
            "TypeName": "Extra",
            "TypeId": 44
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetAccount"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "Extra",
            "TypeId": 44
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "169": {
        "Variants": [
          {
            "Name": "Liquid",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AccountStatus"
        ],
        "TypeDef": "Variant"
      },
      "170": {
        "Variants": [
          {
            "Name": "Consumer",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Sufficient",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "DepositHeld",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          },
          {
            "Name": "DepositRefunded",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "DepositFrom",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "ExistenceReason"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "171": {
        "TypeIds": [
          4,
          0,
          0
        ],
        "TypeDef": "Tuple"
      },
      "172": {
        "TypeFields": [
          {
            "Name": "amount",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "Approval"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "DepositBalance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "173": {
        "TypeFields": [
          {
            "Name": "deposit",
            "TypeName": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "name",
            "TypeName": "BoundedString",
            "TypeId": 174
          },
          {
            "Name": "symbol",
            "TypeName": "BoundedString",
            "TypeId": 174
          },
          {
            "Name": "decimals",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "is_frozen",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_assets",
          "types",
          "AssetMetadata"
        ],
        "TypeParams": [
          {
            "Name": "DepositBalance",
            "TypeId": 6
          },
          {
            "Name": "BoundedString",
            "TypeId": 174
          }
        ],
        "TypeDef": "Composite"
      },
      "174": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "175": {
        "Variants": [
          {
            "Name": "create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 0,
            "Docs": [
              "Issue a new class of fungible assets from a public origin.",
              "",
              "This new asset class has no assets initially and its owner is the origin.",
              "",
              "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
              "",
              "Funds of sender are reserved by `AssetDeposit`.",
              "",
              "Parameters:",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
              "- `admin`: The admin of this class of assets. The admin is the initial address of each",
              "member of the asset class's admin team.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `Created` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_create",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 1,
            "Docs": [
              "Issue a new class of fungible assets from a privileged origin.",
              "",
              "This new asset class has no assets initially.",
              "",
              "The origin must conform to `ForceOrigin`.",
              "",
              "Unlike `create`, no funds are reserved.",
              "",
              "- `id`: The identifier of the new asset. This must not be currently in use to identify",
              "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
              "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
              "over this asset, but may later change and configure the permissions using",
              "`transfer_ownership` and `set_team`.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "",
              "Emits `ForceCreated` event when successful.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "start_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              }
            ],
            "Index": 2,
            "Docs": [
              "Start the process of destroying a fungible asset class.",
              "",
              "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
              "destruction of an asset class.",
              "",
              "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset."
            ]
          },
          {
            "Name": "destroy_accounts",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              }
            ],
            "Index": 3,
            "Docs": [
              "Destroy all accounts associated with a given asset.",
              "",
              "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedAccounts` event."
            ]
          },
          {
            "Name": "destroy_approvals",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              }
            ],
            "Index": 4,
            "Docs": [
              "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
              "",
              "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state.",
              "",
              "Due to weight restrictions, this function may need to be called multiple times to fully",
              "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each call emits the `Event::DestroyedApprovals` event."
            ]
          },
          {
            "Name": "finish_destroy",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              }
            ],
            "Index": 5,
            "Docs": [
              "Complete destroying asset and unreserve currency.",
              "",
              "`finish_destroy` should only be called after `start_destroy` has been called, and the",
              "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
              "hand.",
              "",
              "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
              "  asset.",
              "",
              "Each successful call emits the `Event::Destroyed` event."
            ]
          },
          {
            "Name": "mint",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 6,
            "Docs": [
              "Mint assets of a particular class.",
              "",
              "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount minted.",
              "- `beneficiary`: The account to be credited with the minted assets.",
              "- `amount`: The amount of the asset to be minted.",
              "",
              "Emits `Issued` event when successful.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
            ]
          },
          {
            "Name": "burn",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 7,
            "Docs": [
              "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
              "",
              "Origin must be Signed and the sender should be the Manager of the asset `id`.",
              "",
              "Bails with `NoAccount` if the `who` is already dead.",
              "",
              "- `id`: The identifier of the asset to have some amount burned.",
              "- `who`: The account to be debited from.",
              "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
              "",
              "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
              "minimum for the asset, then the amount burned is increased to take it to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
            ]
          },
          {
            "Name": "transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 8,
            "Docs": [
              "Move some assets from the sender account to another.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ]
          },
          {
            "Name": "transfer_keep_alive",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 9,
            "Docs": [
              "Move some assets from the sender account to another, keeping the sender account alive.",
              "",
              "Origin must be Signed.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `target`: The account to be credited.",
              "- `amount`: The amount by which the sender's balance of assets should be reduced and",
              "`target`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the sender balance above zero but below",
              "the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
              "`target`."
            ]
          },
          {
            "Name": "force_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "source",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 10,
            "Docs": [
              "Move some assets from one account to another.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to have some amount transferred.",
              "- `source`: The account to be debited.",
              "- `dest`: The account to be credited.",
              "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
              "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
              "the case that the transfer would otherwise take the `source` balance above zero but",
              "below the minimum balance. Must be greater than zero.",
              "",
              "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
              "to below the minimum for the asset, then the amount transferred is increased to take it",
              "to zero.",
              "",
              "Weight: `O(1)`",
              "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
              "`dest`."
            ]
          },
          {
            "Name": "freeze",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 11,
            "Docs": [
              "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
              "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
              "account that does not have an entry, use `touch_other` first.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "thaw",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 12,
            "Docs": [
              "Allow unprivileged transfers to and from an account again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `who`: The account to be unfrozen.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "freeze_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              }
            ],
            "Index": 13,
            "Docs": [
              "Disallow further unprivileged transfers for the asset class.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "",
              "Emits `Frozen`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "thaw_asset",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              }
            ],
            "Index": 14,
            "Docs": [
              "Allow unprivileged transfers for the asset again.",
              "",
              "Origin must be Signed and the sender should be the Admin of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be thawed.",
              "",
              "Emits `Thawed`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_ownership",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 15,
            "Docs": [
              "Change the Owner of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "",
              "Emits `OwnerChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_team",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 16,
            "Docs": [
              "Change the Issuer, Admin and Freezer of an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "- `id`: The identifier of the asset to be frozen.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "",
              "Emits `TeamChanged`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 17,
            "Docs": [
              "Set the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Funds of sender are reserved according to the formula:",
              "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
              "account any already reserved funds.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              }
            ],
            "Index": 18,
            "Docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be Signed and the sender should be the Owner of the asset `id`.",
              "",
              "Any deposit is freed for the asset owner.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_set_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "name",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "symbol",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "decimals",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 19,
            "Docs": [
              "Force the metadata for an asset to some value.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is left alone.",
              "",
              "- `id`: The identifier of the asset to update.",
              "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
              "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
              "- `decimals`: The number of decimals this asset uses to represent one unit.",
              "",
              "Emits `MetadataSet`.",
              "",
              "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
            ]
          },
          {
            "Name": "force_clear_metadata",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              }
            ],
            "Index": 20,
            "Docs": [
              "Clear the metadata for an asset.",
              "",
              "Origin must be ForceOrigin.",
              "",
              "Any deposit is returned.",
              "",
              "- `id`: The identifier of the asset to clear.",
              "",
              "Emits `MetadataCleared`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_asset_status",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "issuer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "admin",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "freezer",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 41
              },
              {
                "Name": "is_sufficient",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "is_frozen",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 21,
            "Docs": [
              "Alter the attributes of a given asset.",
              "",
              "Origin must be `ForceOrigin`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The new Owner of this asset.",
              "- `issuer`: The new Issuer of this asset.",
              "- `admin`: The new Admin of this asset.",
              "- `freezer`: The new Freezer of this asset.",
              "- `min_balance`: The minimum balance of this new asset that any single account must",
              "have. If an account's balance is reduced below this, then it collapses to zero.",
              "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
              "value to account for the state bloat associated with its balance storage. If set to",
              "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
              "an ED in the Balances pallet or whatever else is used to control user-account state",
              "growth).",
              "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
              "instructions.",
              "",
              "Emits `AssetStatusChanged` with the identity of the asset.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "approve_transfer",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 22,
            "Docs": [
              "Approve an amount of asset for transfer by a delegated third-party account.",
              "",
              "Origin must be Signed.",
              "",
              "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
              "for the purpose of holding the approval. If some non-zero amount of assets is already",
              "approved from signing account to `delegate`, then it is topped up or unreserved to",
              "meet the right value.",
              "",
              "NOTE: The signing account does not need to own `amount` of assets at the point of",
              "making this call.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account to delegate permission to transfer asset.",
              "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
              "already an approval in place, then this acts additively.",
              "",
              "Emits `ApprovedTransfer` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 23,
            "Docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be Signed and there must be an approval in place between signer and",
              "`delegate`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "force_cancel_approval",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 24,
            "Docs": [
              "Cancel all of some asset approved for delegated transfer by a third-party account.",
              "",
              "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
              "account of the asset `id`.",
              "",
              "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
              "",
              "- `id`: The identifier of the asset.",
              "- `delegate`: The account delegated permission to transfer asset.",
              "",
              "Emits `ApprovalCancelled` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_approved",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "owner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "destination",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "amount",
                "TypeName": "T::Balance",
                "TypeId": 41
              }
            ],
            "Index": 25,
            "Docs": [
              "Transfer some asset balance from a previously delegated account to some third-party",
              "account.",
              "",
              "Origin must be Signed and there must be an approval in place by the `owner` to the",
              "signer.",
              "",
              "If the entire amount approved for transfer is transferred, then any deposit previously",
              "reserved by `approve_transfer` is unreserved.",
              "",
              "- `id`: The identifier of the asset.",
              "- `owner`: The account which previously approved for a transfer of at least `amount` and",
              "from which the asset balance will be withdrawn.",
              "- `destination`: The account to which the asset balance of `amount` will be transferred.",
              "- `amount`: The amount of assets to transfer.",
              "",
              "Emits `TransferredApproved` on success.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "touch",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              }
            ],
            "Index": 26,
            "Docs": [
              "Create an asset account for non-provider assets.",
              "",
              "A deposit will be taken from the signer account.",
              "",
              "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
              "  to be taken.",
              "- `id`: The identifier of the asset for the account to be created.",
              "",
              "Emits `Touched` event when successful."
            ]
          },
          {
            "Name": "refund",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "allow_burn",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 27,
            "Docs": [
              "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
              "account.",
              "",
              "The origin must be Signed.",
              "",
              "- `id`: The identifier of the asset for which the caller would like the deposit",
              "  refunded.",
              "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
              "",
              "Emits `Refunded` event when successful."
            ]
          },
          {
            "Name": "set_min_balance",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "min_balance",
                "TypeName": "T::Balance",
                "TypeId": 6
              }
            ],
            "Index": 28,
            "Docs": [
              "Sets the minimum balance of an asset.",
              "",
              "Only works if there aren't any accounts that are holding the asset or if",
              "the new value of `min_balance` is less than the old one.",
              "",
              "Origin must be Signed and the sender has to be the Owner of the",
              "asset `id`.",
              "",
              "- `id`: The identifier of the asset.",
              "- `min_balance`: The new value of `min_balance`.",
              "",
              "Emits `AssetMinBalanceChanged` event when successful."
            ]
          },
          {
            "Name": "touch_other",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 29,
            "Docs": [
              "Create an asset account for `who`.",
              "",
              "A deposit will be taken from the signer account.",
              "",
              "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
              "  must have sufficient funds for a deposit to be taken.",
              "- `id`: The identifier of the asset for the account to be created.",
              "- `who`: The account to be created.",
              "",
              "Emits `Touched` event when successful."
            ]
          },
          {
            "Name": "refund_other",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 30,
            "Docs": [
              "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
              "",
              "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
              "order to burn a non-zero balance of the asset, the caller must be the account and should",
              "use `refund`.",
              "",
              "- `id`: The identifier of the asset for the account holding a deposit.",
              "- `who`: The account to refund.",
              "",
              "Emits `Refunded` event when successful."
            ]
          },
          {
            "Name": "block",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 31,
            "Docs": [
              "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
              "",
              "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
              "",
              "- `id`: The identifier of the account's asset.",
              "- `who`: The account to be unblocked.",
              "",
              "Emits `Blocked`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "transfer_all",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "T::AssetIdParameter",
                "TypeId": 105
              },
              {
                "Name": "dest",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "keep_alive",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 32,
            "Docs": [
              "Transfer the entire transferable balance from the caller asset account.",
              "",
              "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
              "any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be",
              "transferred by this function. To ensure that this function results in a killed account,",
              "you might need to prepare the account by removing any reference counters, storage",
              "deposits, etc...",
              "",
              "The dispatch origin of this call must be Signed.",
              "",
              "- `id`: The identifier of the asset for the account holding a deposit.",
              "- `dest`: The recipient of the transfer.",
              "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
              "  of the funds the asset account has, causing the sender asset account to be killed",
              "  (false), or transfer everything except at least the minimum balance, which will",
              "  guarantee to keep the sender asset account alive (true)."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "176": {
        "Variants": [
          {
            "Name": "BalanceLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account balance must be greater than or equal to the transfer amount."
            ]
          },
          {
            "Name": "NoAccount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account to alter does not exist."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The signing account has no permission to do the operation."
            ]
          },
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The given asset ID is unknown."
            ]
          },
          {
            "Name": "Frozen",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The origin account is frozen."
            ]
          },
          {
            "Name": "InUse",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The asset ID is already taken."
            ]
          },
          {
            "Name": "BadWitness",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid witness data given."
            ]
          },
          {
            "Name": "MinBalanceZero",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Minimum balance should be non-zero."
            ]
          },
          {
            "Name": "UnavailableConsumer",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Unable to increment the consumer reference counters on the account. Either no provider",
              "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
              "fewer then the maximum number of consumers has been reached."
            ]
          },
          {
            "Name": "BadMetadata",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Invalid metadata given."
            ]
          },
          {
            "Name": "Unapproved",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No approval exists that would allow the transfer."
            ]
          },
          {
            "Name": "WouldDie",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The source account would not survive the transfer and it needs to stay alive."
            ]
          },
          {
            "Name": "AlreadyExists",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The asset-account already exists."
            ]
          },
          {
            "Name": "NoDeposit",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The asset-account doesn't have an associated deposit."
            ]
          },
          {
            "Name": "WouldBurn",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The operation would result in funds being burned."
            ]
          },
          {
            "Name": "LiveAsset",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset is a live asset and is actively being used. Usually emit for operations such",
              "as `start_destroy` which require the asset to be in a destroying state."
            ]
          },
          {
            "Name": "AssetNotLive",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The asset is not live, and likely being destroyed."
            ]
          },
          {
            "Name": "IncorrectStatus",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The asset status is not the expected status."
            ]
          },
          {
            "Name": "NotFrozen",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The asset should be frozen before the given operation."
            ]
          },
          {
            "Name": "CallbackFailed",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Callback action resulted in error"
            ]
          },
          {
            "Name": "BadAssetId",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The asset ID must be equal to the [`NextAssetId`]."
            ]
          }
        ],
        "Path": [
          "pallet_assets",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "177": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 178
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 40
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "178": {
        "TypeId": 40,
        "TypeDef": "Sequence"
      },
      "179": {
        "Variants": [
          {
            "Name": "claim",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "vested_transfer",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 157
              },
              {
                "Name": "schedule",
                "TypeName": "VestingScheduleOf<T>",
                "TypeId": 40
              }
            ],
            "Index": 1
          },
          {
            "Name": "update_vesting_schedules",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 157
              },
              {
                "Name": "vesting_schedules",
                "TypeName": "Vec<VestingScheduleOf<T>>",
                "TypeId": 178
              }
            ],
            "Index": 2
          },
          {
            "Name": "claim_for",
            "TypeFields": [
              {
                "Name": "dest",
                "TypeName": "<T::Lookup as StaticLookup>::Source",
                "TypeId": 157
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "180": {
        "Variants": [
          {
            "Name": "ZeroVestingPeriod",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Vesting period is zero"
            ]
          },
          {
            "Name": "ZeroVestingPeriodCount",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Number of vests is zero"
            ]
          },
          {
            "Name": "InsufficientBalanceToLock",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Insufficient amount of balance to lock"
            ]
          },
          {
            "Name": "TooManyVestingSchedules",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "This account have too many vesting schedules"
            ]
          },
          {
            "Name": "AmountLow",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The vested transfer amount is too low"
            ]
          },
          {
            "Name": "MaxVestingSchedulesExceeded",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Failed because the maximum vesting schedules was exceeded"
            ]
          }
        ],
        "Path": [
          "orml_vesting",
          "module",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "181": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 102
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "182": {
        "Variants": [
          {
            "Name": "System",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                "TypeId": 108
              }
            ],
            "Index": 0
          },
          {
            "Name": "Timestamp",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                "TypeId": 124
              }
            ],
            "Index": 1
          },
          {
            "Name": "Grandpa",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                "TypeId": 132
              }
            ],
            "Index": 3
          },
          {
            "Name": "Balances",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                "TypeId": 156
              }
            ],
            "Index": 4
          },
          {
            "Name": "Assets",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                "TypeId": 175
              }
            ],
            "Index": 7
          },
          {
            "Name": "Vesting",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                "TypeId": 179
              }
            ],
            "Index": 8
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                "TypeId": 183
              }
            ],
            "Index": 9
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                "TypeId": 184
              }
            ],
            "Index": 10
          },
          {
            "Name": "Treasury",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                "TypeId": 185
              }
            ],
            "Index": 11
          },
          {
            "Name": "Democracy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                "TypeId": 186
              }
            ],
            "Index": 12
          },
          {
            "Name": "Sudo",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                "TypeId": 192
              }
            ],
            "Index": 13
          },
          {
            "Name": "Scheduler",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                "TypeId": 193
              }
            ],
            "Index": 14
          },
          {
            "Name": "Identity",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                "TypeId": 195
              }
            ],
            "Index": 15
          },
          {
            "Name": "Proxy",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                "TypeId": 236
              }
            ],
            "Index": 16
          },
          {
            "Name": "Multisig",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                "TypeId": 238
              }
            ],
            "Index": 17
          },
          {
            "Name": "Utility",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                "TypeId": 240
              }
            ],
            "Index": 18
          },
          {
            "Name": "Preimage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                "TypeId": 246
              }
            ],
            "Index": 19
          },
          {
            "Name": "Migrations",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Migrations, Runtime>",
                "TypeId": 247
              }
            ],
            "Index": 20
          },
          {
            "Name": "CasinoJamAffiliates",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CasinoJamAffiliates, Runtime>",
                "TypeId": 256
              }
            ],
            "Index": 32
          },
          {
            "Name": "CasinoJamTournament",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CasinoJamTournament, Runtime>",
                "TypeId": 258
              }
            ],
            "Index": 33
          },
          {
            "Name": "CasinoJamSeasons",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CasinoJamSeasons, Runtime>",
                "TypeId": 265
              }
            ],
            "Index": 34
          },
          {
            "Name": "CasinoJamSage",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CasinoJamSage, Runtime>",
                "TypeId": 266
              }
            ],
            "Index": 40
          }
        ],
        "Path": [
          "ajuna_solo_runtime",
          "RuntimeCall"
        ],
        "TypeDef": "Variant"
      },
      "183": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 160
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 53
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 182
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 105
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 105
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 182
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 105
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 105
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 105
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 105
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "184": {
        "Variants": [
          {
            "Name": "set_members",
            "TypeFields": [
              {
                "Name": "new_members",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 160
              },
              {
                "Name": "prime",
                "TypeName": "Option<T::AccountId>",
                "TypeId": 53
              },
              {
                "Name": "old_count",
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0,
            "Docs": [
              "Set the collective's membership.",
              "",
              "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
              "- `prime`: The prime member whose vote sets the default.",
              "- `old_count`: The upper bound for the previous number of members in storage. Used for",
              "  weight estimation.",
              "",
              "The dispatch of this call must be `SetMembersOrigin`.",
              "",
              "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
              "      the weight estimations rely on it to estimate dispatchable weight.",
              "",
              "# WARNING:",
              "",
              "The `pallet-collective` can also be managed by logic outside of the pallet through the",
              "implementation of the trait [`ChangeMembers`].",
              "Any call to `set_members` must be careful that the member set doesn't get out of sync",
              "with other logic managing the member set.",
              "",
              "## Complexity:",
              "- `O(MP + N)` where:",
              "  - `M` old-members-count (code- and governance-bounded)",
              "  - `N` new-members-count (code- and governance-bounded)",
              "  - `P` proposals-count (code-bounded)"
            ]
          },
          {
            "Name": "execute",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 182
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 105
              }
            ],
            "Index": 1,
            "Docs": [
              "Dispatch a proposal from a member using the `Member` origin.",
              "",
              "Origin must be a member of the collective.",
              "",
              "## Complexity:",
              "- `O(B + M + P)` where:",
              "- `B` is `proposal` size in bytes (length-fee-bounded)",
              "- `M` members-count (code-bounded)",
              "- `P` complexity of dispatching `proposal`"
            ]
          },
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "MemberCount",
                "TypeId": 105
              },
              {
                "Name": "proposal",
                "TypeName": "Box<<T as Config<I>>::Proposal>",
                "TypeId": 182
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 105
              }
            ],
            "Index": 2,
            "Docs": [
              "Add a new proposal to either be voted on or executed directly.",
              "",
              "Requires the sender to be member.",
              "",
              "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
              "or put up for voting.",
              "",
              "## Complexity",
              "- `O(B + M + P1)` or `O(B + M + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - branching is influenced by `threshold` where:",
              "    - `P1` is proposal execution complexity (`threshold < 2`)",
              "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 105
              },
              {
                "Name": "approve",
                "TypeName": "bool",
                "TypeId": 8
              }
            ],
            "Index": 3,
            "Docs": [
              "Add an aye or nay vote for the sender to the given proposal.",
              "",
              "Requires the sender to be a member.",
              "",
              "Transaction fees will be waived if the member is voting on any particular proposal",
              "for the first time and the call is successful. Subsequent vote changes will charge a",
              "fee.",
              "## Complexity",
              "- `O(M)` where `M` is members-count (code- and governance-bounded)"
            ]
          },
          {
            "Name": "disapprove_proposal",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 5,
            "Docs": [
              "Disapprove a proposal, close, and remove it from the system, regardless of its current",
              "state.",
              "",
              "Must be called by the Root origin.",
              "",
              "Parameters:",
              "* `proposal_hash`: The hash of the proposal that should be disapproved.",
              "",
              "## Complexity",
              "O(P) where P is the number of max proposals"
            ]
          },
          {
            "Name": "close",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "index",
                "TypeName": "ProposalIndex",
                "TypeId": 105
              },
              {
                "Name": "proposal_weight_bound",
                "TypeName": "Weight",
                "TypeId": 10
              },
              {
                "Name": "length_bound",
                "TypeName": "u32",
                "TypeId": 105
              }
            ],
            "Index": 6,
            "Docs": [
              "Close a vote that is either approved, disapproved or whose voting period has ended.",
              "",
              "May be called by any signed account in order to finish voting and close the proposal.",
              "",
              "If called before the end of the voting period it will only close the vote if it is",
              "has enough votes to be approved or disapproved.",
              "",
              "If called after the end of the voting period abstentions are counted as rejections",
              "unless there is a prime member set and the prime member cast an approval.",
              "",
              "If the close operation completes successfully with disapproval, the transaction fee will",
              "be waived. Otherwise execution of the approved operation will be charged to the caller.",
              "",
              "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
              "proposal.",
              "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
              "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
              "",
              "## Complexity",
              "- `O(B + M + P1 + P2)` where:",
              "  - `B` is `proposal` size in bytes (length-fee-bounded)",
              "  - `M` is members-count (code- and governance-bounded)",
              "  - `P1` is the complexity of `proposal` preimage.",
              "  - `P2` is proposal-count (code-bounded)"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "185": {
        "Variants": [
          {
            "Name": "spend_local",
            "TypeFields": [
              {
                "Name": "amount",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 41
              },
              {
                "Name": "beneficiary",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 3,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.",
              "",
              "### Details",
              "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
              "beneficiary.",
              "",
              "### Parameters",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The destination account for the transfer.",
              "",
              "## Events",
              "",
              "Emits [`Event::SpendApproved`] if successful."
            ]
          },
          {
            "Name": "remove_approval",
            "TypeFields": [
              {
                "Name": "proposal_id",
                "TypeName": "ProposalIndex",
                "TypeId": 105
              }
            ],
            "Index": 4,
            "Docs": [
              "Force a previously approved proposal to be removed from the approval queue.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::RejectOrigin`].",
              "",
              "## Details",
              "",
              "The original deposit will no longer be returned.",
              "",
              "### Parameters",
              "- `proposal_id`: The index of a proposal",
              "",
              "### Complexity",
              "- O(A) where `A` is the number of approvals",
              "",
              "### Errors",
              "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the",
              "  approval queue, i.e., the proposal has not been approved. This could also mean the",
              "  proposal does not exist altogether, thus there is no way it would have been approved",
              "  in the first place."
            ]
          },
          {
            "Name": "spend",
            "TypeFields": [
              {
                "Name": "asset_kind",
                "TypeName": "Box<T::AssetKind>",
                "TypeId": 44
              },
              {
                "Name": "amount",
                "TypeName": "AssetBalanceOf<T, I>",
                "TypeId": 41
              },
              {
                "Name": "beneficiary",
                "TypeName": "Box<BeneficiaryLookupOf<T, I>>",
                "TypeId": 0
              },
              {
                "Name": "valid_from",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 88
              }
            ],
            "Index": 5,
            "Docs": [
              "Propose and approve a spend of treasury funds.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::SpendOrigin`] with the `Success` value being at least",
              "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted",
              "for assertion using the [`Config::BalanceConverter`].",
              "",
              "## Details",
              "",
              "Create an approved spend for transferring a specific `amount` of `asset_kind` to a",
              "designated beneficiary. The spend must be claimed using the `payout` dispatchable within",
              "the [`Config::PayoutPeriod`].",
              "",
              "### Parameters",
              "- `asset_kind`: An indicator of the specific asset class to be spent.",
              "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
              "- `beneficiary`: The beneficiary of the spend.",
              "- `valid_from`: The block number from which the spend can be claimed. It can refer to",
              "  the past if the resulting spend has not yet expired according to the",
              "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after",
              "  approval.",
              "",
              "## Events",
              "",
              "Emits [`Event::AssetSpendApproved`] if successful."
            ]
          },
          {
            "Name": "payout",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Claim a spend.",
              "",
              "## Dispatch Origin",
              "",
              "Must be signed",
              "",
              "## Details",
              "",
              "Spends must be claimed within some temporal bounds. A spend may be claimed within one",
              "[`Config::PayoutPeriod`] from the `valid_from` block.",
              "In case of a payout failure, the spend status must be updated with the `check_status`",
              "dispatchable before retrying with the current function.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::Paid`] if successful."
            ]
          },
          {
            "Name": "check_status",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Check the status of the spend and remove it from the storage if processed.",
              "",
              "## Dispatch Origin",
              "",
              "Must be signed.",
              "",
              "## Details",
              "",
              "The status check is a prerequisite for retrying a failed payout.",
              "If a spend has either succeeded or expired, it is removed from the storage by this",
              "function. In such instances, transaction fees are refunded.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::PaymentFailed`] if the spend payout has failed.",
              "Emits [`Event::SpendProcessed`] if the spend payout has succeed."
            ]
          },
          {
            "Name": "void_spend",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "SpendIndex",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Void previously approved spend.",
              "",
              "## Dispatch Origin",
              "",
              "Must be [`Config::RejectOrigin`].",
              "",
              "## Details",
              "",
              "A spend void is only possible if the payout has not been attempted yet.",
              "",
              "### Parameters",
              "- `index`: The spend index.",
              "",
              "## Events",
              "",
              "Emits [`Event::AssetSpendVoided`] if successful."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "186": {
        "Variants": [
          {
            "Name": "propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 187
              },
              {
                "Name": "value",
                "TypeName": "BalanceOf<T>",
                "TypeId": 41
              }
            ],
            "Index": 0,
            "Docs": [
              "Propose a sensitive action to be taken.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender must",
              "have funds to cover the deposit.",
              "",
              "- `proposal_hash`: The hash of the proposal preimage.",
              "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
              "",
              "Emits `Proposed`."
            ]
          },
          {
            "Name": "second",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "PropIndex",
                "TypeId": 105
              }
            ],
            "Index": 1,
            "Docs": [
              "Signals agreement with a particular proposal.",
              "",
              "The dispatch origin of this call must be _Signed_ and the sender",
              "must have funds to cover the deposit, equal to the original deposit.",
              "",
              "- `proposal`: The index of the proposal to second."
            ]
          },
          {
            "Name": "vote",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 105
              },
              {
                "Name": "vote",
                "TypeName": "AccountVote<BalanceOf<T>>",
                "TypeId": 49
              }
            ],
            "Index": 2,
            "Docs": [
              "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
              "otherwise it is a vote to keep the status quo.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `ref_index`: The index of the referendum to vote for.",
              "- `vote`: The vote configuration."
            ]
          },
          {
            "Name": "emergency_cancel",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 3,
            "Docs": [
              "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
              "referendum.",
              "",
              "The dispatch origin of this call must be `CancellationOrigin`.",
              "",
              "-`ref_index`: The index of the referendum to cancel.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "external_propose",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 187
              }
            ],
            "Index": 4,
            "Docs": [
              "Schedule a referendum to be tabled once it is legal to schedule an external",
              "referendum.",
              "",
              "The dispatch origin of this call must be `ExternalOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal."
            ]
          },
          {
            "Name": "external_propose_majority",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 187
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
              "an external referendum.",
              "",
              "The dispatch of this call must be `ExternalMajorityOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "external_propose_default",
            "TypeFields": [
              {
                "Name": "proposal",
                "TypeName": "BoundedCallOf<T>",
                "TypeId": 187
              }
            ],
            "Index": 6,
            "Docs": [
              "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
              "schedule an external referendum.",
              "",
              "The dispatch of this call must be `ExternalDefaultOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal.",
              "",
              "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
              "pre-scheduled `external_propose` call.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "fast_track",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "voting_period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Schedule the currently externally-proposed majority-carries referendum to be tabled",
              "immediately. If there is no externally-proposed referendum currently, or if there is one",
              "but it is not a majority-carries referendum then it fails.",
              "",
              "The dispatch of this call must be `FastTrackOrigin`.",
              "",
              "- `proposal_hash`: The hash of the current external proposal.",
              "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
              "\tMust be always greater than zero.",
              "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
              "- `delay`: The number of block after voting has ended in approval and this should be",
              "  enacted. This doesn't have a minimum amount.",
              "",
              "Emits `Started`.",
              "",
              "Weight: `O(1)`"
            ]
          },
          {
            "Name": "veto_external",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "Veto and blacklist the external proposal hash.",
              "",
              "The dispatch origin of this call must be `VetoOrigin`.",
              "",
              "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
              "",
              "Emits `Vetoed`.",
              "",
              "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
            ]
          },
          {
            "Name": "cancel_referendum",
            "TypeFields": [
              {
                "Name": "ref_index",
                "TypeName": "ReferendumIndex",
                "TypeId": 105
              }
            ],
            "Index": 9,
            "Docs": [
              "Remove a referendum.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "- `ref_index`: The index of the referendum to cancel.",
              "",
              "# Weight: `O(1)`."
            ]
          },
          {
            "Name": "delegate",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 190
              },
              {
                "Name": "balance",
                "TypeName": "BalanceOf<T>",
                "TypeId": 6
              }
            ],
            "Index": 10,
            "Docs": [
              "Delegate the voting power (with some given conviction) of the sending account.",
              "",
              "The balance delegated is locked for as long as it's delegated, and thereafter for the",
              "time appropriate for the conviction's lock period.",
              "",
              "The dispatch origin of this call must be _Signed_, and the signing account must either:",
              "  - be delegating already; or",
              "  - have no voting activity (if there is, then it will need to be removed/consolidated",
              "    through `reap_vote` or `unvote`).",
              "",
              "- `to`: The account whose voting the `target` account's voting power will follow.",
              "- `conviction`: The conviction that will be attached to the delegated votes. When the",
              "  account is undelegated, the funds will be locked for the corresponding period.",
              "- `balance`: The amount of the account's balance to be used in delegating. This must not",
              "  be more than the account's current balance.",
              "",
              "Emits `Delegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "undelegate",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Undelegate the voting power of the sending account.",
              "",
              "Tokens may be unlocked following once an amount of time consistent with the lock period",
              "of the conviction with which the delegation was issued.",
              "",
              "The dispatch origin of this call must be _Signed_ and the signing account must be",
              "currently delegating.",
              "",
              "Emits `Undelegated`.",
              "",
              "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
              "  voted on. Weight is charged as if maximum votes."
            ]
          },
          {
            "Name": "clear_public_proposals",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Clears all public proposals.",
              "",
              "The dispatch origin of this call must be _Root_.",
              "",
              "Weight: `O(1)`."
            ]
          },
          {
            "Name": "unlock",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 13,
            "Docs": [
              "Unlock tokens that have an expired lock.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account to remove the lock on.",
              "",
              "Weight: `O(R)` with R number of vote of target."
            ]
          },
          {
            "Name": "remove_vote",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 14,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If:",
              "- the referendum was cancelled, or",
              "- the referendum is ongoing, or",
              "- the referendum has ended such that",
              "  - the vote of the account was in opposition to the result; or",
              "  - there was no conviction to the account's vote; or",
              "  - the account made a split vote",
              "...then the vote is removed cleanly and a following call to `unlock` may result in more",
              "funds being available.",
              "",
              "If, however, the referendum has ended and:",
              "- it finished corresponding to the vote of the account, and",
              "- the account made a standard vote with conviction, and",
              "- the lock period of the conviction is not over",
              "...then the lock will be aggregated into the overall account's lock, which may involve",
              "*overlocking* (where the two locks are combined into a single lock that is the maximum",
              "of both the amount locked and the time is it locked for).",
              "",
              "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
              "registered for referendum `index`.",
              "",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "remove_other_vote",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "index",
                "TypeName": "ReferendumIndex",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Remove a vote for a referendum.",
              "",
              "If the `target` is equal to the signer, then this function is exactly equivalent to",
              "`remove_vote`. If not equal to the signer, then the vote must have expired,",
              "either because the referendum was cancelled, because the voter lost the referendum or",
              "because the conviction period is over.",
              "",
              "The dispatch origin of this call must be _Signed_.",
              "",
              "- `target`: The account of the vote to be removed; this account must have voted for",
              "  referendum `index`.",
              "- `index`: The index of referendum of the vote to be removed.",
              "",
              "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
              "  Weight is calculated for the maximum number of vote."
            ]
          },
          {
            "Name": "blacklist",
            "TypeFields": [
              {
                "Name": "proposal_hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              },
              {
                "Name": "maybe_ref_index",
                "TypeName": "Option<ReferendumIndex>",
                "TypeId": 88
              }
            ],
            "Index": 16,
            "Docs": [
              "Permanently place a proposal into the blacklist. This prevents it from ever being",
              "proposed again.",
              "",
              "If called on a queued public or external proposal, then this will result in it being",
              "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
              "then it will be cancelled.",
              "",
              "The dispatch origin of this call must be `BlacklistOrigin`.",
              "",
              "- `proposal_hash`: The proposal hash to blacklist permanently.",
              "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
              "cancelled.",
              "",
              "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
              "  reasonable value)."
            ]
          },
          {
            "Name": "cancel_proposal",
            "TypeFields": [
              {
                "Name": "prop_index",
                "TypeName": "PropIndex",
                "TypeId": 105
              }
            ],
            "Index": 17,
            "Docs": [
              "Remove a proposal.",
              "",
              "The dispatch origin of this call must be `CancelProposalOrigin`.",
              "",
              "- `prop_index`: The index of the proposal to cancel.",
              "",
              "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
            ]
          },
          {
            "Name": "set_metadata",
            "TypeFields": [
              {
                "Name": "owner",
                "TypeName": "MetadataOwner",
                "TypeId": 51
              },
              {
                "Name": "maybe_hash",
                "TypeName": "Option<T::Hash>",
                "TypeId": 191
              }
            ],
            "Index": 18,
            "Docs": [
              "Set or clear a metadata of a proposal or a referendum.",
              "",
              "Parameters:",
              "- `origin`: Must correspond to the `MetadataOwner`.",
              "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`",
              "      threshold.",
              "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`",
              "      threshold.",
              "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`",
              "      threshold.",
              "    - `Signed` by a creator for a public proposal.",
              "    - `Signed` to clear a metadata for a finished referendum.",
              "    - `Root` to set a metadata for an ongoing referendum.",
              "- `owner`: an identifier of a metadata owner.",
              "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "187": {
        "Variants": [
          {
            "Name": "Legacy",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 13
              }
            ],
            "Index": 0
          },
          {
            "Name": "Inline",
            "TypeFields": [
              {
                "TypeName": "BoundedInline",
                "TypeId": 189
              }
            ],
            "Index": 1
          },
          {
            "Name": "Lookup",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "H::Output",
                "TypeId": 13
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "preimages",
          "Bounded"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 182
          },
          {
            "Name": "H",
            "TypeId": 188
          }
        ],
        "TypeDef": "Variant"
      },
      "188": {
        "Path": [
          "sp_runtime",
          "traits",
          "BlakeTwo256"
        ],
        "TypeDef": "Composite"
      },
      "189": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "190": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Locked1x",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "Locked2x",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "Locked3x",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "Locked4x",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "Locked5x",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Locked6x",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "conviction",
          "Conviction"
        ],
        "TypeDef": "Variant"
      },
      "191": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 13
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          }
        ],
        "TypeDef": "Variant"
      },
      "192": {
        "Variants": [
          {
            "Name": "sudo",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 0,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin."
            ]
          },
          {
            "Name": "sudo_unchecked_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Root` origin.",
              "This function does not check the weight of the call, and instead allows the",
              "Sudo user to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "set_key",
            "TypeFields": [
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 2,
            "Docs": [
              "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
              "key."
            ]
          },
          {
            "Name": "sudo_as",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 3,
            "Docs": [
              "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
              "a given account.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "remove_key",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Permanently removes the sudo key.",
              "",
              "**This cannot be un-done.**"
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "193": {
        "Variants": [
          {
            "Name": "schedule",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 194
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 0,
            "Docs": [
              "Anonymously schedule a task."
            ]
          },
          {
            "Name": "cancel",
            "TypeFields": [
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Cancel an anonymously scheduled task."
            ]
          },
          {
            "Name": "schedule_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "when",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 194
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 2,
            "Docs": [
              "Schedule a named task."
            ]
          },
          {
            "Name": "cancel_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a named scheduled task."
            ]
          },
          {
            "Name": "schedule_after",
            "TypeFields": [
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 194
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 4,
            "Docs": [
              "Anonymously schedule a task after a delay."
            ]
          },
          {
            "Name": "schedule_named_after",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "after",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "maybe_periodic",
                "TypeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                "TypeId": 194
              },
              {
                "Name": "priority",
                "TypeName": "schedule::Priority",
                "TypeId": 2
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 5,
            "Docs": [
              "Schedule a named task after a delay."
            ]
          },
          {
            "Name": "set_retry",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 55
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 6,
            "Docs": [
              "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
              "be retried after `period` blocks, for a total amount of `retries` retries or until it",
              "succeeds.",
              "",
              "Tasks which need to be scheduled for a retry are still subject to weight metering and",
              "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
              "normally while the task is retrying.",
              "",
              "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
              "clones of the original task. Their retry configuration will be derived from the",
              "original task's configuration, but will have a lower value for `remaining` than the",
              "original `total_retries`."
            ]
          },
          {
            "Name": "set_retry_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              },
              {
                "Name": "retries",
                "TypeName": "u8",
                "TypeId": 2
              },
              {
                "Name": "period",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 7,
            "Docs": [
              "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
              "will be retried after `period` blocks, for a total amount of `retries` retries or until",
              "it succeeds.",
              "",
              "Tasks which need to be scheduled for a retry are still subject to weight metering and",
              "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
              "normally while the task is retrying.",
              "",
              "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
              "clones of the original task. Their retry configuration will be derived from the",
              "original task's configuration, but will have a lower value for `remaining` than the",
              "original `total_retries`."
            ]
          },
          {
            "Name": "cancel_retry",
            "TypeFields": [
              {
                "Name": "task",
                "TypeName": "TaskAddress<BlockNumberFor<T>>",
                "TypeId": 55
              }
            ],
            "Index": 8,
            "Docs": [
              "Removes the retry configuration of a task."
            ]
          },
          {
            "Name": "cancel_retry_named",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "TaskName",
                "TypeId": 1
              }
            ],
            "Index": 9,
            "Docs": [
              "Cancel the retry configuration of a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "194": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 55
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 55
          }
        ],
        "TypeDef": "Variant"
      },
      "195": {
        "Variants": [
          {
            "Name": "add_registrar",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 0,
            "Docs": [
              "Add a registrar to the system.",
              "",
              "The dispatch origin for this call must be `T::RegistrarOrigin`.",
              "",
              "- `account`: the account of the registrar.",
              "",
              "Emits `RegistrarAdded` if successful."
            ]
          },
          {
            "Name": "set_identity",
            "TypeFields": [
              {
                "Name": "info",
                "TypeName": "Box<T::IdentityInformation>",
                "TypeId": 196
              }
            ],
            "Index": 1,
            "Docs": [
              "Set an account's identity information and reserve the appropriate deposit.",
              "",
              "If the account already has identity information, the deposit is taken as part payment",
              "for the new deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `info`: The identity information.",
              "",
              "Emits `IdentitySet` if successful."
            ]
          },
          {
            "Name": "set_subs",
            "TypeFields": [
              {
                "Name": "subs",
                "TypeName": "Vec<(T::AccountId, Data)>",
                "TypeId": 230
              }
            ],
            "Index": 2,
            "Docs": [
              "Set the sub-accounts of the sender.",
              "",
              "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
              "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "- `subs`: The identity's (new) sub-accounts."
            ]
          },
          {
            "Name": "clear_identity",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Clear an account's identity info and all sub-accounts and return all deposits.",
              "",
              "Payment: All reserved balances on the account are returned.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "identity.",
              "",
              "Emits `IdentityCleared` if successful."
            ]
          },
          {
            "Name": "request_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 105
              },
              {
                "Name": "max_fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 41
              }
            ],
            "Index": 4,
            "Docs": [
              "Request a judgement from a registrar.",
              "",
              "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
              "given.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is requested.",
              "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
              "",
              "```nocompile",
              "Registrars::<T>::get().get(reg_index).unwrap().fee",
              "```",
              "",
              "Emits `JudgementRequested` if successful."
            ]
          },
          {
            "Name": "cancel_request",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 4
              }
            ],
            "Index": 5,
            "Docs": [
              "Cancel a previous request.",
              "",
              "Payment: A previously reserved deposit is returned on success.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a",
              "registered identity.",
              "",
              "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
              "",
              "Emits `JudgementUnrequested` if successful."
            ]
          },
          {
            "Name": "set_fee",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 105
              },
              {
                "Name": "fee",
                "TypeName": "BalanceOf<T>",
                "TypeId": 41
              }
            ],
            "Index": 6,
            "Docs": [
              "Set the fee required for a judgement to be requested from a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fee`: the new fee."
            ]
          },
          {
            "Name": "set_account_id",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 105
              },
              {
                "Name": "new",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 7,
            "Docs": [
              "Change the account associated with a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `new`: the new account ID."
            ]
          },
          {
            "Name": "set_fields",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "RegistrarIndex",
                "TypeId": 105
              },
              {
                "Name": "fields",
                "TypeName": "<T::IdentityInformation as IdentityInformationProvider>::\nFieldsIdentifier",
                "TypeId": 12
              }
            ],
            "Index": 8,
            "Docs": [
              "Set the field information for a registrar.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `index`.",
              "",
              "- `index`: the index of the registrar whose fee is to be set.",
              "- `fields`: the fields that the registrar concerns themselves with."
            ]
          },
          {
            "Name": "provide_judgement",
            "TypeFields": [
              {
                "Name": "reg_index",
                "TypeName": "RegistrarIndex",
                "TypeId": 105
              },
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "judgement",
                "TypeName": "Judgement<BalanceOf<T>>",
                "TypeId": 232
              },
              {
                "Name": "identity",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 9,
            "Docs": [
              "Provide a judgement for an account's identity.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must be the account",
              "of the registrar whose index is `reg_index`.",
              "",
              "- `reg_index`: the index of the registrar whose judgement is being made.",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
              "- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is",
              "  provided.",
              "",
              "Note: Judgements do not apply to a username.",
              "",
              "Emits `JudgementGiven` if successful."
            ]
          },
          {
            "Name": "kill_identity",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 10,
            "Docs": [
              "Remove an account's identity and sub-account information and slash the deposits.",
              "",
              "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
              "`Slash`. Verification request deposits are not returned; they should be cancelled",
              "manually using `cancel_request`.",
              "",
              "The dispatch origin for this call must match `T::ForceOrigin`.",
              "",
              "- `target`: the account whose identity the judgement is upon. This must be an account",
              "  with a registered identity.",
              "",
              "Emits `IdentityKilled` if successful."
            ]
          },
          {
            "Name": "add_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 199
              }
            ],
            "Index": 11,
            "Docs": [
              "Add the given account to the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "rename_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "data",
                "TypeName": "Data",
                "TypeId": 199
              }
            ],
            "Index": 12,
            "Docs": [
              "Alter the associated name of the given sub-account.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "remove_sub",
            "TypeFields": [
              {
                "Name": "sub",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 13,
            "Docs": [
              "Remove the given account from the sender's subs.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender.",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "sub identity of `sub`."
            ]
          },
          {
            "Name": "quit_sub",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Remove the sender as a sub-account.",
              "",
              "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
              "to the sender (*not* the original depositor).",
              "",
              "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
              "super-identity.",
              "",
              "NOTE: This should not normally be used, but is provided in the case that the non-",
              "controller of an account is maliciously registered as a sub-account."
            ]
          },
          {
            "Name": "add_username_authority",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "suffix",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "allocation",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 15,
            "Docs": [
              "Add an `AccountId` with permission to grant usernames with a given `suffix` appended.",
              "",
              "The authority can grant up to `allocation` usernames. To top up their allocation, they",
              "should just issue (or request via governance) a new `add_username_authority` call."
            ]
          },
          {
            "Name": "remove_username_authority",
            "TypeFields": [
              {
                "Name": "authority",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              }
            ],
            "Index": 16,
            "Docs": [
              "Remove `authority` from the username authorities."
            ]
          },
          {
            "Name": "set_username_for",
            "TypeFields": [
              {
                "Name": "who",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "username",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              },
              {
                "Name": "signature",
                "TypeName": "Option<T::OffchainSignature>",
                "TypeId": 233
              }
            ],
            "Index": 17,
            "Docs": [
              "Set the username for `who`. Must be called by a username authority.",
              "",
              "The authority must have an `allocation`. Users can either pre-sign their usernames or",
              "accept them later.",
              "",
              "Usernames must:",
              "  - Only contain lowercase ASCII characters or digits.",
              "  - When combined with the suffix of the issuing authority be _less than_ the",
              "    `MaxUsernameLength`."
            ]
          },
          {
            "Name": "accept_username",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 58
              }
            ],
            "Index": 18,
            "Docs": [
              "Accept a given username that an `authority` granted. The call must include the full",
              "username, as in `username.suffix`."
            ]
          },
          {
            "Name": "remove_expired_approval",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 58
              }
            ],
            "Index": 19,
            "Docs": [
              "Remove an expired username approval. The username was approved by an authority but never",
              "accepted by the user and must now be beyond its expiration. The call must include the",
              "full username, as in `username.suffix`."
            ]
          },
          {
            "Name": "set_primary_username",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 58
              }
            ],
            "Index": 20,
            "Docs": [
              "Set a given username as the primary. The username should include the suffix."
            ]
          },
          {
            "Name": "remove_dangling_username",
            "TypeFields": [
              {
                "Name": "username",
                "TypeName": "Username<T>",
                "TypeId": 58
              }
            ],
            "Index": 21,
            "Docs": [
              "Remove a username that corresponds to an account with no identity. Exists when a user",
              "gets a username but then calls `clear_identity`."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Identity pallet declaration."
        ]
      },
      "196": {
        "TypeFields": [
          {
            "Name": "additional",
            "TypeName": "BoundedVec<(Data, Data), FieldLimit>",
            "TypeId": 197
          },
          {
            "Name": "display",
            "TypeName": "Data",
            "TypeId": 199
          },
          {
            "Name": "legal",
            "TypeName": "Data",
            "TypeId": 199
          },
          {
            "Name": "web",
            "TypeName": "Data",
            "TypeId": 199
          },
          {
            "Name": "riot",
            "TypeName": "Data",
            "TypeId": 199
          },
          {
            "Name": "email",
            "TypeName": "Data",
            "TypeId": 199
          },
          {
            "Name": "pgp_fingerprint",
            "TypeName": "Option<[u8; 20]>",
            "TypeId": 229
          },
          {
            "Name": "image",
            "TypeName": "Data",
            "TypeId": 199
          },
          {
            "Name": "twitter",
            "TypeName": "Data",
            "TypeId": 199
          }
        ],
        "Path": [
          "pallet_identity",
          "legacy",
          "IdentityInfo"
        ],
        "TypeParams": [
          {
            "Name": "FieldLimit"
          }
        ],
        "TypeDef": "Composite"
      },
      "197": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 228
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 198
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "198": {
        "TypeIds": [
          199,
          199
        ],
        "TypeDef": "Tuple"
      },
      "199": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Raw0",
            "TypeFields": [
              {
                "TypeId": 200
              }
            ],
            "Index": 1
          },
          {
            "Name": "Raw1",
            "TypeFields": [
              {
                "TypeId": 201
              }
            ],
            "Index": 2
          },
          {
            "Name": "Raw2",
            "TypeFields": [
              {
                "TypeId": 202
              }
            ],
            "Index": 3
          },
          {
            "Name": "Raw3",
            "TypeFields": [
              {
                "TypeId": 203
              }
            ],
            "Index": 4
          },
          {
            "Name": "Raw4",
            "TypeFields": [
              {
                "TypeId": 18
              }
            ],
            "Index": 5
          },
          {
            "Name": "Raw5",
            "TypeFields": [
              {
                "TypeId": 95
              }
            ],
            "Index": 6
          },
          {
            "Name": "Raw6",
            "TypeFields": [
              {
                "TypeId": 204
              }
            ],
            "Index": 7
          },
          {
            "Name": "Raw7",
            "TypeFields": [
              {
                "TypeId": 205
              }
            ],
            "Index": 8
          },
          {
            "Name": "Raw8",
            "TypeFields": [
              {
                "TypeId": 100
              }
            ],
            "Index": 9
          },
          {
            "Name": "Raw9",
            "TypeFields": [
              {
                "TypeId": 206
              }
            ],
            "Index": 10
          },
          {
            "Name": "Raw10",
            "TypeFields": [
              {
                "TypeId": 207
              }
            ],
            "Index": 11
          },
          {
            "Name": "Raw11",
            "TypeFields": [
              {
                "TypeId": 208
              }
            ],
            "Index": 12
          },
          {
            "Name": "Raw12",
            "TypeFields": [
              {
                "TypeId": 209
              }
            ],
            "Index": 13
          },
          {
            "Name": "Raw13",
            "TypeFields": [
              {
                "TypeId": 210
              }
            ],
            "Index": 14
          },
          {
            "Name": "Raw14",
            "TypeFields": [
              {
                "TypeId": 211
              }
            ],
            "Index": 15
          },
          {
            "Name": "Raw15",
            "TypeFields": [
              {
                "TypeId": 212
              }
            ],
            "Index": 16
          },
          {
            "Name": "Raw16",
            "TypeFields": [
              {
                "TypeId": 213
              }
            ],
            "Index": 17
          },
          {
            "Name": "Raw17",
            "TypeFields": [
              {
                "TypeId": 214
              }
            ],
            "Index": 18
          },
          {
            "Name": "Raw18",
            "TypeFields": [
              {
                "TypeId": 215
              }
            ],
            "Index": 19
          },
          {
            "Name": "Raw19",
            "TypeFields": [
              {
                "TypeId": 216
              }
            ],
            "Index": 20
          },
          {
            "Name": "Raw20",
            "TypeFields": [
              {
                "TypeId": 159
              }
            ],
            "Index": 21
          },
          {
            "Name": "Raw21",
            "TypeFields": [
              {
                "TypeId": 217
              }
            ],
            "Index": 22
          },
          {
            "Name": "Raw22",
            "TypeFields": [
              {
                "TypeId": 218
              }
            ],
            "Index": 23
          },
          {
            "Name": "Raw23",
            "TypeFields": [
              {
                "TypeId": 219
              }
            ],
            "Index": 24
          },
          {
            "Name": "Raw24",
            "TypeFields": [
              {
                "TypeId": 220
              }
            ],
            "Index": 25
          },
          {
            "Name": "Raw25",
            "TypeFields": [
              {
                "TypeId": 221
              }
            ],
            "Index": 26
          },
          {
            "Name": "Raw26",
            "TypeFields": [
              {
                "TypeId": 222
              }
            ],
            "Index": 27
          },
          {
            "Name": "Raw27",
            "TypeFields": [
              {
                "TypeId": 223
              }
            ],
            "Index": 28
          },
          {
            "Name": "Raw28",
            "TypeFields": [
              {
                "TypeId": 224
              }
            ],
            "Index": 29
          },
          {
            "Name": "Raw29",
            "TypeFields": [
              {
                "TypeId": 225
              }
            ],
            "Index": 30
          },
          {
            "Name": "Raw30",
            "TypeFields": [
              {
                "TypeId": 226
              }
            ],
            "Index": 31
          },
          {
            "Name": "Raw31",
            "TypeFields": [
              {
                "TypeId": 227
              }
            ],
            "Index": 32
          },
          {
            "Name": "Raw32",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 33
          },
          {
            "Name": "BlakeTwo256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 34
          },
          {
            "Name": "Sha256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 35
          },
          {
            "Name": "Keccak256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 36
          },
          {
            "Name": "ShaThree256",
            "TypeFields": [
              {
                "TypeId": 1
              }
            ],
            "Index": 37
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Data"
        ],
        "TypeDef": "Variant"
      },
      "200": {
        "Length": 0,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "201": {
        "Length": 1,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "202": {
        "Length": 2,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "203": {
        "Length": 3,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "204": {
        "Length": 6,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "205": {
        "Length": 7,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "206": {
        "Length": 9,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "207": {
        "Length": 10,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "208": {
        "Length": 11,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "209": {
        "Length": 12,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "210": {
        "Length": 13,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "211": {
        "Length": 14,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "212": {
        "Length": 15,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "213": {
        "Length": 16,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "214": {
        "Length": 17,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "215": {
        "Length": 18,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "216": {
        "Length": 19,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "217": {
        "Length": 21,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "218": {
        "Length": 22,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "219": {
        "Length": 23,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "220": {
        "Length": 24,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "221": {
        "Length": 25,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "222": {
        "Length": 26,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "223": {
        "Length": 27,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "224": {
        "Length": 28,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "225": {
        "Length": 29,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "226": {
        "Length": 30,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "227": {
        "Length": 31,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "228": {
        "TypeId": 198,
        "TypeDef": "Sequence"
      },
      "229": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 159
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 159
          }
        ],
        "TypeDef": "Variant"
      },
      "230": {
        "TypeId": 231,
        "TypeDef": "Sequence"
      },
      "231": {
        "TypeIds": [
          0,
          199
        ],
        "TypeDef": "Tuple"
      },
      "232": {
        "Variants": [
          {
            "Name": "Unknown",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "FeePaid",
            "TypeFields": [
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 1
          },
          {
            "Name": "Reasonable",
            "TypeFields": null,
            "Index": 2
          },
          {
            "Name": "KnownGood",
            "TypeFields": null,
            "Index": 3
          },
          {
            "Name": "OutOfDate",
            "TypeFields": null,
            "Index": 4
          },
          {
            "Name": "LowQuality",
            "TypeFields": null,
            "Index": 5
          },
          {
            "Name": "Erroneous",
            "TypeFields": null,
            "Index": 6
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Judgement"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "233": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 234
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 234
          }
        ],
        "TypeDef": "Variant"
      },
      "234": {
        "Variants": [
          {
            "Name": "Ed25519",
            "TypeFields": [
              {
                "TypeName": "ed25519::Signature",
                "TypeId": 138
              }
            ],
            "Index": 0
          },
          {
            "Name": "Sr25519",
            "TypeFields": [
              {
                "TypeName": "sr25519::Signature",
                "TypeId": 138
              }
            ],
            "Index": 1
          },
          {
            "Name": "Ecdsa",
            "TypeFields": [
              {
                "TypeName": "ecdsa::Signature",
                "TypeId": 235
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "sp_runtime",
          "MultiSignature"
        ],
        "TypeDef": "Variant"
      },
      "235": {
        "Length": 65,
        "TypeId": 2,
        "TypeDef": "Array"
      },
      "236": {
        "Variants": [
          {
            "Name": "proxy",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 237
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 0,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorised for through",
              "`add_proxy`.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          },
          {
            "Name": "add_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 60
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 1,
            "Docs": [
              "Register a proxy account for the sender that is able to make calls on its behalf.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to make a proxy.",
              "- `proxy_type`: The permissions allowed for this proxy account.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero."
            ]
          },
          {
            "Name": "remove_proxy",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 60
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              }
            ],
            "Index": 2,
            "Docs": [
              "Unregister a proxy account for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `proxy`: The account that the `caller` would like to remove as a proxy.",
              "- `proxy_type`: The permissions currently enabled for the removed proxy account."
            ]
          },
          {
            "Name": "remove_proxies",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Unregister all proxy accounts for the sender.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "WARNING: This may be called on accounts created by `pure`, however if done, then",
              "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
            ]
          },
          {
            "Name": "create_pure",
            "TypeFields": [
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 60
              },
              {
                "Name": "delay",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 4
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 61
              }
            ],
            "Index": 4,
            "Docs": [
              "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
              "initialize it with a proxy of `proxy_type` for `origin` sender.",
              "",
              "Requires a `Signed` origin.",
              "",
              "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
              "new account. This will almost always be the most permissive `ProxyType` possible to",
              "allow for maximum flexibility.",
              "- `index`: A disambiguation index, in case this is called multiple times in the same",
              "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
              "want to use `0`.",
              "- `delay`: The announcement period required of the initial proxy. Will generally be",
              "zero.",
              "",
              "Fails with `Duplicate` if this has already been called in this transaction, from the",
              "same sender, with the same parameters.",
              "",
              "Fails if there are insufficient funds to pay for deposit."
            ]
          },
          {
            "Name": "kill_pure",
            "TypeFields": [
              {
                "Name": "spawner",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "proxy_type",
                "TypeName": "T::ProxyType",
                "TypeId": 60
              },
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 61
              },
              {
                "Name": "height",
                "TypeName": "BlockNumberFor<T>",
                "TypeId": 105
              },
              {
                "Name": "ext_index",
                "TypeName": "u32",
                "TypeId": 105
              }
            ],
            "Index": 5,
            "Docs": [
              "Removes a previously spawned pure proxy.",
              "",
              "WARNING: **All access to this account will be lost.** Any funds held in it will be",
              "inaccessible.",
              "",
              "Requires a `Signed` origin, and the sender account must have been created by a call to",
              "`pure` with corresponding parameters.",
              "",
              "- `spawner`: The account that originally called `pure` to create this account.",
              "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
              "- `proxy_type`: The proxy type originally passed to `pure`.",
              "- `height`: The height of the chain when the call to `pure` was processed.",
              "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
              "",
              "Fails with `NoPermission` in case the caller is not a previously created pure",
              "account whose `pure` call has corresponding parameters."
            ]
          },
          {
            "Name": "announce",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 6,
            "Docs": [
              "Publish the hash of a proxy-call that will be made in the future.",
              "",
              "This must be called some number of blocks before the corresponding `proxy` is attempted",
              "if the delay associated with the proxy relationship is greater than zero.",
              "",
              "No more than `MaxPending` announcements may be made at any one time.",
              "",
              "This will take a deposit of `AnnouncementDepositFactor` as well as",
              "`AnnouncementDepositBase` if there are no other pending announcements.",
              "",
              "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "remove_announcement",
            "TypeFields": [
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 7,
            "Docs": [
              "Remove a given announcement.",
              "",
              "May be called by a proxy account to remove a call they previously announced and return",
              "the deposit.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `call_hash`: The hash of the call to be made by the `real` account."
            ]
          },
          {
            "Name": "reject_announcement",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "call_hash",
                "TypeName": "CallHashOf<T>",
                "TypeId": 13
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the given announcement of a delegate.",
              "",
              "May be called by a target (proxied) account to remove a call that one of their delegates",
              "(`delegate`) has announced they want to execute. The deposit is returned.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `delegate`: The account that previously announced the call.",
              "- `call_hash`: The hash of the call to be made."
            ]
          },
          {
            "Name": "proxy_announced",
            "TypeFields": [
              {
                "Name": "delegate",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "real",
                "TypeName": "AccountIdLookupOf<T>",
                "TypeId": 157
              },
              {
                "Name": "force_proxy_type",
                "TypeName": "Option<T::ProxyType>",
                "TypeId": 237
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 9,
            "Docs": [
              "Dispatch the given `call` from an account that the sender is authorized for through",
              "`add_proxy`.",
              "",
              "Removes any corresponding announcement(s).",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "Parameters:",
              "- `real`: The account that the proxy will make a call on behalf of.",
              "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
              "- `call`: The call to be made by the `real` account."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "237": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 60
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 60
          }
        ],
        "TypeDef": "Variant"
      },
      "238": {
        "Variants": [
          {
            "Name": "as_multi_threshold_1",
            "TypeFields": [
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 160
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 0,
            "Docs": [
              "Immediately dispatch a multi-signature call using a single approval from the caller.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `other_signatories`: The accounts (other than the sender) who are part of the",
              "multi-signature, but do not participate in the approval process.",
              "- `call`: The call to be executed.",
              "",
              "Result is equivalent to the dispatched result.",
              "",
              "## Complexity",
              "O(Z + C) where Z is the length of the call and C its execution weight."
            ]
          },
          {
            "Name": "as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 61
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 160
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 239
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 1,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "If there are enough, then dispatch the call.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call`: The call to be executed.",
              "",
              "NOTE: Unless this is the final approval, you will generally want to use",
              "`approve_as_multi` instead, since it only requires a hash of the call.",
              "",
              "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
              "on success, result is `Ok` and the result from the interior call, if it was executed,",
              "may be found in the deposited `MultisigExecuted` event.",
              "",
              "## Complexity",
              "- `O(S + Z + Call)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- The weight of the `call`.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "approve_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 61
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 160
              },
              {
                "Name": "maybe_timepoint",
                "TypeName": "Option<Timepoint<BlockNumberFor<T>>>",
                "TypeId": 239
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              },
              {
                "Name": "max_weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 2,
            "Docs": [
              "Register approval for a dispatch to be made from a deterministic composite account if",
              "approved by a total of `threshold - 1` of `other_signatories`.",
              "",
              "Payment: `DepositBase` will be reserved if this is the first approval, plus",
              "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
              "is cancelled.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
              "not the first approval, then it must be `Some`, with the timepoint (block number and",
              "transaction index) of the first approval transaction.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- Up to one binary search and insert (`O(logS + S)`).",
              "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
              "- One event.",
              "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
              "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
            ]
          },
          {
            "Name": "cancel_as_multi",
            "TypeFields": [
              {
                "Name": "threshold",
                "TypeName": "u16",
                "TypeId": 61
              },
              {
                "Name": "other_signatories",
                "TypeName": "Vec<T::AccountId>",
                "TypeId": 160
              },
              {
                "Name": "timepoint",
                "TypeName": "Timepoint<BlockNumberFor<T>>",
                "TypeId": 63
              },
              {
                "Name": "call_hash",
                "TypeName": "[u8; 32]",
                "TypeId": 1
              }
            ],
            "Index": 3,
            "Docs": [
              "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
              "for this operation will be unreserved on success.",
              "",
              "The dispatch origin for this call must be _Signed_.",
              "",
              "- `threshold`: The total number of approvals for this dispatch before it is executed.",
              "- `other_signatories`: The accounts (other than the sender) who can approve this",
              "dispatch. May not be empty.",
              "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
              "transaction for this dispatch.",
              "- `call_hash`: The hash of the call to be executed.",
              "",
              "## Complexity",
              "- `O(S)`.",
              "- Up to one balance-reserve or unreserve operation.",
              "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
              "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
              "- One encode & hash, both of complexity `O(S)`.",
              "- One event.",
              "- I/O: 1 read `O(S)`, one remove.",
              "- Storage: removes one item."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "239": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 63
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 63
          }
        ],
        "TypeDef": "Variant"
      },
      "240": {
        "Variants": [
          {
            "Name": "batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 241
              }
            ],
            "Index": 0,
            "Docs": [
              "Send a batch of dispatch calls.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched.",
              "",
              "This will return `Ok` in all circumstances. To determine the success of the batch, an",
              "event is deposited. If a call failed and the batch was interrupted, then the",
              "`BatchInterrupted` event is deposited, along with the number of successful calls made",
              "and the error of the failed call. If all were successful, then the `BatchCompleted`",
              "event is deposited."
            ]
          },
          {
            "Name": "as_derivative",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u16",
                "TypeId": 61
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 1,
            "Docs": [
              "Send a call through an indexed pseudonym of the sender.",
              "",
              "Filter from origin are passed along. The call will be dispatched with an origin which",
              "use the same filter as the origin of this call.",
              "",
              "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
              "because you expect `proxy` to have been used prior in the call stack and you do not want",
              "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
              "in the Multisig pallet instead.",
              "",
              "NOTE: Prior to version *12, this was called `as_limited_sub`.",
              "",
              "The dispatch origin for this call must be _Signed_."
            ]
          },
          {
            "Name": "batch_all",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 241
              }
            ],
            "Index": 2,
            "Docs": [
              "Send a batch of dispatch calls and atomically execute them.",
              "The whole transaction will rollback and fail if any of the calls failed.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatched without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "dispatch_as",
            "TypeFields": [
              {
                "Name": "as_origin",
                "TypeName": "Box<T::PalletsOrigin>",
                "TypeId": 242
              },
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              }
            ],
            "Index": 3,
            "Docs": [
              "Dispatches a function call with a provided origin.",
              "",
              "The dispatch origin for this call must be _Root_.",
              "",
              "## Complexity",
              "- O(1)."
            ]
          },
          {
            "Name": "force_batch",
            "TypeFields": [
              {
                "Name": "calls",
                "TypeName": "Vec<<T as Config>::RuntimeCall>",
                "TypeId": 241
              }
            ],
            "Index": 4,
            "Docs": [
              "Send a batch of dispatch calls.",
              "Unlike `batch`, it allows errors and won't interrupt.",
              "",
              "May be called from any origin except `None`.",
              "",
              "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
              "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
              "",
              "If origin is root then the calls are dispatch without checking origin filter. (This",
              "includes bypassing `frame_system::Config::BaseCallFilter`).",
              "",
              "## Complexity",
              "- O(C) where C is the number of calls to be batched."
            ]
          },
          {
            "Name": "with_weight",
            "TypeFields": [
              {
                "Name": "call",
                "TypeName": "Box<<T as Config>::RuntimeCall>",
                "TypeId": 182
              },
              {
                "Name": "weight",
                "TypeName": "Weight",
                "TypeId": 10
              }
            ],
            "Index": 5,
            "Docs": [
              "Dispatch a function call with a specified weight.",
              "",
              "This function does not check the weight of the call, and instead allows the",
              "Root origin to specify the weight of the call.",
              "",
              "The dispatch origin for this call must be _Root_."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "241": {
        "TypeId": 182,
        "TypeDef": "Sequence"
      },
      "242": {
        "Variants": [
          {
            "Name": "system",
            "TypeFields": [
              {
                "TypeName": "frame_system::Origin<Runtime>",
                "TypeId": 243
              }
            ],
            "Index": 0
          },
          {
            "Name": "Council",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                "TypeId": 244
              }
            ],
            "Index": 9
          },
          {
            "Name": "TechnicalCommittee",
            "TypeFields": [
              {
                "TypeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                "TypeId": 245
              }
            ],
            "Index": 10
          },
          {
            "Name": "Void",
            "TypeFields": [
              {
                "TypeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                "TypeId": 143
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "ajuna_solo_runtime",
          "OriginCaller"
        ],
        "TypeDef": "Variant"
      },
      "243": {
        "Variants": [
          {
            "Name": "Root",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Signed",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "frame_support",
          "dispatch",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "244": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "245": {
        "Variants": [
          {
            "Name": "Members",
            "TypeFields": [
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              },
              {
                "TypeName": "MemberCount",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Member",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 1
          },
          {
            "Name": "_Phantom",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_collective",
          "RawOrigin"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant"
      },
      "246": {
        "Variants": [
          {
            "Name": "note_preimage",
            "TypeFields": [
              {
                "Name": "bytes",
                "TypeName": "Vec<u8>",
                "TypeId": 14
              }
            ],
            "Index": 0,
            "Docs": [
              "Register a preimage on-chain.",
              "",
              "If the preimage was previously requested, no fees or deposits are taken for providing",
              "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
            ]
          },
          {
            "Name": "unnote_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 1,
            "Docs": [
              "Clear an unrequested preimage from the runtime storage.",
              "",
              "If `len` is provided, then it will be a much cheaper operation.",
              "",
              "- `hash`: The hash of the preimage to be removed from the store.",
              "- `len`: The length of the preimage of `hash`."
            ]
          },
          {
            "Name": "request_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 2,
            "Docs": [
              "Request a preimage be uploaded to the chain without paying any fees or deposits.",
              "",
              "If the preimage requests has already been provided on-chain, we unreserve any deposit",
              "a user may have paid, and take the control of the preimage out of their hands."
            ]
          },
          {
            "Name": "unrequest_preimage",
            "TypeFields": [
              {
                "Name": "hash",
                "TypeName": "T::Hash",
                "TypeId": 13
              }
            ],
            "Index": 3,
            "Docs": [
              "Clear a previously made request for a preimage.",
              "",
              "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
            ]
          },
          {
            "Name": "ensure_updated",
            "TypeFields": [
              {
                "Name": "hashes",
                "TypeName": "Vec<T::Hash>",
                "TypeId": 102
              }
            ],
            "Index": 4,
            "Docs": [
              "Ensure that the a bulk of pre-images is upgraded.",
              "",
              "The caller pays no fee if at least 90% of pre-images were successfully updated."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "247": {
        "Variants": [
          {
            "Name": "force_set_cursor",
            "TypeFields": [
              {
                "Name": "cursor",
                "TypeName": "Option<CursorOf<T>>",
                "TypeId": 248
              }
            ],
            "Index": 0,
            "Docs": [
              "Allows root to set a cursor to forcefully start, stop or forward the migration process.",
              "",
              "Should normally not be needed and is only in place as emergency measure. Note that",
              "restarting the migration process in this manner will not call the",
              "[`MigrationStatusHandler::started`] hook or emit an `UpgradeStarted` event."
            ]
          },
          {
            "Name": "force_set_active_cursor",
            "TypeFields": [
              {
                "Name": "index",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "inner_cursor",
                "TypeName": "Option<RawCursorOf<T>>",
                "TypeId": 252
              },
              {
                "Name": "started_at",
                "TypeName": "Option<BlockNumberFor<T>>",
                "TypeId": 88
              }
            ],
            "Index": 1,
            "Docs": [
              "Allows root to set an active cursor to forcefully start/forward the migration process.",
              "",
              "This is an edge-case version of [`Self::force_set_cursor`] that allows to set the",
              "`started_at` value to the next block number. Otherwise this would not be possible, since",
              "`force_set_cursor` takes an absolute block number. Setting `started_at` to `None`",
              "indicates that the current block number plus one should be used."
            ]
          },
          {
            "Name": "force_onboard_mbms",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Forces the onboarding of the migrations.",
              "",
              "This process happens automatically on a runtime upgrade. It is in place as an emergency",
              "measurement. The cursor needs to be `None` for this to succeed."
            ]
          },
          {
            "Name": "clear_historic",
            "TypeFields": [
              {
                "Name": "selector",
                "TypeName": "HistoricCleanupSelector<IdentifierOf<T>>",
                "TypeId": 253
              }
            ],
            "Index": 3,
            "Docs": [
              "Clears the `Historic` set.",
              "",
              "`map_cursor` must be set to the last value that was returned by the",
              "`HistoricCleared` event. The first time `None` can be used. `limit` must be chosen in a",
              "way that will result in a sensible weight."
            ]
          }
        ],
        "Path": [
          "pallet_migrations",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "248": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 249
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 249
          }
        ],
        "TypeDef": "Variant"
      },
      "249": {
        "Variants": [
          {
            "Name": "Active",
            "TypeFields": [
              {
                "TypeName": "ActiveCursor<Cursor, BlockNumber>",
                "TypeId": 251
              }
            ],
            "Index": 0
          },
          {
            "Name": "Stuck",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_migrations",
          "MigrationCursor"
        ],
        "TypeParams": [
          {
            "Name": "Cursor",
            "TypeId": 250
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "250": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "251": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "inner_cursor",
            "TypeName": "Option<Cursor>",
            "TypeId": 252
          },
          {
            "Name": "started_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_migrations",
          "ActiveCursor"
        ],
        "TypeParams": [
          {
            "Name": "Cursor",
            "TypeId": 250
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "252": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 250
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 250
          }
        ],
        "TypeDef": "Variant"
      },
      "253": {
        "Variants": [
          {
            "Name": "Specific",
            "TypeFields": [
              {
                "TypeName": "Vec<Id>",
                "TypeId": 255
              }
            ],
            "Index": 0
          },
          {
            "Name": "Wildcard",
            "TypeFields": [
              {
                "Name": "limit",
                "TypeName": "Option<u32>",
                "TypeId": 88
              },
              {
                "Name": "previous_cursor",
                "TypeName": "Option<Vec<u8>>",
                "TypeId": 67
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_migrations",
          "HistoricCleanupSelector"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 254
          }
        ],
        "TypeDef": "Variant"
      },
      "254": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "255": {
        "TypeId": 254,
        "TypeDef": "Sequence"
      },
      "256": {
        "Variants": [
          {
            "Name": "enable_affiliator",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "Option<AccountIdFor<T>>",
                "TypeId": 53
              },
              {
                "Name": "params",
                "TypeName": "T::UnlockParameters",
                "TypeId": 44
              }
            ],
            "Index": 0
          },
          {
            "Name": "add_affiliation",
            "TypeFields": [
              {
                "Name": "target_affiliatee",
                "TypeName": "Option<AccountIdFor<T>>",
                "TypeId": 53
              },
              {
                "Name": "affiliate_id",
                "TypeName": "AffiliateId",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "remove_affiliation",
            "TypeFields": [
              {
                "Name": "account",
                "TypeName": "T::AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          },
          {
            "Name": "set_rule_for",
            "TypeFields": [
              {
                "Name": "rule_id",
                "TypeName": "RuleIdentifierFor<T, I>",
                "TypeId": 69
              },
              {
                "Name": "rule",
                "TypeName": "FeePropagationOf<T, I>",
                "TypeId": 257
              }
            ],
            "Index": 3
          },
          {
            "Name": "clear_rule_for",
            "TypeFields": [
              {
                "Name": "rule_id",
                "TypeName": "RuleIdentifierFor<T, I>",
                "TypeId": 69
              }
            ],
            "Index": 4
          }
        ],
        "Path": [
          "pallet_ajuna_affiliates",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "257": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "258": {
        "Variants": [
          {
            "Name": "create_tournament",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "config",
                "TypeName": "TournamentConfigFor<T, I>",
                "TypeId": 259
              }
            ],
            "Index": 0
          },
          {
            "Name": "remove_latest_tournament",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "claim_tournament_reward_for",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "entity_id",
                "TypeName": "EntityIdFor<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 2
          },
          {
            "Name": "claim_golden_duck_for",
            "TypeFields": [
              {
                "Name": "category_id",
                "TypeName": "TournamentCategoryIdFor<T, I>",
                "TypeId": 4
              },
              {
                "Name": "entity_id",
                "TypeName": "EntityIdFor<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_ajuna_tournament",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "259": {
        "TypeFields": [
          {
            "Name": "start",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "active_end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "claim_end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "initial_reward",
            "TypeName": "Option<Balance>",
            "TypeId": 261
          },
          {
            "Name": "max_reward",
            "TypeName": "Option<Balance>",
            "TypeId": 261
          },
          {
            "Name": "take_fee_percentage",
            "TypeName": "Option<Percentage>",
            "TypeId": 262
          },
          {
            "Name": "reward_distribution",
            "TypeName": "RewardDistributionTable",
            "TypeId": 263
          },
          {
            "Name": "golden_duck_config",
            "TypeName": "GoldenDuckConfig",
            "TypeId": 264
          },
          {
            "Name": "max_players",
            "TypeName": "u32",
            "TypeId": 4
          },
          {
            "Name": "ranker",
            "TypeName": "Ranker",
            "TypeId": 260
          }
        ],
        "Path": [
          "pallet_ajuna_tournament",
          "config",
          "TournamentConfig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "Ranker",
            "TypeId": 260
          }
        ],
        "TypeDef": "Composite"
      },
      "260": {
        "Path": [
          "ajuna_solo_runtime",
          "sage",
          "casino_jam",
          "CasinoJamEntityRanker"
        ],
        "TypeDef": "Composite"
      },
      "261": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 6
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "262": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          }
        ],
        "TypeDef": "Variant"
      },
      "263": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "264": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Enabled",
            "TypeFields": [
              {
                "TypeName": "Percentage",
                "TypeId": 2
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_tournament",
          "config",
          "GoldenDuckConfig"
        ],
        "TypeDef": "Variant"
      },
      "265": {
        "Variants": [
          {
            "Name": "update_season",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "config",
                "TypeName": "Option<SeasonConfigOf<T, I>>",
                "TypeId": 79
              },
              {
                "Name": "metadata",
                "TypeName": "Option<SeasonMetadata>",
                "TypeId": 82
              },
              {
                "Name": "schedule",
                "TypeName": "Option<SeasonScheduleOf<T>>",
                "TypeId": 86
              }
            ],
            "Index": 0
          },
          {
            "Name": "interrupt_active_season",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_seasons",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "266": {
        "Variants": [
          {
            "Name": "set_organizer",
            "TypeFields": [
              {
                "Name": "organizer",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              }
            ],
            "Index": 0,
            "Docs": [
              "Set game organizer."
            ]
          },
          {
            "Name": "update_general_config",
            "TypeFields": [
              {
                "Name": "new_config",
                "TypeName": "GeneralConfig",
                "TypeId": 90
              }
            ],
            "Index": 1,
            "Docs": [
              "Update general configuration."
            ]
          },
          {
            "Name": "update_transition_config",
            "TypeFields": [
              {
                "Name": "new_config",
                "TypeName": "TransitionConfigOf<T, I>",
                "TypeId": 93
              }
            ],
            "Index": 2,
            "Docs": [
              "Update general configuration."
            ]
          },
          {
            "Name": "update_unlock_rule",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "feature",
                "TypeName": "LockableFeature",
                "TypeId": 94
              },
              {
                "Name": "unlock_rule",
                "TypeName": "UnlockRule",
                "TypeId": 95
              }
            ],
            "Index": 3,
            "Docs": [
              "Updates an unlock rule for the given season.",
              "",
              "It doesn't affect already unlocked features."
            ]
          },
          {
            "Name": "upgrade_asset_inventory",
            "TypeFields": [
              {
                "Name": "beneficiary",
                "TypeName": "Option<AccountIdOf<T>>",
                "TypeId": 53
              },
              {
                "Name": "in_season",
                "TypeName": "Option<SeasonIdOf<T, I>>",
                "TypeId": 88
              },
              {
                "Name": "payment",
                "TypeName": "Option<FungiblesAssetIdOf<T, I>>",
                "TypeId": 267
              }
            ],
            "Index": 4,
            "Docs": [
              "Upgrade the asset inventory space."
            ]
          },
          {
            "Name": "update_asset_filter",
            "TypeFields": [
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "filter",
                "TypeName": "AssetFilterOf<T, I>",
                "TypeId": 270
              }
            ],
            "Index": 5,
            "Docs": [
              "Updates the filter that assets need to pass for certain actions."
            ]
          },
          {
            "Name": "transfer_asset",
            "TypeFields": [
              {
                "Name": "to",
                "TypeName": "AccountIdOf<T>",
                "TypeId": 0
              },
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "payment",
                "TypeName": "Option<FungiblesAssetIdOf<T, I>>",
                "TypeId": 267
              }
            ],
            "Index": 6,
            "Docs": [
              "Transfers the asset with `asset_id` from the `origin` to `to`.",
              "",
              "It will fail if the asset transfer is disabled, the asset doesn't pass the filter",
              "or if the asset is on the market."
            ]
          },
          {
            "Name": "set_asset_price",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "price",
                "TypeName": "BalanceOf<T, I>",
                "TypeId": 6
              }
            ],
            "Index": 7,
            "Docs": [
              "Set the price of a given asset, putting it on sale for others to buy."
            ]
          },
          {
            "Name": "remove_asset_price",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 8,
            "Docs": [
              "Remove the price of an asset, and thereby remove it from the market."
            ]
          },
          {
            "Name": "buy_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "payment",
                "TypeName": "Option<FungiblesAssetIdOf<T, I>>",
                "TypeId": 267
              }
            ],
            "Index": 9,
            "Docs": [
              "Attempt to buy the selected asset."
            ]
          },
          {
            "Name": "lock_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 10,
            "Docs": [
              "Locks an asset, making it unavailable for use."
            ]
          },
          {
            "Name": "unlock_asset",
            "TypeFields": [
              {
                "Name": "asset_id",
                "TypeName": "AssetIdOf<T, I>",
                "TypeId": 4
              }
            ],
            "Index": 11,
            "Docs": [
              "Unlocks an asset, making it available for use again."
            ]
          },
          {
            "Name": "unlock_feature",
            "TypeFields": [
              {
                "Name": "target",
                "TypeName": "UnlockTarget<AccountIdOf<T>>",
                "TypeId": 271
              },
              {
                "Name": "feature",
                "TypeName": "LockableFeature",
                "TypeId": 94
              },
              {
                "Name": "season_id",
                "TypeName": "SeasonIdOf<T, I>",
                "TypeId": 4
              },
              {
                "Name": "payment",
                "TypeName": "Option<FungiblesAssetIdOf<T, I>>",
                "TypeId": 267
              }
            ],
            "Index": 12,
            "Docs": [
              "Attempts to unlock the selected feature for the `target`."
            ]
          },
          {
            "Name": "state_transition",
            "TypeFields": [
              {
                "Name": "transition_id",
                "TypeName": "TransitionIdOf<T, I>",
                "TypeId": 70
              },
              {
                "Name": "asset_ids",
                "TypeName": "Vec<AssetIdOf<T, I>>",
                "TypeId": 272
              },
              {
                "Name": "extra",
                "TypeName": "ExtraOf<T, I>",
                "TypeId": 44
              },
              {
                "Name": "payment_kind",
                "TypeName": "Option<FungiblesAssetIdOf<T, I>>",
                "TypeId": 267
              }
            ],
            "Index": 13,
            "Docs": [
              "Entry point for the custom state transition."
            ]
          }
        ],
        "Path": [
          "pallet_sage",
          "pallet",
          "Call"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Contains a variant per dispatchable extrinsic that this pallet has."
        ]
      },
      "267": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 268
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 268
          }
        ],
        "TypeDef": "Variant"
      },
      "268": {
        "Variants": [
          {
            "Name": "Payment",
            "TypeFields": [
              {
                "TypeName": "AssetId",
                "TypeId": 269
              }
            ],
            "Index": 0
          },
          {
            "Name": "Voucher",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "ajuna_payment_handler",
          "withdraw_credit",
          "WithdrawKind"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 269
          }
        ],
        "TypeDef": "Variant"
      },
      "269": {
        "Variants": [
          {
            "Name": "Native",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "WithId",
            "TypeFields": [
              {
                "TypeName": "AssetId",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "fungible",
          "union_of",
          "NativeOrWithId"
        ],
        "TypeParams": [
          {
            "Name": "AssetId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "270": {
        "Variants": [
          {
            "Name": "Trade",
            "TypeFields": [
              {
                "TypeName": "TradeFilter",
                "TypeId": 97
              }
            ],
            "Index": 0
          },
          {
            "Name": "Transfer",
            "TypeFields": [
              {
                "TypeName": "TransferFilter",
                "TypeId": 97
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "AssetFilter"
        ],
        "TypeParams": [
          {
            "Name": "TradeFilter",
            "TypeId": 97
          },
          {
            "Name": "TransferFilter",
            "TypeId": 97
          }
        ],
        "TypeDef": "Variant"
      },
      "271": {
        "Variants": [
          {
            "Name": "OneselfFree",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "OneselfPaying",
            "TypeFields": null,
            "Index": 1
          },
          {
            "Name": "OtherPaying",
            "TypeFields": [
              {
                "TypeName": "AccountId",
                "TypeId": 0
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "UnlockTarget"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "272": {
        "TypeId": 4,
        "TypeDef": "Sequence"
      },
      "273": {
        "TypeFields": [
          {
            "Name": "index",
            "TypeName": "ProposalIndex",
            "TypeId": 4
          },
          {
            "Name": "threshold",
            "TypeName": "MemberCount",
            "TypeId": 4
          },
          {
            "Name": "ayes",
            "TypeName": "Vec<AccountId>",
            "TypeId": 160
          },
          {
            "Name": "nays",
            "TypeName": "Vec<AccountId>",
            "TypeId": 160
          },
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_collective",
          "Votes"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "274": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "Name": "PrimeAccountNotMember",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Prime account is not a member"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "275": {
        "Variants": [
          {
            "Name": "NotMember",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Account is not a member"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Duplicate proposals not allowed"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Proposal must exist"
            ]
          },
          {
            "Name": "WrongIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Mismatched index"
            ]
          },
          {
            "Name": "DuplicateVote",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Duplicate vote ignored"
            ]
          },
          {
            "Name": "AlreadyInitialized",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Members are already initialized!"
            ]
          },
          {
            "Name": "TooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The close call was made too early, before the end of the voting."
            ]
          },
          {
            "Name": "TooManyProposals",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "There can only be a maximum of `MaxProposals` active proposals."
            ]
          },
          {
            "Name": "WrongProposalWeight",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given weight bound for the proposal was too low."
            ]
          },
          {
            "Name": "WrongProposalLength",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given length bound for the proposal was too low."
            ]
          },
          {
            "Name": "PrimeAccountNotMember",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Prime account is not a member"
            ]
          }
        ],
        "Path": [
          "pallet_collective",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "276": {
        "TypeFields": [
          {
            "Name": "proposer",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "value",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "bond",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_treasury",
          "Proposal"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "277": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 272
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 4
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "278": {
        "TypeFields": [
          {
            "Name": "asset_kind",
            "TypeName": "AssetKind",
            "TypeId": 44
          },
          {
            "Name": "amount",
            "TypeName": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "beneficiary",
            "TypeName": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "valid_from",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "expire_at",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "status",
            "TypeName": "PaymentState<PaymentId>",
            "TypeId": 279
          }
        ],
        "Path": [
          "pallet_treasury",
          "SpendStatus"
        ],
        "TypeParams": [
          {
            "Name": "AssetKind",
            "TypeId": 44
          },
          {
            "Name": "AssetBalance",
            "TypeId": 6
          },
          {
            "Name": "Beneficiary",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PaymentId",
            "TypeId": 44
          }
        ],
        "TypeDef": "Composite"
      },
      "279": {
        "Variants": [
          {
            "Name": "Pending",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Attempted",
            "TypeFields": [
              {
                "Name": "id",
                "TypeName": "Id",
                "TypeId": 44
              }
            ],
            "Index": 1
          },
          {
            "Name": "Failed",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_treasury",
          "PaymentState"
        ],
        "TypeParams": [
          {
            "Name": "Id",
            "TypeId": 44
          }
        ],
        "TypeDef": "Variant"
      },
      "280": {
        "TypeFields": [
          {
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "sp_arithmetic",
          "per_things",
          "Permill"
        ],
        "TypeDef": "Composite"
      },
      "281": {
        "TypeFields": [
          {
            "TypeName": "[u8; 8]",
            "TypeId": 100
          }
        ],
        "Path": [
          "frame_support",
          "PalletId"
        ],
        "TypeDef": "Composite"
      },
      "282": {
        "Variants": [
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "No proposal, bounty or spend at that index."
            ]
          },
          {
            "Name": "TooManyApprovals",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Too many approvals in the queue."
            ]
          },
          {
            "Name": "InsufficientPermission",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The spend origin is valid but the amount it is allowed to spend is lower than the",
              "amount to be spent."
            ]
          },
          {
            "Name": "ProposalNotApproved",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal has not been approved."
            ]
          },
          {
            "Name": "FailedToConvertBalance",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The balance of the asset kind is not convertible to the balance of the native asset."
            ]
          },
          {
            "Name": "SpendExpired",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The spend has expired and cannot be claimed."
            ]
          },
          {
            "Name": "EarlyPayout",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The spend is not yet eligible for payout."
            ]
          },
          {
            "Name": "AlreadyAttempted",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The payment has already been attempted."
            ]
          },
          {
            "Name": "PayoutError",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "There was some issue with the mechanism of payment."
            ]
          },
          {
            "Name": "NotAttempted",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The payout was not yet attempted/claimed."
            ]
          },
          {
            "Name": "Inconclusive",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The payment has neither failed nor succeeded yet."
            ]
          }
        ],
        "Path": [
          "pallet_treasury",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the treasury pallet."
        ]
      },
      "283": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 285
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 284
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "284": {
        "TypeIds": [
          4,
          187,
          0
        ],
        "TypeDef": "Tuple"
      },
      "285": {
        "TypeId": 284,
        "TypeDef": "Sequence"
      },
      "286": {
        "TypeIds": [
          287,
          6
        ],
        "TypeDef": "Tuple"
      },
      "287": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 160
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "288": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": [
              {
                "TypeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                "TypeId": 289
              }
            ],
            "Index": 0
          },
          {
            "Name": "Finished",
            "TypeFields": [
              {
                "Name": "approved",
                "TypeName": "bool",
                "TypeId": 8
              },
              {
                "Name": "end",
                "TypeName": "BlockNumber",
                "TypeId": 4
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumInfo"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 187
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "289": {
        "TypeFields": [
          {
            "Name": "end",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "proposal",
            "TypeName": "Proposal",
            "TypeId": 187
          },
          {
            "Name": "threshold",
            "TypeName": "VoteThreshold",
            "TypeId": 48
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "tally",
            "TypeName": "Tally<Balance>",
            "TypeId": 290
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "ReferendumStatus"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Proposal",
            "TypeId": 187
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "290": {
        "TypeFields": [
          {
            "Name": "ayes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "nays",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "turnout",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Tally"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "291": {
        "Variants": [
          {
            "Name": "Direct",
            "TypeFields": [
              {
                "Name": "votes",
                "TypeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                "TypeId": 292
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 295
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 296
              }
            ],
            "Index": 0
          },
          {
            "Name": "Delegating",
            "TypeFields": [
              {
                "Name": "balance",
                "TypeName": "Balance",
                "TypeId": 6
              },
              {
                "Name": "target",
                "TypeName": "AccountId",
                "TypeId": 0
              },
              {
                "Name": "conviction",
                "TypeName": "Conviction",
                "TypeId": 190
              },
              {
                "Name": "delegations",
                "TypeName": "Delegations<Balance>",
                "TypeId": 295
              },
              {
                "Name": "prior",
                "TypeName": "PriorLock<BlockNumber, Balance>",
                "TypeId": 296
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "Voting"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "MaxVotes"
          }
        ],
        "TypeDef": "Variant"
      },
      "292": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 294
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 293
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "293": {
        "TypeIds": [
          4,
          49
        ],
        "TypeDef": "Tuple"
      },
      "294": {
        "TypeId": 293,
        "TypeDef": "Sequence"
      },
      "295": {
        "TypeFields": [
          {
            "Name": "votes",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "capital",
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "types",
          "Delegations"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "296": {
        "TypeFields": [
          {
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "TypeName": "Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "pallet_democracy",
          "vote",
          "PriorLock"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Composite"
      },
      "297": {
        "TypeIds": [
          187,
          48
        ],
        "TypeDef": "Tuple"
      },
      "298": {
        "TypeIds": [
          4,
          287
        ],
        "TypeDef": "Tuple"
      },
      "299": {
        "Variants": [
          {
            "Name": "ValueLow",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Value too low"
            ]
          },
          {
            "Name": "ProposalMissing",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proposal does not exist"
            ]
          },
          {
            "Name": "AlreadyCanceled",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Cannot cancel the same proposal twice"
            ]
          },
          {
            "Name": "DuplicateProposal",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Proposal already made"
            ]
          },
          {
            "Name": "ProposalBlacklisted",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Proposal still blacklisted"
            ]
          },
          {
            "Name": "NotSimpleMajority",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Next external proposal not simple majority"
            ]
          },
          {
            "Name": "InvalidHash",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Invalid hash"
            ]
          },
          {
            "Name": "NoProposal",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "No external proposal"
            ]
          },
          {
            "Name": "AlreadyVetoed",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Identity may not veto a proposal twice"
            ]
          },
          {
            "Name": "ReferendumInvalid",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Vote given for invalid referendum"
            ]
          },
          {
            "Name": "NoneWaiting",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "No proposals waiting"
            ]
          },
          {
            "Name": "NotVoter",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given account did not vote on the referendum."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The actor has no permission to conduct the action."
            ]
          },
          {
            "Name": "AlreadyDelegating",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The account is already delegating."
            ]
          },
          {
            "Name": "InsufficientFunds",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Too high a balance was provided that the account cannot afford."
            ]
          },
          {
            "Name": "NotDelegating",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The account is not currently delegating."
            ]
          },
          {
            "Name": "VotesExist",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The account currently has votes attached to it and the operation cannot succeed until",
              "these are removed, either through `unvote` or `reap_vote`."
            ]
          },
          {
            "Name": "InstantNotAllowed",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The instant referendum origin is currently disallowed."
            ]
          },
          {
            "Name": "Nonsense",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "Delegation to oneself makes no sense."
            ]
          },
          {
            "Name": "WrongUpperBound",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "Invalid upper bound."
            ]
          },
          {
            "Name": "MaxVotesReached",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "Maximum number of votes reached."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Maximum number of items reached."
            ]
          },
          {
            "Name": "VotingPeriodLow",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "Voting period too low"
            ]
          },
          {
            "Name": "PreimageNotExist",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The preimage does not exist."
            ]
          }
        ],
        "Path": [
          "pallet_democracy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "300": {
        "Variants": [
          {
            "Name": "RequireSudo",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Sender must be the Sudo account."
            ]
          }
        ],
        "Path": [
          "pallet_sudo",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the Sudo pallet."
        ]
      },
      "301": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 304
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 302
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "302": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 303
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 303
          }
        ],
        "TypeDef": "Variant"
      },
      "303": {
        "TypeFields": [
          {
            "Name": "maybe_id",
            "TypeName": "Option<Name>",
            "TypeId": 56
          },
          {
            "Name": "priority",
            "TypeName": "schedule::Priority",
            "TypeId": 2
          },
          {
            "Name": "call",
            "TypeName": "Call",
            "TypeId": 187
          },
          {
            "Name": "maybe_periodic",
            "TypeName": "Option<schedule::Period<BlockNumber>>",
            "TypeId": 194
          },
          {
            "Name": "origin",
            "TypeName": "PalletsOrigin",
            "TypeId": 242
          }
        ],
        "Path": [
          "pallet_scheduler",
          "Scheduled"
        ],
        "TypeParams": [
          {
            "Name": "Name",
            "TypeId": 1
          },
          {
            "Name": "Call",
            "TypeId": 187
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "PalletsOrigin",
            "TypeId": 242
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          }
        ],
        "TypeDef": "Composite"
      },
      "304": {
        "TypeId": 302,
        "TypeDef": "Sequence"
      },
      "305": {
        "TypeFields": [
          {
            "Name": "total_retries",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "remaining",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "period",
            "TypeName": "Period",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_scheduler",
          "RetryConfig"
        ],
        "TypeParams": [
          {
            "Name": "Period",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "306": {
        "Variants": [
          {
            "Name": "FailedToSchedule",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Failed to schedule a call"
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot find the scheduled call."
            ]
          },
          {
            "Name": "TargetBlockNumberInPast",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Given target block number is in the past."
            ]
          },
          {
            "Name": "RescheduleNoChange",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Reschedule failed because it does not change scheduled time."
            ]
          },
          {
            "Name": "Named",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Attempt to use a non-named function on a named task."
            ]
          }
        ],
        "Path": [
          "pallet_scheduler",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "307": {
        "TypeIds": [
          308,
          312
        ],
        "TypeDef": "Tuple"
      },
      "308": {
        "TypeFields": [
          {
            "Name": "judgements",
            "TypeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
            "TypeId": 309
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "info",
            "TypeName": "IdentityInfo",
            "TypeId": 196
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "Registration"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "MaxJudgements"
          },
          {
            "Name": "IdentityInfo",
            "TypeId": 196
          }
        ],
        "TypeDef": "Composite"
      },
      "309": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 311
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 310
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "310": {
        "TypeIds": [
          4,
          232
        ],
        "TypeDef": "Tuple"
      },
      "311": {
        "TypeId": 310,
        "TypeDef": "Sequence"
      },
      "312": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 58
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 58
          }
        ],
        "TypeDef": "Variant"
      },
      "313": {
        "TypeIds": [
          6,
          314
        ],
        "TypeDef": "Tuple"
      },
      "314": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 160
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "315": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 318
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 316
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "316": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 317
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 317
          }
        ],
        "TypeDef": "Variant"
      },
      "317": {
        "TypeFields": [
          {
            "Name": "account",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "fee",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "fields",
            "TypeName": "IdField",
            "TypeId": 12
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "RegistrarInfo"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "IdField",
            "TypeId": 12
          }
        ],
        "TypeDef": "Composite"
      },
      "318": {
        "TypeId": 316,
        "TypeDef": "Sequence"
      },
      "319": {
        "TypeFields": [
          {
            "Name": "suffix",
            "TypeName": "Suffix",
            "TypeId": 320
          },
          {
            "Name": "allocation",
            "TypeName": "Allocation",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_identity",
          "types",
          "AuthorityProperties"
        ],
        "TypeParams": [
          {
            "Name": "Suffix",
            "TypeId": 320
          }
        ],
        "TypeDef": "Composite"
      },
      "320": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "321": {
        "TypeIds": [
          0,
          4
        ],
        "TypeDef": "Tuple"
      },
      "322": {
        "Variants": [
          {
            "Name": "TooManySubAccounts",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many subs-accounts."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Account isn't found."
            ]
          },
          {
            "Name": "NotNamed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Account isn't named."
            ]
          },
          {
            "Name": "EmptyIndex",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Empty index."
            ]
          },
          {
            "Name": "FeeChanged",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Fee is changed."
            ]
          },
          {
            "Name": "NoIdentity",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "No identity found."
            ]
          },
          {
            "Name": "StickyJudgement",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Sticky judgement."
            ]
          },
          {
            "Name": "JudgementGiven",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Judgement given."
            ]
          },
          {
            "Name": "InvalidJudgement",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Invalid judgement."
            ]
          },
          {
            "Name": "InvalidIndex",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The index is invalid."
            ]
          },
          {
            "Name": "InvalidTarget",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The target is invalid."
            ]
          },
          {
            "Name": "TooManyRegistrars",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "Maximum amount of registrars reached. Cannot add any more."
            ]
          },
          {
            "Name": "AlreadyClaimed",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "Account ID is already named."
            ]
          },
          {
            "Name": "NotSub",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "Sender is not a sub-account."
            ]
          },
          {
            "Name": "NotOwned",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "Sub-account isn't owned by sender."
            ]
          },
          {
            "Name": "JudgementForDifferentIdentity",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The provided judgement was for a different identity."
            ]
          },
          {
            "Name": "JudgementPaymentFailed",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "Error that occurs when there is an issue paying for judgement."
            ]
          },
          {
            "Name": "InvalidSuffix",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "The provided suffix is too long."
            ]
          },
          {
            "Name": "NotUsernameAuthority",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The sender does not have permission to issue a username."
            ]
          },
          {
            "Name": "NoAllocation",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The authority cannot allocate any more usernames."
            ]
          },
          {
            "Name": "InvalidSignature",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The signature on a username was not valid."
            ]
          },
          {
            "Name": "RequiresSignature",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "Setting this username requires a signature, but none was provided."
            ]
          },
          {
            "Name": "InvalidUsername",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The username does not meet the requirements."
            ]
          },
          {
            "Name": "UsernameTaken",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The username is already taken."
            ]
          },
          {
            "Name": "NoUsername",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "The requested username does not exist."
            ]
          },
          {
            "Name": "NotExpired",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "The username cannot be forcefully removed because it can still be accepted."
            ]
          }
        ],
        "Path": [
          "pallet_identity",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "323": {
        "TypeIds": [
          324,
          6
        ],
        "TypeDef": "Tuple"
      },
      "324": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 326
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 325
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "325": {
        "TypeFields": [
          {
            "Name": "delegate",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "proxy_type",
            "TypeName": "ProxyType",
            "TypeId": 60
          },
          {
            "Name": "delay",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "ProxyDefinition"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "ProxyType",
            "TypeId": 60
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "326": {
        "TypeId": 325,
        "TypeDef": "Sequence"
      },
      "327": {
        "TypeIds": [
          328,
          6
        ],
        "TypeDef": "Tuple"
      },
      "328": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 330
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 329
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "329": {
        "TypeFields": [
          {
            "Name": "real",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "call_hash",
            "TypeName": "Hash",
            "TypeId": 13
          },
          {
            "Name": "height",
            "TypeName": "BlockNumber",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_proxy",
          "Announcement"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Hash",
            "TypeId": 13
          },
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "330": {
        "TypeId": 329,
        "TypeDef": "Sequence"
      },
      "331": {
        "Variants": [
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There are too many proxies registered or too many announcements pending."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Proxy registration not found."
            ]
          },
          {
            "Name": "NotProxy",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Sender is not a proxy of the account to be proxied."
            ]
          },
          {
            "Name": "Unproxyable",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "A call which is incompatible with the proxy type's filter was attempted."
            ]
          },
          {
            "Name": "Duplicate",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Account is already a proxy."
            ]
          },
          {
            "Name": "NoPermission",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Call may not be made by proxy because it may escalate its privileges."
            ]
          },
          {
            "Name": "Unannounced",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Announcement, if made at all, was made too recently."
            ]
          },
          {
            "Name": "NoSelfProxy",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot add self as proxy."
            ]
          }
        ],
        "Path": [
          "pallet_proxy",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "332": {
        "TypeIds": [
          0,
          1
        ],
        "TypeDef": "Tuple"
      },
      "333": {
        "TypeFields": [
          {
            "Name": "when",
            "TypeName": "Timepoint<BlockNumber>",
            "TypeId": 63
          },
          {
            "Name": "deposit",
            "TypeName": "Balance",
            "TypeId": 6
          },
          {
            "Name": "depositor",
            "TypeName": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "approvals",
            "TypeName": "BoundedVec<AccountId, MaxApprovals>",
            "TypeId": 334
          }
        ],
        "Path": [
          "pallet_multisig",
          "Multisig"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "Balance",
            "TypeId": 6
          },
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "MaxApprovals"
          }
        ],
        "TypeDef": "Composite"
      },
      "334": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 160
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "335": {
        "Variants": [
          {
            "Name": "MinimumThreshold",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Threshold must be 2 or greater."
            ]
          },
          {
            "Name": "AlreadyApproved",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Call is already approved by this signatory."
            ]
          },
          {
            "Name": "NoApprovalsNeeded",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Call doesn't need any (more) approvals."
            ]
          },
          {
            "Name": "TooFewSignatories",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "There are too few signatories in the list."
            ]
          },
          {
            "Name": "TooManySignatories",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There are too many signatories in the list."
            ]
          },
          {
            "Name": "SignatoriesOutOfOrder",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The signatories were provided out of order; they should be ordered."
            ]
          },
          {
            "Name": "SenderInSignatories",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The sender was contained in the other signatories; it shouldn't be."
            ]
          },
          {
            "Name": "NotFound",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Multisig operation not found when attempting to cancel."
            ]
          },
          {
            "Name": "NotOwner",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "Only the account that originally created the multisig is able to cancel it."
            ]
          },
          {
            "Name": "NoTimepoint",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "No timepoint was given, yet the multisig operation is already underway."
            ]
          },
          {
            "Name": "WrongTimepoint",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "A different timepoint was given to the multisig operation that is underway."
            ]
          },
          {
            "Name": "UnexpectedTimepoint",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A timepoint was given, yet no multisig operation is underway."
            ]
          },
          {
            "Name": "MaxWeightTooLow",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "The maximum weight information provided was too low."
            ]
          },
          {
            "Name": "AlreadyStored",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The data to be stored is already stored."
            ]
          }
        ],
        "Path": [
          "pallet_multisig",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "336": {
        "Variants": [
          {
            "Name": "TooManyCalls",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Too many calls batched."
            ]
          }
        ],
        "Path": [
          "pallet_utility",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "337": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "(AccountId, Balance)",
                "TypeId": 338
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "deposit",
                "TypeName": "Option<(AccountId, Balance)>",
                "TypeId": 339
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "len",
                "TypeName": "Option<u32>",
                "TypeId": 88
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "OldRequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "338": {
        "TypeIds": [
          0,
          6
        ],
        "TypeDef": "Tuple"
      },
      "339": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 338
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 338
          }
        ],
        "TypeDef": "Variant"
      },
      "340": {
        "Variants": [
          {
            "Name": "Unrequested",
            "TypeFields": [
              {
                "Name": "ticket",
                "TypeName": "(AccountId, Ticket)",
                "TypeId": 342
              },
              {
                "Name": "len",
                "TypeName": "u32",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Requested",
            "TypeFields": [
              {
                "Name": "maybe_ticket",
                "TypeName": "Option<(AccountId, Ticket)>",
                "TypeId": 343
              },
              {
                "Name": "count",
                "TypeName": "u32",
                "TypeId": 4
              },
              {
                "Name": "maybe_len",
                "TypeName": "Option<u32>",
                "TypeId": 88
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_preimage",
          "RequestStatus"
        ],
        "TypeParams": [
          {
            "Name": "AccountId",
            "TypeId": 0
          },
          {
            "Name": "Ticket",
            "TypeId": 341
          }
        ],
        "TypeDef": "Variant"
      },
      "341": {
        "TypeFields": [
          {
            "TypeName": "F::Balance",
            "TypeId": 6
          }
        ],
        "Path": [
          "frame_support",
          "traits",
          "tokens",
          "fungible",
          "HoldConsideration"
        ],
        "TypeParams": [
          {
            "Name": "A"
          },
          {
            "Name": "F"
          },
          {
            "Name": "R"
          },
          {
            "Name": "D"
          },
          {
            "Name": "Fp"
          }
        ],
        "TypeDef": "Composite"
      },
      "342": {
        "TypeIds": [
          0,
          341
        ],
        "TypeDef": "Tuple"
      },
      "343": {
        "Variants": [
          {
            "Name": "None",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Some",
            "TypeFields": [
              {
                "TypeId": 342
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "Option"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 342
          }
        ],
        "TypeDef": "Variant"
      },
      "344": {
        "TypeIds": [
          13,
          4
        ],
        "TypeDef": "Tuple"
      },
      "345": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 14
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 2
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "346": {
        "Variants": [
          {
            "Name": "TooBig",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "Preimage is too large to store on-chain."
            ]
          },
          {
            "Name": "AlreadyNoted",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Preimage has already been noted on-chain."
            ]
          },
          {
            "Name": "NotAuthorized",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The user is not authorized to perform this action."
            ]
          },
          {
            "Name": "NotNoted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The preimage cannot be removed since it has not yet been noted."
            ]
          },
          {
            "Name": "Requested",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "A preimage may not be removed when there are outstanding requests."
            ]
          },
          {
            "Name": "NotRequested",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The preimage request cannot be removed since no outstanding requests exist."
            ]
          },
          {
            "Name": "TooMany",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
            ]
          },
          {
            "Name": "TooFew",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Too few hashes were requested to be upgraded (i.e. zero)."
            ]
          }
        ],
        "Path": [
          "pallet_preimage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "347": {
        "Variants": [
          {
            "Name": "Ongoing",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "The operation cannot complete since some MBMs are ongoing."
            ]
          }
        ],
        "Path": [
          "pallet_migrations",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "348": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 160
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 0
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "349": {
        "TypeFields": [
          {
            "Name": "status",
            "TypeName": "AffiliatableStatus",
            "TypeId": 350
          },
          {
            "Name": "affiliates",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "pallet_ajuna_affiliates",
          "traits",
          "AffiliatorState"
        ],
        "TypeDef": "Composite"
      },
      "350": {
        "Variants": [
          {
            "Name": "NonAffiliatable",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Affiliatable",
            "TypeFields": [
              {
                "TypeName": "AffiliateId",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "Blocked",
            "TypeFields": null,
            "Index": 2
          }
        ],
        "Path": [
          "pallet_ajuna_affiliates",
          "traits",
          "AffiliatableStatus"
        ],
        "TypeDef": "Variant"
      },
      "351": {
        "Variants": [
          {
            "Name": "CannotAffiliateSelf",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "An account cannot affiliate itself"
            ]
          },
          {
            "Name": "TargetAccountIsNotAffiliatable",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The account is not allowed to receive affiliates"
            ]
          },
          {
            "Name": "AffiliateOthersOnlyWhiteListed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Only whitelisted accounts can affiliate for others"
            ]
          },
          {
            "Name": "AffiliatorNotFound",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "No account matches the provided affiliator identifier"
            ]
          },
          {
            "Name": "CannotAffiliateMoreAccounts",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "This account has reached the affiliate limit"
            ]
          },
          {
            "Name": "CannotAffiliateAlreadyAffiliatedAccount",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "This account has already been affiliated by another affiliator"
            ]
          },
          {
            "Name": "CannotAffiliateToExistingAffiliator",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "This account is already an affiliator, so it cannot affiliate to another account"
            ]
          },
          {
            "Name": "CannotAffiliateBlocked",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The account is blocked, so it cannot be affiliated to"
            ]
          },
          {
            "Name": "ExtrinsicAlreadyHasRule",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The given extrinsic identifier is already paired with an affiliate rule"
            ]
          },
          {
            "Name": "ExtrinsicHasNoRule",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given extrinsic identifier is not associated with any rule"
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_affiliates",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "352": {
        "Variants": [
          {
            "Name": "StartActivePhase",
            "TypeFields": [
              {
                "TypeName": "CategoryId",
                "TypeId": 4
              },
              {
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "SwitchToClaimPhase",
            "TypeFields": [
              {
                "TypeName": "CategoryId",
                "TypeId": 4
              },
              {
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "EndClaimPhase",
            "TypeFields": [
              {
                "TypeName": "CategoryId",
                "TypeId": 4
              },
              {
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_ajuna_tournament",
          "config",
          "TournamentScheduledAction"
        ],
        "TypeParams": [
          {
            "Name": "CategoryId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "353": {
        "Variants": [
          {
            "Name": "Inactive",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "ActivePeriod",
            "TypeFields": [
              {
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "ClaimPeriod",
            "TypeFields": [
              {
                "TypeName": "TournamentId",
                "TypeId": 4
              },
              {
                "TypeName": "Balance",
                "TypeId": 6
              }
            ],
            "Index": 2
          },
          {
            "Name": "Finished",
            "TypeFields": [
              {
                "TypeName": "TournamentId",
                "TypeId": 4
              }
            ],
            "Index": 3
          }
        ],
        "Path": [
          "pallet_ajuna_tournament",
          "config",
          "TournamentState"
        ],
        "TypeParams": [
          {
            "Name": "Balance",
            "TypeId": 6
          }
        ],
        "TypeDef": "Variant"
      },
      "354": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 365
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 355
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "355": {
        "TypeIds": [
          4,
          356
        ],
        "TypeDef": "Tuple"
      },
      "356": {
        "TypeFields": [
          {
            "Name": "id",
            "TypeName": "AssetId",
            "TypeId": 4
          },
          {
            "Name": "collection_id",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "genesis",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "variant",
            "TypeName": "AssetVariant<BlockNumber>",
            "TypeId": 357
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "Asset"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "357": {
        "Variants": [
          {
            "Name": "Player",
            "TypeFields": [
              {
                "TypeName": "PlayerVariant",
                "TypeId": 358
              }
            ],
            "Index": 0
          },
          {
            "Name": "Machine",
            "TypeFields": [
              {
                "TypeName": "MachineVariant",
                "TypeId": 361
              }
            ],
            "Index": 1
          },
          {
            "Name": "Seat",
            "TypeFields": [
              {
                "TypeName": "SeatVariant<BlockNumber>",
                "TypeId": 364
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "AssetVariant"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "358": {
        "Variants": [
          {
            "Name": "Human",
            "TypeFields": [
              {
                "TypeName": "HumanVariant",
                "TypeId": 359
              }
            ],
            "Index": 0
          },
          {
            "Name": "Tracker",
            "TypeFields": [
              {
                "TypeName": "TrackerVariant",
                "TypeId": 360
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "PlayerVariant"
        ],
        "TypeDef": "Variant"
      },
      "359": {
        "TypeFields": [
          {
            "Name": "seat_id",
            "TypeName": "Option<AssetId>",
            "TypeId": 88
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "HumanVariant"
        ],
        "TypeDef": "Composite"
      },
      "360": {
        "TypeFields": [
          {
            "Name": "slot_a_result",
            "TypeName": "u16",
            "TypeId": 61
          },
          {
            "Name": "slot_b_result",
            "TypeName": "u16",
            "TypeId": 61
          },
          {
            "Name": "slot_c_result",
            "TypeName": "u16",
            "TypeId": 61
          },
          {
            "Name": "slot_d_result",
            "TypeName": "u16",
            "TypeId": 61
          },
          {
            "Name": "last_reward",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "TrackerVariant"
        ],
        "TypeDef": "Composite"
      },
      "361": {
        "TypeFields": [
          {
            "Name": "seat_linked",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "seat_limit",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "value_1_factor",
            "TypeName": "TokenType",
            "TypeId": 73
          },
          {
            "Name": "value_1_mul",
            "TypeName": "MultiplierType",
            "TypeId": 74
          },
          {
            "Name": "value_2_factor",
            "TypeName": "TokenType",
            "TypeId": 73
          },
          {
            "Name": "value_2_mul",
            "TypeName": "MultiplierType",
            "TypeId": 74
          },
          {
            "Name": "value_3_factor",
            "TypeName": "TokenType",
            "TypeId": 73
          },
          {
            "Name": "value_3_mul",
            "TypeName": "MultiplierType",
            "TypeId": 74
          },
          {
            "Name": "sub_variant",
            "TypeName": "MachineSubVariant",
            "TypeId": 362
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "MachineVariant"
        ],
        "TypeDef": "Composite"
      },
      "362": {
        "Variants": [
          {
            "Name": "Bandit",
            "TypeFields": [
              {
                "TypeName": "BanditVariant",
                "TypeId": 363
              }
            ],
            "Index": 0
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "MachineSubVariant"
        ],
        "TypeDef": "Variant"
      },
      "363": {
        "TypeFields": [
          {
            "Name": "max_spins",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "jackpot",
            "TypeName": "u32",
            "TypeId": 4
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "BanditVariant"
        ],
        "TypeDef": "Composite"
      },
      "364": {
        "TypeFields": [
          {
            "Name": "rent_duration",
            "TypeName": "RentDuration",
            "TypeId": 75
          },
          {
            "Name": "player_fee",
            "TypeName": "u16",
            "TypeId": 61
          },
          {
            "Name": "player_grace_period",
            "TypeName": "u8",
            "TypeId": 2
          },
          {
            "Name": "reservation_start_block",
            "TypeName": "BlockNumber",
            "TypeId": 4
          },
          {
            "Name": "reservation_duration",
            "TypeName": "ReservationDuration",
            "TypeId": 76
          },
          {
            "Name": "last_action_block",
            "TypeName": "u16",
            "TypeId": 61
          },
          {
            "Name": "player_action_count",
            "TypeName": "u16",
            "TypeId": 61
          },
          {
            "Name": "player_id",
            "TypeName": "Option<AssetId>",
            "TypeId": 88
          },
          {
            "Name": "machine_id",
            "TypeName": "Option<AssetId>",
            "TypeId": 88
          }
        ],
        "Path": [
          "example_transition",
          "asset",
          "SeatVariant"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "365": {
        "TypeId": 355,
        "TypeDef": "Sequence"
      },
      "366": {
        "TypeIds": [
          4,
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "367": {
        "Variants": [
          {
            "Name": "Unclaimed",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Claimed",
            "TypeFields": [
              {
                "TypeName": "Account",
                "TypeId": 0
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_tournament",
          "config",
          "RewardClaimState"
        ],
        "TypeParams": [
          {
            "Name": "Account",
            "TypeId": 0
          }
        ],
        "TypeDef": "Variant"
      },
      "368": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Enabled",
            "TypeFields": [
              {
                "TypeName": "Percentage",
                "TypeId": 2
              },
              {
                "TypeName": "Option<EntityId>",
                "TypeId": 88
              }
            ],
            "Index": 1
          }
        ],
        "Path": [
          "pallet_ajuna_tournament",
          "config",
          "GoldenDuckState"
        ],
        "TypeParams": [
          {
            "Name": "EntityId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "369": {
        "Variants": [
          {
            "Name": "NoActiveTournamentForCategory",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There's no active tournament for the selected category."
            ]
          },
          {
            "Name": "CannotRemoveActiveTournament",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The current tournament is active, so it cannot be removed."
            ]
          },
          {
            "Name": "TournamentNotInClaimPeriod",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The current tournament is not in its reward claim period."
            ]
          },
          {
            "Name": "LatestTournamentAlreadyStarted",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "The latest tournament for the selected category identifier already started,",
              "so it cannot be removed anymore."
            ]
          },
          {
            "Name": "AnotherTournamentAlreadyActiveForCategory",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "There's already an active tournament for the selected category."
            ]
          },
          {
            "Name": "TournamentNotFound",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Cannot find tournament data for the selected (category, tournament)",
              "identifier combination."
            ]
          },
          {
            "Name": "TournamentActivationTooEarly",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Cannot activate a tournament before its configured block start,"
            ]
          },
          {
            "Name": "TournamentEndingTooEarly",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Cannot deactivate a tournament before its configured block end,"
            ]
          },
          {
            "Name": "FailedToRankEntity",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "An error occurred trying to rank an entity,"
            ]
          },
          {
            "Name": "InvalidTournamentConfig",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "Tournament configuration is invalid."
            ]
          },
          {
            "Name": "CannotScheduleTournament",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "Tournament schedule already in use by another tournament."
            ]
          },
          {
            "Name": "RankingCandidateNotInWinnerTable",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "A ranking duck candidate proposed by an account is not in the winner's table."
            ]
          },
          {
            "Name": "GoldenDuckCandidateNotWinner",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "A golden duck candidate proposed by an account is not the actual golden duck winner."
            ]
          },
          {
            "Name": "TournamentRewardAlreadyClaimed",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The reward for this tournament has already been claimed"
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_tournament",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "370": {
        "TypeFields": [
          {
            "Name": "season_id",
            "TypeName": "SeasonId",
            "TypeId": 4
          },
          {
            "Name": "early",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "active",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "early_ended",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_ajuna_seasons",
          "types",
          "SeasonStatus"
        ],
        "TypeParams": [
          {
            "Name": "SeasonId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "371": {
        "Variants": [
          {
            "Name": "EarlyStart",
            "TypeFields": [
              {
                "TypeName": "SeasonId",
                "TypeId": 4
              }
            ],
            "Index": 0
          },
          {
            "Name": "Start",
            "TypeFields": [
              {
                "TypeName": "SeasonId",
                "TypeId": 4
              }
            ],
            "Index": 1
          },
          {
            "Name": "End",
            "TypeFields": [
              {
                "TypeName": "SeasonId",
                "TypeId": 4
              }
            ],
            "Index": 2
          }
        ],
        "Path": [
          "pallet_ajuna_seasons",
          "types",
          "SeasonScheduledAction"
        ],
        "TypeParams": [
          {
            "Name": "SeasonId",
            "TypeId": 4
          }
        ],
        "TypeDef": "Variant"
      },
      "372": {
        "Variants": [
          {
            "Name": "NoActiveSeason",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There is currently no active season"
            ]
          },
          {
            "Name": "CannotScheduleSeasonWithoutConfig",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "Cannot set season schedule without season config first."
            ]
          },
          {
            "Name": "CannotScheduleSeasonIfPreviousSeasonIsInfinite",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "The previous season has no end, making it so that no",
              "new seasons can be added after it."
            ]
          },
          {
            "Name": "CannotScheduleInfiniteSeasonIfNextSeasonExists",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Cannot modify a season to be infinite if a season after it has already",
              "been scheduled."
            ]
          },
          {
            "Name": "SeasonStartBeforeCurrentBlock",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "The season's early start is before the current block."
            ]
          },
          {
            "Name": "SeasonStartOverlapsPreviousSeason",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "The season starts before the previous season starts."
            ]
          },
          {
            "Name": "SeasonStartOverlapsNextSeason",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "The season starts after the next season starts."
            ]
          },
          {
            "Name": "SeasonStartBeforeEarlyStart",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "The season's early start is earlier than its normal start."
            ]
          },
          {
            "Name": "SeasonEndBeforeStart",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "The season's start block is greater than its end block."
            ]
          },
          {
            "Name": "AssetNotRegistered",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "The given asset was not registered in any season."
            ]
          },
          {
            "Name": "InvalidSeason",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "The given season identifier has not been registered."
            ]
          },
          {
            "Name": "ScheduleSlotAlreadyInUse",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "The given season schedule update clashed with another season's schedule."
            ]
          }
        ],
        "Path": [
          "pallet_ajuna_seasons",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "The `Error` enum of this pallet."
        ]
      },
      "373": {
        "TypeIds": [
          4,
          94
        ],
        "TypeDef": "Tuple"
      },
      "374": {
        "TypeFields": [
          {
            "Name": "inventory_tier",
            "TypeName": "InventoryTier",
            "TypeId": 96
          },
          {
            "Name": "locks",
            "TypeName": "Locks",
            "TypeId": 375
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "player",
          "PlayerConfig"
        ],
        "TypeDef": "Composite"
      },
      "375": {
        "TypeFields": [
          {
            "Name": "asset_transfer",
            "TypeName": "bool",
            "TypeId": 8
          },
          {
            "Name": "asset_trade",
            "TypeName": "bool",
            "TypeId": 8
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "player",
          "Locks"
        ],
        "TypeDef": "Composite"
      },
      "376": {
        "TypeFields": [
          {
            "Name": "minted_amount",
            "TypeName": "Stat",
            "TypeId": 4
          },
          {
            "Name": "forged_amount",
            "TypeName": "Stat",
            "TypeId": 4
          },
          {
            "Name": "bought_amount",
            "TypeName": "Stat",
            "TypeId": 4
          },
          {
            "Name": "sold_amount",
            "TypeName": "Stat",
            "TypeId": 4
          },
          {
            "Name": "first_mint",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 88
          },
          {
            "Name": "latest_mint",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 88
          },
          {
            "Name": "first_forge",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 88
          },
          {
            "Name": "latest_forge",
            "TypeName": "Option<BlockNumber>",
            "TypeId": 88
          }
        ],
        "Path": [
          "pallet_sage",
          "config",
          "player",
          "PlayerStats"
        ],
        "TypeParams": [
          {
            "Name": "BlockNumber",
            "TypeId": 4
          }
        ],
        "TypeDef": "Composite"
      },
      "377": {
        "TypeIds": [
          0,
          356
        ],
        "TypeDef": "Tuple"
      },
      "378": {
        "TypeIds": [
          0,
          4,
          4
        ],
        "TypeDef": "Tuple"
      },
      "379": {
        "TypeIds": [
          4,
          268
        ],
        "TypeDef": "Tuple"
      },
      "380": {
        "Variants": [
          {
            "Name": "OrganizerNotSet",
            "TypeFields": null,
            "Index": 0,
            "Docs": [
              "There is no account set as the organizer"
            ]
          },
          {
            "Name": "UnknownAsset",
            "TypeFields": null,
            "Index": 1,
            "Docs": [
              "The asset doesn't exist."
            ]
          },
          {
            "Name": "TransferClosed",
            "TypeFields": null,
            "Index": 2,
            "Docs": [
              "Transfer is not available at the moment."
            ]
          },
          {
            "Name": "TradeClosed",
            "TypeFields": null,
            "Index": 3,
            "Docs": [
              "Trading is not available at the moment."
            ]
          },
          {
            "Name": "MaxOwnershipReached",
            "TypeFields": null,
            "Index": 4,
            "Docs": [
              "Max asset ownership reached."
            ]
          },
          {
            "Name": "MaxStorageTierReached",
            "TypeFields": null,
            "Index": 5,
            "Docs": [
              "Max asset storage tier reached."
            ]
          },
          {
            "Name": "AssetNotOwned",
            "TypeFields": null,
            "Index": 6,
            "Docs": [
              "Asset belongs to someone else."
            ]
          },
          {
            "Name": "AlreadyOwned",
            "TypeFields": null,
            "Index": 7,
            "Docs": [
              "Attempt to buy already owned asset."
            ]
          },
          {
            "Name": "AssetCannotBeTransfered",
            "TypeFields": null,
            "Index": 8,
            "Docs": [
              "This asset cannot be used in transfer."
            ]
          },
          {
            "Name": "AssetCannotBeTraded",
            "TypeFields": null,
            "Index": 9,
            "Docs": [
              "This asset cannot be used in trade."
            ]
          },
          {
            "Name": "AssetNotInTrade",
            "TypeFields": null,
            "Index": 10,
            "Docs": [
              "An asset selected for buying is not actually in sale."
            ]
          },
          {
            "Name": "CannotTransferAssetInTrade",
            "TypeFields": null,
            "Index": 11,
            "Docs": [
              "An asset listed for trade cannot be transferred to another account."
            ]
          },
          {
            "Name": "CannotLockAssetInTrade",
            "TypeFields": null,
            "Index": 12,
            "Docs": [
              "An asset in trade cannot be locked."
            ]
          },
          {
            "Name": "AssetLocked",
            "TypeFields": null,
            "Index": 13,
            "Docs": [
              "The asset is currently locked and cannot be used."
            ]
          },
          {
            "Name": "AssetLockedByOtherApplication",
            "TypeFields": null,
            "Index": 14,
            "Docs": [
              "The asset is locked by another application."
            ]
          },
          {
            "Name": "AssetNotLocked",
            "TypeFields": null,
            "Index": 15,
            "Docs": [
              "The asset is not currently locked and cannot be unlocked."
            ]
          },
          {
            "Name": "AssetsFundsTooLow",
            "TypeFields": null,
            "Index": 16,
            "Docs": [
              "The asset does not own enough funds for the operation.."
            ]
          },
          {
            "Name": "CannotTransferToSelf",
            "TypeFields": null,
            "Index": 17,
            "Docs": [
              "Tried transferring to his or her own account."
            ]
          },
          {
            "Name": "FeatureLocked",
            "TypeFields": null,
            "Index": 18,
            "Docs": [
              "The feature is locked for the current player"
            ]
          },
          {
            "Name": "FeatureUnavailableInSeason",
            "TypeFields": null,
            "Index": 19,
            "Docs": [
              "The feature trying to be unlocked is not available for the selected season"
            ]
          },
          {
            "Name": "FeatureLockedThroughPayment",
            "TypeFields": null,
            "Index": 20,
            "Docs": [
              "The feature trying to be unlocked cannot be unlocked with payment"
            ]
          },
          {
            "Name": "UnlockCriteriaNotFulfilled",
            "TypeFields": null,
            "Index": 21,
            "Docs": [
              "The feature trying to be unlocked has missing requirements to be fulfilled by",
              "the account trying to unlock it"
            ]
          },
          {
            "Name": "TooManyAssetsInTransition",
            "TypeFields": null,
            "Index": 22,
            "Docs": [
              "The amount of input assets in the transition is greater than 'MAX_ASSETS_IN_TRANSITION'"
            ]
          },
          {
            "Name": "TransitionRuleNotSatisfied",
            "TypeFields": null,
            "Index": 23,
            "Docs": [
              "The rule for a given transition was not satisfied."
            ]
          },
          {
            "Name": "TransferError",
            "TypeFields": null,
            "Index": 24,
            "Docs": [
              "A transfer error occurred inside the transition."
            ]
          },
          {
            "Name": "FeeError",
            "TypeFields": null,
            "Index": 25,
            "Docs": [
              "An error occurred during the fee payment of the ransition."
            ]
          },
          {
            "Name": "AssetLength",
            "TypeFields": null,
            "Index": 26,
            "Docs": [
              "Invalid number of assets for this transition."
            ]
          },
          {
            "Name": "AssetOwnership",
            "TypeFields": null,
            "Index": 27,
            "Docs": [
              "Asset Ownership error."
            ]
          },
          {
            "Name": "VoucherNotAllowed",
            "TypeFields": null,
            "Index": 28,
            "Docs": [
              "Voucher is not allowed for that transition."
            ]
          },
          {
            "Name": "Transition",
            "TypeFields": [
              {
                "Name": "code",
                "TypeName": "u8",
                "TypeId": 2
              }
            ],
            "Index": 29,
            "Docs": [
              "An error occurred during the state transition."
            ]
          }
        ],
        "Path": [
          "pallet_sage",
          "pallet",
          "Error"
        ],
        "TypeParams": [
          {
            "Name": "T"
          },
          {
            "Name": "I"
          }
        ],
        "TypeDef": "Variant",
        "Docs": [
          "Error for the pallet-sage."
        ]
      },
      "381": {
        "TypeFields": [
          {
            "TypeName": "Vec<T>",
            "TypeId": 102
          }
        ],
        "Path": [
          "bounded_collections",
          "bounded_vec",
          "BoundedVec"
        ],
        "TypeParams": [
          {
            "Name": "T",
            "TypeId": 13
          },
          {
            "Name": "S"
          }
        ],
        "TypeDef": "Composite"
      },
      "382": {
        "TypeFields": [
          {
            "TypeId": 14
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "unchecked_extrinsic",
          "UncheckedExtrinsic"
        ],
        "TypeParams": [
          {
            "Name": "Address",
            "TypeId": 157
          },
          {
            "Name": "Call",
            "TypeId": 182
          },
          {
            "Name": "Signature",
            "TypeId": 234
          },
          {
            "Name": "Extra",
            "TypeId": 383
          }
        ],
        "TypeDef": "Composite"
      },
      "383": {
        "TypeIds": [
          384,
          385,
          386,
          387,
          388,
          390,
          391,
          392,
          393
        ],
        "TypeDef": "Tuple"
      },
      "384": {
        "Path": [
          "frame_system",
          "extensions",
          "check_non_zero_sender",
          "CheckNonZeroSender"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "385": {
        "Path": [
          "frame_system",
          "extensions",
          "check_spec_version",
          "CheckSpecVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "386": {
        "Path": [
          "frame_system",
          "extensions",
          "check_tx_version",
          "CheckTxVersion"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "387": {
        "Path": [
          "frame_system",
          "extensions",
          "check_genesis",
          "CheckGenesis"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "388": {
        "TypeFields": [
          {
            "TypeName": "Era",
            "TypeId": 389
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_mortality",
          "CheckMortality"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "389": {
        "Variants": [
          {
            "Name": "Immortal",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Mortal1",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 1
          },
          {
            "Name": "Mortal2",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 2
          },
          {
            "Name": "Mortal3",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 3
          },
          {
            "Name": "Mortal4",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 4
          },
          {
            "Name": "Mortal5",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 5
          },
          {
            "Name": "Mortal6",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 6
          },
          {
            "Name": "Mortal7",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 7
          },
          {
            "Name": "Mortal8",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 8
          },
          {
            "Name": "Mortal9",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 9
          },
          {
            "Name": "Mortal10",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 10
          },
          {
            "Name": "Mortal11",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 11
          },
          {
            "Name": "Mortal12",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 12
          },
          {
            "Name": "Mortal13",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 13
          },
          {
            "Name": "Mortal14",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 14
          },
          {
            "Name": "Mortal15",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 15
          },
          {
            "Name": "Mortal16",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 16
          },
          {
            "Name": "Mortal17",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 17
          },
          {
            "Name": "Mortal18",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 18
          },
          {
            "Name": "Mortal19",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 19
          },
          {
            "Name": "Mortal20",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 20
          },
          {
            "Name": "Mortal21",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 21
          },
          {
            "Name": "Mortal22",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 22
          },
          {
            "Name": "Mortal23",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 23
          },
          {
            "Name": "Mortal24",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 24
          },
          {
            "Name": "Mortal25",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 25
          },
          {
            "Name": "Mortal26",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 26
          },
          {
            "Name": "Mortal27",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 27
          },
          {
            "Name": "Mortal28",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 28
          },
          {
            "Name": "Mortal29",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 29
          },
          {
            "Name": "Mortal30",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 30
          },
          {
            "Name": "Mortal31",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 31
          },
          {
            "Name": "Mortal32",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 32
          },
          {
            "Name": "Mortal33",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 33
          },
          {
            "Name": "Mortal34",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 34
          },
          {
            "Name": "Mortal35",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 35
          },
          {
            "Name": "Mortal36",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 36
          },
          {
            "Name": "Mortal37",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 37
          },
          {
            "Name": "Mortal38",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 38
          },
          {
            "Name": "Mortal39",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 39
          },
          {
            "Name": "Mortal40",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 40
          },
          {
            "Name": "Mortal41",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 41
          },
          {
            "Name": "Mortal42",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 42
          },
          {
            "Name": "Mortal43",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 43
          },
          {
            "Name": "Mortal44",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 44
          },
          {
            "Name": "Mortal45",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 45
          },
          {
            "Name": "Mortal46",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 46
          },
          {
            "Name": "Mortal47",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 47
          },
          {
            "Name": "Mortal48",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 48
          },
          {
            "Name": "Mortal49",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 49
          },
          {
            "Name": "Mortal50",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 50
          },
          {
            "Name": "Mortal51",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 51
          },
          {
            "Name": "Mortal52",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 52
          },
          {
            "Name": "Mortal53",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 53
          },
          {
            "Name": "Mortal54",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 54
          },
          {
            "Name": "Mortal55",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 55
          },
          {
            "Name": "Mortal56",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 56
          },
          {
            "Name": "Mortal57",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 57
          },
          {
            "Name": "Mortal58",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 58
          },
          {
            "Name": "Mortal59",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 59
          },
          {
            "Name": "Mortal60",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 60
          },
          {
            "Name": "Mortal61",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 61
          },
          {
            "Name": "Mortal62",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 62
          },
          {
            "Name": "Mortal63",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 63
          },
          {
            "Name": "Mortal64",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 64
          },
          {
            "Name": "Mortal65",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 65
          },
          {
            "Name": "Mortal66",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 66
          },
          {
            "Name": "Mortal67",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 67
          },
          {
            "Name": "Mortal68",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 68
          },
          {
            "Name": "Mortal69",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 69
          },
          {
            "Name": "Mortal70",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 70
          },
          {
            "Name": "Mortal71",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 71
          },
          {
            "Name": "Mortal72",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 72
          },
          {
            "Name": "Mortal73",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 73
          },
          {
            "Name": "Mortal74",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 74
          },
          {
            "Name": "Mortal75",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 75
          },
          {
            "Name": "Mortal76",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 76
          },
          {
            "Name": "Mortal77",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 77
          },
          {
            "Name": "Mortal78",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 78
          },
          {
            "Name": "Mortal79",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 79
          },
          {
            "Name": "Mortal80",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 80
          },
          {
            "Name": "Mortal81",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 81
          },
          {
            "Name": "Mortal82",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 82
          },
          {
            "Name": "Mortal83",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 83
          },
          {
            "Name": "Mortal84",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 84
          },
          {
            "Name": "Mortal85",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 85
          },
          {
            "Name": "Mortal86",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 86
          },
          {
            "Name": "Mortal87",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 87
          },
          {
            "Name": "Mortal88",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 88
          },
          {
            "Name": "Mortal89",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 89
          },
          {
            "Name": "Mortal90",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 90
          },
          {
            "Name": "Mortal91",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 91
          },
          {
            "Name": "Mortal92",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 92
          },
          {
            "Name": "Mortal93",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 93
          },
          {
            "Name": "Mortal94",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 94
          },
          {
            "Name": "Mortal95",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 95
          },
          {
            "Name": "Mortal96",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 96
          },
          {
            "Name": "Mortal97",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 97
          },
          {
            "Name": "Mortal98",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 98
          },
          {
            "Name": "Mortal99",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 99
          },
          {
            "Name": "Mortal100",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 100
          },
          {
            "Name": "Mortal101",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 101
          },
          {
            "Name": "Mortal102",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 102
          },
          {
            "Name": "Mortal103",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 103
          },
          {
            "Name": "Mortal104",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 104
          },
          {
            "Name": "Mortal105",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 105
          },
          {
            "Name": "Mortal106",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 106
          },
          {
            "Name": "Mortal107",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 107
          },
          {
            "Name": "Mortal108",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 108
          },
          {
            "Name": "Mortal109",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 109
          },
          {
            "Name": "Mortal110",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 110
          },
          {
            "Name": "Mortal111",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 111
          },
          {
            "Name": "Mortal112",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 112
          },
          {
            "Name": "Mortal113",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 113
          },
          {
            "Name": "Mortal114",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 114
          },
          {
            "Name": "Mortal115",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 115
          },
          {
            "Name": "Mortal116",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 116
          },
          {
            "Name": "Mortal117",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 117
          },
          {
            "Name": "Mortal118",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 118
          },
          {
            "Name": "Mortal119",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 119
          },
          {
            "Name": "Mortal120",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 120
          },
          {
            "Name": "Mortal121",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 121
          },
          {
            "Name": "Mortal122",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 122
          },
          {
            "Name": "Mortal123",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 123
          },
          {
            "Name": "Mortal124",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 124
          },
          {
            "Name": "Mortal125",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 125
          },
          {
            "Name": "Mortal126",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 126
          },
          {
            "Name": "Mortal127",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 127
          },
          {
            "Name": "Mortal128",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 128
          },
          {
            "Name": "Mortal129",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 129
          },
          {
            "Name": "Mortal130",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 130
          },
          {
            "Name": "Mortal131",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 131
          },
          {
            "Name": "Mortal132",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 132
          },
          {
            "Name": "Mortal133",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 133
          },
          {
            "Name": "Mortal134",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 134
          },
          {
            "Name": "Mortal135",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 135
          },
          {
            "Name": "Mortal136",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 136
          },
          {
            "Name": "Mortal137",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 137
          },
          {
            "Name": "Mortal138",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 138
          },
          {
            "Name": "Mortal139",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 139
          },
          {
            "Name": "Mortal140",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 140
          },
          {
            "Name": "Mortal141",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 141
          },
          {
            "Name": "Mortal142",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 142
          },
          {
            "Name": "Mortal143",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 143
          },
          {
            "Name": "Mortal144",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 144
          },
          {
            "Name": "Mortal145",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 145
          },
          {
            "Name": "Mortal146",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 146
          },
          {
            "Name": "Mortal147",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 147
          },
          {
            "Name": "Mortal148",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 148
          },
          {
            "Name": "Mortal149",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 149
          },
          {
            "Name": "Mortal150",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 150
          },
          {
            "Name": "Mortal151",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 151
          },
          {
            "Name": "Mortal152",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 152
          },
          {
            "Name": "Mortal153",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 153
          },
          {
            "Name": "Mortal154",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 154
          },
          {
            "Name": "Mortal155",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 155
          },
          {
            "Name": "Mortal156",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 156
          },
          {
            "Name": "Mortal157",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 157
          },
          {
            "Name": "Mortal158",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 158
          },
          {
            "Name": "Mortal159",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 159
          },
          {
            "Name": "Mortal160",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 160
          },
          {
            "Name": "Mortal161",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 161
          },
          {
            "Name": "Mortal162",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 162
          },
          {
            "Name": "Mortal163",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 163
          },
          {
            "Name": "Mortal164",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 164
          },
          {
            "Name": "Mortal165",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 165
          },
          {
            "Name": "Mortal166",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 166
          },
          {
            "Name": "Mortal167",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 167
          },
          {
            "Name": "Mortal168",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 168
          },
          {
            "Name": "Mortal169",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 169
          },
          {
            "Name": "Mortal170",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 170
          },
          {
            "Name": "Mortal171",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 171
          },
          {
            "Name": "Mortal172",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 172
          },
          {
            "Name": "Mortal173",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 173
          },
          {
            "Name": "Mortal174",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 174
          },
          {
            "Name": "Mortal175",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 175
          },
          {
            "Name": "Mortal176",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 176
          },
          {
            "Name": "Mortal177",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 177
          },
          {
            "Name": "Mortal178",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 178
          },
          {
            "Name": "Mortal179",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 179
          },
          {
            "Name": "Mortal180",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 180
          },
          {
            "Name": "Mortal181",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 181
          },
          {
            "Name": "Mortal182",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 182
          },
          {
            "Name": "Mortal183",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 183
          },
          {
            "Name": "Mortal184",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 184
          },
          {
            "Name": "Mortal185",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 185
          },
          {
            "Name": "Mortal186",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 186
          },
          {
            "Name": "Mortal187",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 187
          },
          {
            "Name": "Mortal188",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 188
          },
          {
            "Name": "Mortal189",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 189
          },
          {
            "Name": "Mortal190",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 190
          },
          {
            "Name": "Mortal191",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 191
          },
          {
            "Name": "Mortal192",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 192
          },
          {
            "Name": "Mortal193",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 193
          },
          {
            "Name": "Mortal194",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 194
          },
          {
            "Name": "Mortal195",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 195
          },
          {
            "Name": "Mortal196",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 196
          },
          {
            "Name": "Mortal197",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 197
          },
          {
            "Name": "Mortal198",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 198
          },
          {
            "Name": "Mortal199",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 199
          },
          {
            "Name": "Mortal200",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 200
          },
          {
            "Name": "Mortal201",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 201
          },
          {
            "Name": "Mortal202",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 202
          },
          {
            "Name": "Mortal203",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 203
          },
          {
            "Name": "Mortal204",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 204
          },
          {
            "Name": "Mortal205",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 205
          },
          {
            "Name": "Mortal206",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 206
          },
          {
            "Name": "Mortal207",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 207
          },
          {
            "Name": "Mortal208",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 208
          },
          {
            "Name": "Mortal209",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 209
          },
          {
            "Name": "Mortal210",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 210
          },
          {
            "Name": "Mortal211",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 211
          },
          {
            "Name": "Mortal212",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 212
          },
          {
            "Name": "Mortal213",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 213
          },
          {
            "Name": "Mortal214",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 214
          },
          {
            "Name": "Mortal215",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 215
          },
          {
            "Name": "Mortal216",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 216
          },
          {
            "Name": "Mortal217",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 217
          },
          {
            "Name": "Mortal218",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 218
          },
          {
            "Name": "Mortal219",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 219
          },
          {
            "Name": "Mortal220",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 220
          },
          {
            "Name": "Mortal221",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 221
          },
          {
            "Name": "Mortal222",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 222
          },
          {
            "Name": "Mortal223",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 223
          },
          {
            "Name": "Mortal224",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 224
          },
          {
            "Name": "Mortal225",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 225
          },
          {
            "Name": "Mortal226",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 226
          },
          {
            "Name": "Mortal227",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 227
          },
          {
            "Name": "Mortal228",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 228
          },
          {
            "Name": "Mortal229",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 229
          },
          {
            "Name": "Mortal230",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 230
          },
          {
            "Name": "Mortal231",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 231
          },
          {
            "Name": "Mortal232",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 232
          },
          {
            "Name": "Mortal233",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 233
          },
          {
            "Name": "Mortal234",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 234
          },
          {
            "Name": "Mortal235",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 235
          },
          {
            "Name": "Mortal236",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 236
          },
          {
            "Name": "Mortal237",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 237
          },
          {
            "Name": "Mortal238",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 238
          },
          {
            "Name": "Mortal239",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 239
          },
          {
            "Name": "Mortal240",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 240
          },
          {
            "Name": "Mortal241",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 241
          },
          {
            "Name": "Mortal242",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 242
          },
          {
            "Name": "Mortal243",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 243
          },
          {
            "Name": "Mortal244",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 244
          },
          {
            "Name": "Mortal245",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 245
          },
          {
            "Name": "Mortal246",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 246
          },
          {
            "Name": "Mortal247",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 247
          },
          {
            "Name": "Mortal248",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 248
          },
          {
            "Name": "Mortal249",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 249
          },
          {
            "Name": "Mortal250",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 250
          },
          {
            "Name": "Mortal251",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 251
          },
          {
            "Name": "Mortal252",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 252
          },
          {
            "Name": "Mortal253",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 253
          },
          {
            "Name": "Mortal254",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 254
          },
          {
            "Name": "Mortal255",
            "TypeFields": [
              {
                "TypeId": 2
              }
            ],
            "Index": 255
          }
        ],
        "Path": [
          "sp_runtime",
          "generic",
          "era",
          "Era"
        ],
        "TypeDef": "Variant"
      },
      "390": {
        "TypeFields": [
          {
            "TypeName": "T::Nonce",
            "TypeId": 105
          }
        ],
        "Path": [
          "frame_system",
          "extensions",
          "check_nonce",
          "CheckNonce"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "391": {
        "Path": [
          "frame_system",
          "extensions",
          "check_weight",
          "CheckWeight"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "392": {
        "TypeFields": [
          {
            "TypeName": "BalanceOf<T>",
            "TypeId": 41
          }
        ],
        "Path": [
          "pallet_transaction_payment",
          "ChargeTransactionPayment"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "393": {
        "TypeFields": [
          {
            "Name": "mode",
            "TypeName": "Mode",
            "TypeId": 394
          }
        ],
        "Path": [
          "frame_metadata_hash_extension",
          "CheckMetadataHash"
        ],
        "TypeParams": [
          {
            "Name": "T"
          }
        ],
        "TypeDef": "Composite"
      },
      "394": {
        "Variants": [
          {
            "Name": "Disabled",
            "TypeFields": null,
            "Index": 0
          },
          {
            "Name": "Enabled",
            "TypeFields": null,
            "Index": 1
          }
        ],
        "Path": [
          "frame_metadata_hash_extension",
          "Mode"
        ],
        "TypeDef": "Variant"
      },
      "395": {
        "Path": [
          "ajuna_solo_runtime",
          "Runtime"
        ],
        "TypeDef": "Composite"
      }
    },
    "Modules": {
      "0": {
        "Name": "System",
        "Storage": {
          "Prefix": "System",
          "Entries": [
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 3
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA=",
              "Docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "Name": "ExtrinsicCount",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "Name": "InherentsApplied",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether all inherents have been applied."
              ]
            },
            {
              "Name": "BlockWeight",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 9,
                "Item2": null
              },
              "Default": "AAAAAAAA",
              "Docs": [
                " The current weight for the block."
              ]
            },
            {
              "Name": "AllExtrinsicsLen",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "Name": "BlockHash",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 13
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "Name": "ExtrinsicData",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 14
                }
              },
              "Default": "AA==",
              "Docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "Name": "Number",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "Name": "ParentHash",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 13,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Hash of the previous block."
              ]
            },
            {
              "Name": "Digest",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 15,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "Name": "Events",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 19,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "Name": "EventCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "Name": "EventTopics",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 13,
                  "Value": 103
                }
              },
              "Default": "AA==",
              "Docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "Name": "LastRuntimeUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 104,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "Name": "UpgradedToU32RefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "Name": "UpgradedToTripleRefCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "Name": "ExecutionPhase",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 101,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The execution phase of the block."
              ]
            },
            {
              "Name": "AuthorizedUpgrade",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 107,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " `Some` if a code upgrade has been authorized."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 108
        },
        "Events": {
          "TypeId": 22
        },
        "Constants": [
          {
            "Name": "BlockWeights",
            "TypeId": 112,
            "Value": "Yk0YbAALACBKqdEBE///////////QkeHGQABCzD2p6cuARNmZmZmZmZmpgELAJj3Pl0BE/////////+/AQAAQkeHGQABCzB++hGjARNmZmZmZmZm5gELACBKqdEBE///////////AQcAiFJqdBMAAAAAAAAAQEJHhxkAAAAA",
            "Docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "Name": "BlockLength",
            "TypeId": 116,
            "Value": "AAA8AAAAUAAAAFAA",
            "Docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "Name": "BlockHashCount",
            "TypeId": 4,
            "Value": "YAkAAA==",
            "Docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "Name": "DbWeight",
            "TypeId": 118,
            "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
            "Docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "Name": "Version",
            "TypeId": 119,
            "Value": "KGFqdW5hLW5vZGUoYWp1bmEtbm9kZQEAAABkAAAAAQAAADDfastomQdgmwUAAAA345f8fJH15AIAAABA/jrUAfiVmgYAAADSvJiX7tCPFQMAAAD3iyeL5T9FTAIAAADdcY1cxTJi1AEAAACrPAVyKR/riwEAAADtmcWssl7t9QMAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAQAAADz/xTVq1JwWQMAAAD7xXe510fv1gEAAAABAAAAAQ==",
            "Docs": [
              " Get the chain's in-code version."
            ]
          },
          {
            "Name": "SS58Prefix",
            "TypeId": 61,
            "Value": "KgA=",
            "Docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 123
        },
        "Index": 0
      },
      "1": {
        "Name": "Timestamp",
        "Storage": {
          "Prefix": "Timestamp",
          "Entries": [
            {
              "Name": "Now",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current time for the current block."
              ]
            },
            {
              "Name": "DidUpdate",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Whether the timestamp has been updated in this block.",
                "",
                " This value is updated to `true` upon successful submission of a timestamp by a node.",
                " It is then checked at the end of each block execution in the `on_finalize` hook."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 124
        },
        "Events": null,
        "Constants": [
          {
            "Name": "MinimumPeriod",
            "TypeId": 12,
            "Value": "uAsAAAAAAAA=",
            "Docs": [
              " The minimum period between blocks.",
              "",
              " Be aware that this is different to the *expected* period that the block production",
              " apparatus provides. Your chosen consensus system will generally work with this to",
              " determine a sensible block time. For example, in the Aura pallet it will be double this",
              " period on default settings."
            ]
          }
        ],
        "Errors": null,
        "Index": 1
      },
      "2": {
        "Name": "Aura",
        "Storage": {
          "Prefix": "Aura",
          "Entries": [
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 125,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current authority set."
              ]
            },
            {
              "Name": "CurrentSlot",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 128,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [
          {
            "Name": "SlotDuration",
            "TypeId": 12,
            "Value": "cBcAAAAAAAA=",
            "Docs": [
              " The slot duration Aura should run with, expressed in milliseconds.",
              " The effective value of this type should not change while the chain is running.",
              "",
              " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."
            ]
          }
        ],
        "Errors": null,
        "Index": 2
      },
      "3": {
        "Name": "Grandpa",
        "Storage": {
          "Prefix": "Grandpa",
          "Entries": [
            {
              "Name": "State",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 129,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " State of the current authority set."
              ]
            },
            {
              "Name": "PendingChange",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 130,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Pending change: (signaled at, scheduled change)."
              ]
            },
            {
              "Name": "NextForced",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " next block number where we can force a change."
              ]
            },
            {
              "Name": "Stalled",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 55,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " `true` if we are currently stalled."
              ]
            },
            {
              "Name": "CurrentSetId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 12,
                "Item2": null
              },
              "Default": "AAAAAAAAAAA=",
              "Docs": [
                " The number of changes (both in terms of keys and underlying economic responsibilities)",
                " in the \"set\" of Grandpa validators from genesis."
              ]
            },
            {
              "Name": "SetIdSession",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 12,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                " members were responsible.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof must",
                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                " was the owner of a given key on a given session, and what the active set ID was",
                " during that session.",
                "",
                " TWOX-NOTE: `SetId` is not under user control."
              ]
            },
            {
              "Name": "Authorities",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 131,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current list of authorities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 132
        },
        "Events": {
          "TypeId": 31
        },
        "Constants": [
          {
            "Name": "MaxAuthorities",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " Max Authorities in use"
            ]
          },
          {
            "Name": "MaxNominators",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum number of nominators for each validator."
            ]
          },
          {
            "Name": "MaxSetIdSessionEntries",
            "TypeId": 12,
            "Value": "AAAAAAAAAAA=",
            "Docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "Errors": {
          "TypeId": 144
        },
        "Index": 3
      },
      "4": {
        "Name": "Balances",
        "Storage": {
          "Prefix": "Balances",
          "Entries": [
            {
              "Name": "TotalIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units issued in the system."
              ]
            },
            {
              "Name": "InactiveIssuance",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 5
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgA==",
              "Docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "Name": "Locks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 145
                }
              },
              "Default": "AA==",
              "Docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "Name": "Reserves",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 149
                }
              },
              "Default": "AA==",
              "Docs": [
                " Named reserves on some account balances.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "Name": "Holds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 152
                }
              },
              "Default": "AA==",
              "Docs": [
                " Holds on account balances."
              ]
            },
            {
              "Name": "Freezes",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 155
                }
              },
              "Default": "AA==",
              "Docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 156
        },
        "Events": {
          "TypeId": 35
        },
        "Constants": [
          {
            "Name": "ExistentialDeposit",
            "TypeId": 6,
            "Value": "oIYBAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "Name": "MaxLocks",
            "TypeId": 4,
            "Value": "QEIPAA==",
            "Docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation.",
              "",
              " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "Name": "MaxReserves",
            "TypeId": 4,
            "Value": "QEIPAA==",
            "Docs": [
              " The maximum number of named reserves that can exist on an account.",
              "",
              " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "Name": "MaxFreezes",
            "TypeId": 4,
            "Value": "AAAAAA==",
            "Docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "Errors": {
          "TypeId": 162
        },
        "Index": 4
      },
      "5": {
        "Name": "TransactionPayment",
        "Storage": {
          "Prefix": "TransactionPayment",
          "Entries": [
            {
              "Name": "NextFeeMultiplier",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 163,
                "Item2": null
              },
              "Default": "AABkp7O24A0AAAAAAAAAAA==",
              "Docs": []
            },
            {
              "Name": "StorageVersion",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 164,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": null,
        "Events": {
          "TypeId": 37
        },
        "Constants": [
          {
            "Name": "OperationalFeeMultiplier",
            "TypeId": 2,
            "Value": "BQ==",
            "Docs": [
              " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "Errors": null,
        "Index": 5
      },
      "7": {
        "Name": "Assets",
        "Storage": {
          "Prefix": "Assets",
          "Entries": [
            {
              "Name": "Asset",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 165
                }
              },
              "Default": "AA==",
              "Docs": [
                " Details of an asset."
              ]
            },
            {
              "Name": "Account",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 167,
                  "Value": 168
                }
              },
              "Default": "AA==",
              "Docs": [
                " The holdings of a specific account for a specific asset."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 171,
                  "Value": 172
                }
              },
              "Default": "AA==",
              "Docs": [
                " Approved balance transfers. First balance is the amount approved for transfer. Second",
                " is the amount of `T::Currency` reserved for storing this.",
                " First key is the asset ID, second key is the owner and third key is the delegate."
              ]
            },
            {
              "Name": "Metadata",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 173
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Metadata of an asset."
              ]
            },
            {
              "Name": "NextAssetId",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The asset ID enforced for the next asset creation, if any present. Otherwise, this storage",
                " item has no effect.",
                "",
                " This can be useful for setting up constraints for IDs of the new assets. For example, by",
                " providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an",
                " auto-increment model can be applied to all new asset IDs.",
                "",
                " The initial next asset ID can be set using the [`GenesisConfig`] or the",
                " [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 175
        },
        "Events": {
          "TypeId": 38
        },
        "Constants": [
          {
            "Name": "RemoveItemsLimit",
            "TypeId": 4,
            "Value": "6AMAAA==",
            "Docs": [
              " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
              "",
              " Must be configured to result in a weight that makes each call fit in a block."
            ]
          },
          {
            "Name": "AssetDeposit",
            "TypeId": 6,
            "Value": "/////////////////////w==",
            "Docs": [
              " The basic amount of funds that must be reserved for an asset."
            ]
          },
          {
            "Name": "AssetAccountDeposit",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved for a non-provider asset account to be",
              " maintained."
            ]
          },
          {
            "Name": "MetadataDepositBase",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The basic amount of funds that must be reserved when adding metadata to your asset."
            ]
          },
          {
            "Name": "MetadataDepositPerByte",
            "TypeId": 6,
            "Value": "AAAAAAAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The additional funds that must be reserved for the number of bytes you store in your",
              " metadata."
            ]
          },
          {
            "Name": "ApprovalDeposit",
            "TypeId": 6,
            "Value": "AIDGpH6NAwAAAAAAAAAAAA==",
            "Docs": [
              " The amount of funds that must be reserved when creating a new approval."
            ]
          },
          {
            "Name": "StringLimit",
            "TypeId": 4,
            "Value": "FAAAAA==",
            "Docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "Errors": {
          "TypeId": 176
        },
        "Index": 7
      },
      "8": {
        "Name": "Vesting",
        "Storage": {
          "Prefix": "Vesting",
          "Entries": [
            {
              "Name": "VestingSchedules",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 177
                }
              },
              "Default": "AA==",
              "Docs": [
                " Vesting schedules of an account.",
                "",
                " VestingSchedules: map AccountId => Vec<VestingSchedule>"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 179
        },
        "Events": {
          "TypeId": 39
        },
        "Constants": [
          {
            "Name": "MinVestedTransfer",
            "TypeId": 6,
            "Value": "AOH1BQAAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 180
        },
        "Index": 8
      },
      "9": {
        "Name": "Council",
        "Storage": {
          "Prefix": "Council",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 181,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 182
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 273
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 160,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of abstentions."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 183
        },
        "Events": {
          "TypeId": 42
        },
        "Constants": [
          {
            "Name": "MaxProposalWeight",
            "TypeId": 10,
            "Value": "BwAQpdToE/////////9/",
            "Docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 274
        },
        "Index": 9
      },
      "10": {
        "Name": "TechnicalCommittee",
        "Storage": {
          "Prefix": "TechnicalCommittee",
          "Entries": [
            {
              "Name": "Proposals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 181,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The hashes of the active proposals."
              ]
            },
            {
              "Name": "ProposalOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 182
                }
              },
              "Default": "AA==",
              "Docs": [
                " Actual proposal for a given hash, if it's current."
              ]
            },
            {
              "Name": "Voting",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 273
                }
              },
              "Default": "AA==",
              "Docs": [
                " Votes on a given proposal, if it is ongoing."
              ]
            },
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Proposals so far."
              ]
            },
            {
              "Name": "Members",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 160,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The current members of the collective. This is stored sorted (just by value)."
              ]
            },
            {
              "Name": "Prime",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The prime member that helps determine the default vote behavior in case of abstentions."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 184
        },
        "Events": {
          "TypeId": 45
        },
        "Constants": [
          {
            "Name": "MaxProposalWeight",
            "TypeId": 10,
            "Value": "BwAQpdToE/////////9/",
            "Docs": [
              " The maximum weight of a dispatch call that can be proposed and executed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 275
        },
        "Index": 10
      },
      "11": {
        "Name": "Treasury",
        "Storage": {
          "Prefix": "Treasury",
          "Entries": [
            {
              "Name": "ProposalCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "Name": "Proposals",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 276
                }
              },
              "Default": "AA==",
              "Docs": [
                " Proposals that have been made."
              ]
            },
            {
              "Name": "Deactivated",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 6,
                "Item2": null
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAA==",
              "Docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "Name": "Approvals",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 277,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            },
            {
              "Name": "SpendCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The count of spends that have been made."
              ]
            },
            {
              "Name": "Spends",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 278
                }
              },
              "Default": "AA==",
              "Docs": [
                " Spends that have been approved and being processed."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 185
        },
        "Events": {
          "TypeId": 46
        },
        "Constants": [
          {
            "Name": "SpendPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " Period between successive spends."
            ]
          },
          {
            "Name": "Burn",
            "TypeId": 280,
            "Value": "AAAAAA==",
            "Docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "Name": "PalletId",
            "TypeId": 281,
            "Value": "YWovdHJzcnk=",
            "Docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "Name": "MaxApprovals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          },
          {
            "Name": "PayoutPeriod",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " The period during which an approved treasury spend has to be claimed."
            ]
          }
        ],
        "Errors": {
          "TypeId": 282
        },
        "Index": 11
      },
      "12": {
        "Name": "Democracy",
        "Storage": {
          "Prefix": "Democracy",
          "Entries": [
            {
              "Name": "PublicPropCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The number of (public) proposals that have been made so far."
              ]
            },
            {
              "Name": "PublicProps",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 283,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The public proposals. Unsorted. The second item is the proposal."
              ]
            },
            {
              "Name": "DepositOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 286
                }
              },
              "Default": "AA==",
              "Docs": [
                " Those who have locked a deposit.",
                "",
                " TWOX-NOTE: Safe, as increasing integer keys are safe."
              ]
            },
            {
              "Name": "ReferendumCount",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "Name": "LowestUnbaked",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": [
                " The lowest referendum index representing an unbaked referendum. Equal to",
                " `ReferendumCount` if there isn't a unbaked referendum."
              ]
            },
            {
              "Name": "ReferendumInfoOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 288
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information concerning any given referendum.",
                "",
                " TWOX-NOTE: SAFE as indexes are not under an attacker���s control."
              ]
            },
            {
              "Name": "VotingOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 291
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
              "Docs": [
                " All votes for a particular voter. We store the balance for the number of votes that we",
                " have recorded. The second item is the total amount of delegations, that will be added.",
                "",
                " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
              ]
            },
            {
              "Name": "LastTabledWasExternal",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 8,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " True if the last referendum tabled was submitted externally. False if it was a public",
                " proposal."
              ]
            },
            {
              "Name": "NextExternal",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 297,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The referendum to be tabled whenever it would be valid to table an external proposal.",
                " This happens when a referendum needs to be tabled and one of two conditions are met:",
                " - `LastTabledWasExternal` is `false`; or",
                " - `PublicProps` is empty."
              ]
            },
            {
              "Name": "Blacklist",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 298
                }
              },
              "Default": "AA==",
              "Docs": [
                " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                " (until when it may not be resubmitted) and who vetoed it."
              ]
            },
            {
              "Name": "Cancellations",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 8
                }
              },
              "Default": "AA==",
              "Docs": [
                " Record of all proposals that have been subject to emergency cancellation."
              ]
            },
            {
              "Name": "MetadataOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 51,
                  "Value": 13
                }
              },
              "Default": "AA==",
              "Docs": [
                " General information concerning any proposal or referendum.",
                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 186
        },
        "Events": {
          "TypeId": 47
        },
        "Constants": [
          {
            "Name": "EnactmentPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The period between a proposal being approved and enacted.",
              "",
              " It should generally be a little more than the unstake period to ensure that",
              " voting stakers have an opportunity to remove themselves from the system in the case",
              " where they are on the losing side of a vote."
            ]
          },
          {
            "Name": "LaunchPeriod",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " How often (in blocks) new public referenda are launched."
            ]
          },
          {
            "Name": "VotingPeriod",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " How often (in blocks) to check for new votes."
            ]
          },
          {
            "Name": "VoteLockingPeriod",
            "TypeId": 4,
            "Value": "wIkBAA==",
            "Docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          },
          {
            "Name": "MinimumDeposit",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "Name": "InstantAllowed",
            "TypeId": 8,
            "Value": "AQ==",
            "Docs": [
              " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
              " want to set this permanently to `false`, others may want to condition it on things such",
              " as an upgrade having happened recently."
            ]
          },
          {
            "Name": "FastTrackVotingPeriod",
            "TypeId": 4,
            "Value": "wKgAAA==",
            "Docs": [
              " Minimum voting period allowed for a fast-track referendum."
            ]
          },
          {
            "Name": "CooloffPeriod",
            "TypeId": 4,
            "Value": "ACcGAA==",
            "Docs": [
              " Period in blocks where an external proposal may not be re-submitted after being vetoed."
            ]
          },
          {
            "Name": "MaxVotes",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of votes for an account.",
              "",
              " Also used to compute weight, an overly big value can",
              " lead to extrinsic with very big weight: see `delegate` for instance."
            ]
          },
          {
            "Name": "MaxProposals",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of public proposals that can exist at any time."
            ]
          },
          {
            "Name": "MaxDeposits",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of deposits a public proposal may have at any time."
            ]
          },
          {
            "Name": "MaxBlacklisted",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The maximum number of items which can be blacklisted."
            ]
          }
        ],
        "Errors": {
          "TypeId": 299
        },
        "Index": 12
      },
      "13": {
        "Name": "Sudo",
        "Storage": {
          "Prefix": "Sudo",
          "Entries": [
            {
              "Name": "Key",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The `AccountId` of the sudo key."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 192
        },
        "Events": {
          "TypeId": 52
        },
        "Constants": [],
        "Errors": {
          "TypeId": 300
        },
        "Index": 13
      },
      "14": {
        "Name": "Scheduler",
        "Storage": {
          "Prefix": "Scheduler",
          "Entries": [
            {
              "Name": "IncompleteSince",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "Agenda",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 4,
                  "Value": 301
                }
              },
              "Default": "AA==",
              "Docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "Name": "Retries",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 55,
                  "Value": 305
                }
              },
              "Default": "AA==",
              "Docs": [
                " Retry configurations for items to be executed, indexed by task address."
              ]
            },
            {
              "Name": "Lookup",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 1,
                  "Value": 55
                }
              },
              "Default": "AA==",
              "Docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 193
        },
        "Events": {
          "TypeId": 54
        },
        "Constants": [
          {
            "Name": "MaximumWeight",
            "TypeId": 10,
            "Value": "CwCAbod0ARPMzMzMzMzMzA==",
            "Docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "Name": "MaxScheduledPerBlock",
            "TypeId": 4,
            "Value": "MgAAAA==",
            "Docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "Errors": {
          "TypeId": 306
        },
        "Index": 14
      },
      "15": {
        "Name": "Identity",
        "Storage": {
          "Prefix": "Identity",
          "Entries": [
            {
              "Name": "IdentityOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 307
                }
              },
              "Default": "AA==",
              "Docs": [
                " Information that is pertinent to identify the entity behind an account. First item is the",
                " registration, second is the account's primary username.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "SuperOf",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 0,
                  "Value": 231
                }
              },
              "Default": "AA==",
              "Docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "Name": "SubsOf",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 313
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ��� `AccountId` is a secure hash."
              ]
            },
            {
              "Name": "Registrars",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 315,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            },
            {
              "Name": "UsernameAuthorities",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 319
                }
              },
              "Default": "AA==",
              "Docs": [
                " A map of the accounts who are authorized to grant usernames."
              ]
            },
            {
              "Name": "AccountOfUsername",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 58,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": [
                " Reverse lookup from `username` to the `AccountId` that has registered it. The value should",
                " be a key in the `IdentityOf` map, but it may not if the user has cleared their identity.",
                "",
                " Multiple usernames may map to the same `AccountId`, but `IdentityOf` will only map to one",
                " primary username."
              ]
            },
            {
              "Name": "PendingUsernames",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 58,
                  "Value": 321
                }
              },
              "Default": "AA==",
              "Docs": [
                " Usernames that an authority has granted, but that the account controller has not confirmed",
                " that they want it. Used primarily in cases where the `AccountId` cannot provide a signature",
                " because they are a pure proxy, multisig, etc. In order to confirm it, they should call",
                " [`Call::accept_username`].",
                "",
                " First tuple item is the account and second is the acceptance deadline."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 195
        },
        "Events": {
          "TypeId": 57
        },
        "Constants": [
          {
            "Name": "BasicDeposit",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered identity."
            ]
          },
          {
            "Name": "ByteDeposit",
            "TypeId": 6,
            "Value": "AOh2SBcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit per encoded byte for a registered identity."
            ]
          },
          {
            "Name": "SubAccountDeposit",
            "TypeId": 6,
            "Value": "ALhk2UUAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "Name": "MaxSubAccounts",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "Name": "MaxRegistrars",
            "TypeId": 4,
            "Value": "AwAAAA==",
            "Docs": [
              " Maximum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          },
          {
            "Name": "PendingUsernameExpiration",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " The number of blocks within which a username grant must be accepted."
            ]
          },
          {
            "Name": "MaxSuffixLength",
            "TypeId": 4,
            "Value": "BwAAAA==",
            "Docs": [
              " The maximum length of a suffix."
            ]
          },
          {
            "Name": "MaxUsernameLength",
            "TypeId": 4,
            "Value": "IAAAAA==",
            "Docs": [
              " The maximum length of a username, including its suffix and any system-added delimiters."
            ]
          }
        ],
        "Errors": {
          "TypeId": 322
        },
        "Index": 15
      },
      "16": {
        "Name": "Proxy",
        "Storage": {
          "Prefix": "Proxy",
          "Entries": [
            {
              "Name": "Proxies",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 323
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "Name": "Announcements",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 0,
                  "Value": 327
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 236
        },
        "Events": {
          "TypeId": 59
        },
        "Constants": [
          {
            "Name": "ProxyDepositBase",
            "TypeId": 6,
            "Value": "ABCl1OgAAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "ProxyDepositFactor",
            "TypeId": 6,
            "Value": "AIhSanQAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "Name": "MaxProxies",
            "TypeId": 4,
            "Value": "BQAAAA==",
            "Docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "Name": "MaxPending",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "Name": "AnnouncementDepositBase",
            "TypeId": 6,
            "Value": "ANDtkC4AAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "Name": "AnnouncementDepositFactor",
            "TypeId": 6,
            "Value": "AOh2SBcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "Errors": {
          "TypeId": 331
        },
        "Index": 16
      },
      "17": {
        "Name": "Multisig",
        "Storage": {
          "Prefix": "Multisig",
          "Entries": [
            {
              "Name": "Multisigs",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 332,
                  "Value": 333
                }
              },
              "Default": "AA==",
              "Docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 238
        },
        "Events": {
          "TypeId": 62
        },
        "Constants": [
          {
            "Name": "DepositBase",
            "TypeId": 6,
            "Value": "ALAaGkUSAAAAAAAAAAAAAA==",
            "Docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "Name": "DepositFactor",
            "TypeId": 6,
            "Value": "AEBZcwcAAAAAAAAAAAAAAA==",
            "Docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "Name": "MaxSignatories",
            "TypeId": 4,
            "Value": "CgAAAA==",
            "Docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "Errors": {
          "TypeId": 335
        },
        "Index": 17
      },
      "18": {
        "Name": "Utility",
        "Storage": null,
        "Calls": {
          "TypeId": 240
        },
        "Events": {
          "TypeId": 64
        },
        "Constants": [
          {
            "Name": "batched_calls_limit",
            "TypeId": 4,
            "Value": "qioAAA==",
            "Docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "Errors": {
          "TypeId": 336
        },
        "Index": 18
      },
      "19": {
        "Name": "Preimage",
        "Storage": {
          "Prefix": "Preimage",
          "Entries": [
            {
              "Name": "StatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 337
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "RequestStatusFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 13,
                  "Value": 340
                }
              },
              "Default": "AA==",
              "Docs": [
                " The request status of a given hash."
              ]
            },
            {
              "Name": "PreimageFor",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 344,
                  "Value": 345
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 246
        },
        "Events": {
          "TypeId": 65
        },
        "Constants": [],
        "Errors": {
          "TypeId": 346
        },
        "Index": 19
      },
      "20": {
        "Name": "Migrations",
        "Storage": {
          "Prefix": "Migrations",
          "Entries": [
            {
              "Name": "Cursor",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 249,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " The currently active migration to run and its cursor.",
                "",
                " `None` indicates that no migration is running."
              ]
            },
            {
              "Name": "Historic",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Twox64Concat"
                  ],
                  "Key": 254,
                  "Value": 44
                }
              },
              "Default": "AA==",
              "Docs": [
                " Set of all successfully executed migrations.",
                "",
                " This is used as blacklist, to not re-execute migrations that have not been removed from the",
                " codebase yet. Governance can regularly clear this out via `clear_historic`."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 247
        },
        "Events": {
          "TypeId": 66
        },
        "Constants": [
          {
            "Name": "CursorMaxLen",
            "TypeId": 4,
            "Value": "AAABAA==",
            "Docs": [
              " The maximal length of an encoded cursor.",
              "",
              " A good default needs to selected such that no migration will ever have a cursor with MEL",
              " above this limit. This is statically checked in `integrity_test`."
            ]
          },
          {
            "Name": "IdentifierMaxLen",
            "TypeId": 4,
            "Value": "AAEAAA==",
            "Docs": [
              " The maximal length of an encoded identifier.",
              "",
              " A good default needs to selected such that no migration will ever have an identifier",
              " with MEL above this limit. This is statically checked in `integrity_test`."
            ]
          }
        ],
        "Errors": {
          "TypeId": 347
        },
        "Index": 20
      },
      "32": {
        "Name": "CasinoJamAffiliates",
        "Storage": {
          "Prefix": "CasinoJamAffiliates",
          "Entries": [
            {
              "Name": "Affiliatees",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 0,
                  "Value": 348
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores the affiliated accounts from the perspectives of the affiliatee"
              ]
            },
            {
              "Name": "Affiliators",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 0,
                  "Value": 349
                }
              },
              "Default": "AAAAAAA=",
              "Docs": [
                " Store affiliators aka accounts that have affilatees and earn rewards from them.",
                " Such accounts can't be affiliatees anymore."
              ]
            },
            {
              "Name": "AffiliateRules",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 69,
                  "Value": 257
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores the affiliate logic rules"
              ]
            },
            {
              "Name": "NextAffiliateId",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "AffiliateIdMapping",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat"
                  ],
                  "Key": 4,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 256
        },
        "Events": {
          "TypeId": 68
        },
        "Constants": [
          {
            "Name": "WhitelistKey",
            "TypeId": 100,
            "Value": "AAAAAAAAAAA=",
            "Docs": []
          },
          {
            "Name": "AffiliateMaxLevel",
            "TypeId": 4,
            "Value": "AgAAAA==",
            "Docs": [
              " The maximum depth of the affiliate relation chain,"
            ]
          }
        ],
        "Errors": {
          "TypeId": 351
        },
        "Index": 32
      },
      "33": {
        "Name": "CasinoJamTournament",
        "Storage": {
          "Prefix": "CasinoJamTournament",
          "Entries": [
            {
              "Name": "TournamentSchedules",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 352
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "TreasuryAccountsCache",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 0
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "NextTournamentIds",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AAAAAA==",
              "Docs": []
            },
            {
              "Name": "Tournaments",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 55,
                  "Value": 259
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "ActiveTournaments",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 353
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "TournamentRankings",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 55,
                  "Value": 354
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "TournamentRewardClaims",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 366,
                  "Value": 367
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "GoldenDucks",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 55,
                  "Value": 368
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "GoldenDuckRewardClaims",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 55,
                  "Value": 367
                }
              },
              "Default": "AA==",
              "Docs": []
            }
          ]
        },
        "Calls": {
          "TypeId": 258
        },
        "Events": {
          "TypeId": 77
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 281,
            "Value": "YWovdHJtdDE=",
            "Docs": []
          },
          {
            "Name": "MinimumTournamentPhaseDuration",
            "TypeId": 4,
            "Value": "ZAAAAA==",
            "Docs": [
              " Minimum duration of the tournament active and claim periods in blocks."
            ]
          }
        ],
        "Errors": {
          "TypeId": 369
        },
        "Index": 33
      },
      "34": {
        "Name": "CasinoJamSeasons",
        "Storage": {
          "Prefix": "CasinoJamSeasons",
          "Entries": [
            {
              "Name": "CurrentSeasonStatus",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 370,
                "Item2": null
              },
              "Default": "AQA=",
              "Docs": []
            },
            {
              "Name": "LatestSeason",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 4,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Latest SeasonId created through 'update_season'"
              ]
            },
            {
              "Name": "FinishedSeasons",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 44
                }
              },
              "Default": "",
              "Docs": []
            },
            {
              "Name": "NextSeasonChain",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Use to represent a linked list of SeasonId. All entries will have a",
                " value indicating the next season id to them except the latest season added",
                " which will not have a value for it."
              ]
            },
            {
              "Name": "PrevSeasonChain",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Use to represent a linked list of SeasonId. All entries will have a",
                " value indicating the previous season id to them except the firsts season added",
                " which will not have a value for it."
              ]
            },
            {
              "Name": "Seasons",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 80
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for the seasons."
              ]
            },
            {
              "Name": "SeasonMetadatas",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 83
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for the season's metadata."
              ]
            },
            {
              "Name": "SeasonSchedules",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 87
                }
              },
              "Default": "AA==",
              "Docs": [
                " Storage for the season's schedules."
              ]
            },
            {
              "Name": "SeasonScheduledActions",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 371
                }
              },
              "Default": "AA==",
              "Docs": []
            },
            {
              "Name": "AssetSeasonRegister",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 4
                }
              },
              "Default": "AA==",
              "Docs": [
                " Stores the assets season id registration."
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 265
        },
        "Events": {
          "TypeId": 78
        },
        "Constants": [],
        "Errors": {
          "TypeId": 372
        },
        "Index": 34
      },
      "40": {
        "Name": "CasinoJamSage",
        "Storage": {
          "Prefix": "CasinoJamSage",
          "Entries": [
            {
              "Name": "Organizer",
              "Modifier": "Optional",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 0,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Organizer of the game. Essentially the administrator with certain privileges."
              ]
            },
            {
              "Name": "GeneralConfigStore",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 90,
                "Item2": null
              },
              "Default": "AAA=",
              "Docs": [
                " Tracks global configuration values that can be changed by the organizer only."
              ]
            },
            {
              "Name": "TransitionConfigStore",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 93,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Configuration values specific to the transition being used."
              ]
            },
            {
              "Name": "SeasonUnlocks",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 373,
                  "Value": 95
                }
              },
              "Default": "AA==",
              "Docs": [
                " Some features need to be unlocked fulfilling certain criteria.",
                "",
                " This storage keeps track of the `UnlockRule` that needs to be satisfied to unlock the",
                " feature. If there is no unlock rule, the feature can't be unlocked in that season."
              ]
            },
            {
              "Name": "PlayerSeasonConfigs",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 321,
                  "Value": 374
                }
              },
              "Default": "GQAA",
              "Docs": [
                " Tracks player configs per season. This can be mutated by unlocking certain privileges, e.g.",
                " upgrading the storage inventory size."
              ]
            },
            {
              "Name": "PlayerSeasonStats",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 321,
                  "Value": 376
                }
              },
              "Default": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
              "Docs": [
                " Tracks player stats per season."
              ]
            },
            {
              "Name": "Assets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 377
                }
              },
              "Default": "AA==",
              "Docs": [
                " Maps the `AssetId` to its owner and the asset."
              ]
            },
            {
              "Name": "AssetOwners",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity",
                    "Identity"
                  ],
                  "Key": 378,
                  "Value": 44
                }
              },
              "Default": "",
              "Docs": [
                " Keeps track of the assets owned by an account and in which season the asset was created.",
                "",
                " We mostly do ownership checks on this in the runtime. Whereas the frontends want to display",
                " a list. This has to be queried with a `state.getKeysPaged` followed by a `state.getStorage`",
                " call. Maybe it makes sense to implement a runtime api call for this to reduce networking",
                " bandwidth."
              ]
            },
            {
              "Name": "AssetsOwnedCount",
              "Modifier": "Default",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 321,
                  "Value": 2
                }
              },
              "Default": "AA==",
              "Docs": [
                " Keeps track of how many assets an account owns."
              ]
            },
            {
              "Name": "SeasonTradeFilters",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 97
                }
              },
              "Default": "AA==",
              "Docs": [
                " A filter that assets need to pass in order to be traded.",
                "",
                " The filter can be changed by the organizer."
              ]
            },
            {
              "Name": "SeasonTransferFilters",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 97
                }
              },
              "Default": "AA==",
              "Docs": [
                " A filter that assets need to pass in order to be transfer.",
                "",
                " The filter can be changed by the organizer."
              ]
            },
            {
              "Name": "AssetTradePrices",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity",
                    "Identity"
                  ],
                  "Key": 55,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Tracks assets that have been put on the market with a certain price."
              ]
            },
            {
              "Name": "LockedAssets",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "Identity"
                  ],
                  "Key": 4,
                  "Value": 99
                }
              },
              "Default": "AA==",
              "Docs": [
                " Tracks assets that have been locked either through the `lock_asset` extrinsic, or by",
                " other pallets via this pallet's `AssetManager` implementation.",
                "",
                " A locked asset can't be transferred, traded, consumed or mutated."
              ]
            },
            {
              "Name": "AssetFunds",
              "Modifier": "Optional",
              "StorageType": "Map",
              "TypeMap": {
                "Item1": 0,
                "Item2": {
                  "Hashers": [
                    "BlakeTwo128Concat",
                    "BlakeTwo128Concat"
                  ],
                  "Key": 379,
                  "Value": 6
                }
              },
              "Default": "AA==",
              "Docs": [
                " Tracks how many funds assets have, which will be returned to the owner, once the",
                " asset is consumed"
              ]
            }
          ]
        },
        "Calls": {
          "TypeId": 266
        },
        "Events": {
          "TypeId": 89
        },
        "Constants": [
          {
            "Name": "PalletId",
            "TypeId": 281,
            "Value": "c2FnZS9oam0=",
            "Docs": [
              " This pallet's id.",
              "",
              " It will be used as a lock identifier when locking assets."
            ]
          }
        ],
        "Errors": {
          "TypeId": 380
        },
        "Index": 40
      },
      "41": {
        "Name": "CasinoJamRandom",
        "Storage": {
          "Prefix": "CasinoJamRandom",
          "Entries": [
            {
              "Name": "RandomMaterial",
              "Modifier": "Default",
              "StorageType": "Plain",
              "TypeMap": {
                "Item1": 381,
                "Item2": null
              },
              "Default": "AA==",
              "Docs": [
                " Series of block headers from the last 81 blocks that acts as random seed material. This",
                " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                " the oldest hash."
              ]
            }
          ]
        },
        "Calls": null,
        "Events": null,
        "Constants": [],
        "Errors": null,
        "Index": 41
      }
    },
    "Extrinsic": {
      "TypeId": 382,
      "Version": 4,
      "SignedExtensions": [
        {
          "SignedIdentifier": "CheckNonZeroSender",
          "SignedExtType": 384,
          "AddSignedExtType": 44
        },
        {
          "SignedIdentifier": "CheckSpecVersion",
          "SignedExtType": 385,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckTxVersion",
          "SignedExtType": 386,
          "AddSignedExtType": 4
        },
        {
          "SignedIdentifier": "CheckGenesis",
          "SignedExtType": 387,
          "AddSignedExtType": 13
        },
        {
          "SignedIdentifier": "CheckMortality",
          "SignedExtType": 388,
          "AddSignedExtType": 13
        },
        {
          "SignedIdentifier": "CheckNonce",
          "SignedExtType": 390,
          "AddSignedExtType": 44
        },
        {
          "SignedIdentifier": "CheckWeight",
          "SignedExtType": 391,
          "AddSignedExtType": 44
        },
        {
          "SignedIdentifier": "ChargeTransactionPayment",
          "SignedExtType": 392,
          "AddSignedExtType": 44
        },
        {
          "SignedIdentifier": "CheckMetadataHash",
          "SignedExtType": 393,
          "AddSignedExtType": 56
        }
      ]
    },
    "TypeId": 395
  }
}