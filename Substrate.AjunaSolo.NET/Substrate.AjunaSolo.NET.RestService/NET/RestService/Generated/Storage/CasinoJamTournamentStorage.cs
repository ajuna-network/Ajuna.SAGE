//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using Substrate.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.AjunaSolo.NET.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// ICasinoJamTournamentStorage interface definition.
    /// </summary>
    public interface ICasinoJamTournamentStorage : IStorage
    {
        
        /// <summary>
        /// >> TournamentSchedules
        /// </summary>
        Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentScheduledAction GetTournamentSchedules(string key);
        
        /// <summary>
        /// >> TreasuryAccountsCache
        /// </summary>
        Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTreasuryAccountsCache(string key);
        
        /// <summary>
        /// >> NextTournamentIds
        /// </summary>
        Substrate.NetApi.Model.Types.Primitive.U32 GetNextTournamentIds(string key);
        
        /// <summary>
        /// >> Tournaments
        /// </summary>
        Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.TournamentConfig GetTournaments(string key);
        
        /// <summary>
        /// >> ActiveTournaments
        /// </summary>
        Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentState GetActiveTournaments(string key);
        
        /// <summary>
        /// >> TournamentRankings
        /// </summary>
        Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31 GetTournamentRankings(string key);
        
        /// <summary>
        /// >> TournamentRewardClaims
        /// </summary>
        Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState GetTournamentRewardClaims(string key);
        
        /// <summary>
        /// >> GoldenDucks
        /// </summary>
        Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumGoldenDuckState GetGoldenDucks(string key);
        
        /// <summary>
        /// >> GoldenDuckRewardClaims
        /// </summary>
        Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState GetGoldenDuckRewardClaims(string key);
    }
    
    /// <summary>
    /// CasinoJamTournamentStorage class definition.
    /// </summary>
    public sealed class CasinoJamTournamentStorage : ICasinoJamTournamentStorage
    {
        
        /// <summary>
        /// _tournamentSchedulesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentScheduledAction> _tournamentSchedulesTypedStorage;
        
        /// <summary>
        /// _treasuryAccountsCacheTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> _treasuryAccountsCacheTypedStorage;
        
        /// <summary>
        /// _nextTournamentIdsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> _nextTournamentIdsTypedStorage;
        
        /// <summary>
        /// _tournamentsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.TournamentConfig> _tournamentsTypedStorage;
        
        /// <summary>
        /// _activeTournamentsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentState> _activeTournamentsTypedStorage;
        
        /// <summary>
        /// _tournamentRankingsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31> _tournamentRankingsTypedStorage;
        
        /// <summary>
        /// _tournamentRewardClaimsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState> _tournamentRewardClaimsTypedStorage;
        
        /// <summary>
        /// _goldenDucksTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumGoldenDuckState> _goldenDucksTypedStorage;
        
        /// <summary>
        /// _goldenDuckRewardClaimsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState> _goldenDuckRewardClaimsTypedStorage;
        
        /// <summary>
        /// CasinoJamTournamentStorage constructor.
        /// </summary>
        public CasinoJamTournamentStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.TournamentSchedulesTypedStorage = new TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentScheduledAction>("CasinoJamTournament.TournamentSchedules", storageDataProvider, storageChangeDelegates);
            this.TreasuryAccountsCacheTypedStorage = new TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>("CasinoJamTournament.TreasuryAccountsCache", storageDataProvider, storageChangeDelegates);
            this.NextTournamentIdsTypedStorage = new TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32>("CasinoJamTournament.NextTournamentIds", storageDataProvider, storageChangeDelegates);
            this.TournamentsTypedStorage = new TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.TournamentConfig>("CasinoJamTournament.Tournaments", storageDataProvider, storageChangeDelegates);
            this.ActiveTournamentsTypedStorage = new TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentState>("CasinoJamTournament.ActiveTournaments", storageDataProvider, storageChangeDelegates);
            this.TournamentRankingsTypedStorage = new TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31>("CasinoJamTournament.TournamentRankings", storageDataProvider, storageChangeDelegates);
            this.TournamentRewardClaimsTypedStorage = new TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState>("CasinoJamTournament.TournamentRewardClaims", storageDataProvider, storageChangeDelegates);
            this.GoldenDucksTypedStorage = new TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumGoldenDuckState>("CasinoJamTournament.GoldenDucks", storageDataProvider, storageChangeDelegates);
            this.GoldenDuckRewardClaimsTypedStorage = new TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState>("CasinoJamTournament.GoldenDuckRewardClaims", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _tournamentSchedulesTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentScheduledAction> TournamentSchedulesTypedStorage
        {
            get
            {
                return _tournamentSchedulesTypedStorage;
            }
            set
            {
                _tournamentSchedulesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _treasuryAccountsCacheTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> TreasuryAccountsCacheTypedStorage
        {
            get
            {
                return _treasuryAccountsCacheTypedStorage;
            }
            set
            {
                _treasuryAccountsCacheTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _nextTournamentIdsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.NetApi.Model.Types.Primitive.U32> NextTournamentIdsTypedStorage
        {
            get
            {
                return _nextTournamentIdsTypedStorage;
            }
            set
            {
                _nextTournamentIdsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _tournamentsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.TournamentConfig> TournamentsTypedStorage
        {
            get
            {
                return _tournamentsTypedStorage;
            }
            set
            {
                _tournamentsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _activeTournamentsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentState> ActiveTournamentsTypedStorage
        {
            get
            {
                return _activeTournamentsTypedStorage;
            }
            set
            {
                _activeTournamentsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _tournamentRankingsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31> TournamentRankingsTypedStorage
        {
            get
            {
                return _tournamentRankingsTypedStorage;
            }
            set
            {
                _tournamentRankingsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _tournamentRewardClaimsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState> TournamentRewardClaimsTypedStorage
        {
            get
            {
                return _tournamentRewardClaimsTypedStorage;
            }
            set
            {
                _tournamentRewardClaimsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _goldenDucksTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumGoldenDuckState> GoldenDucksTypedStorage
        {
            get
            {
                return _goldenDucksTypedStorage;
            }
            set
            {
                _goldenDucksTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _goldenDuckRewardClaimsTypedStorage property
        /// </summary>
        public TypedMapStorage<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState> GoldenDuckRewardClaimsTypedStorage
        {
            get
            {
                return _goldenDuckRewardClaimsTypedStorage;
            }
            set
            {
                _goldenDuckRewardClaimsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Substrate.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await TournamentSchedulesTypedStorage.InitializeAsync("CasinoJamTournament", "TournamentSchedules");
            await TreasuryAccountsCacheTypedStorage.InitializeAsync("CasinoJamTournament", "TreasuryAccountsCache");
            await NextTournamentIdsTypedStorage.InitializeAsync("CasinoJamTournament", "NextTournamentIds");
            await TournamentsTypedStorage.InitializeAsync("CasinoJamTournament", "Tournaments");
            await ActiveTournamentsTypedStorage.InitializeAsync("CasinoJamTournament", "ActiveTournaments");
            await TournamentRankingsTypedStorage.InitializeAsync("CasinoJamTournament", "TournamentRankings");
            await TournamentRewardClaimsTypedStorage.InitializeAsync("CasinoJamTournament", "TournamentRewardClaims");
            await GoldenDucksTypedStorage.InitializeAsync("CasinoJamTournament", "GoldenDucks");
            await GoldenDuckRewardClaimsTypedStorage.InitializeAsync("CasinoJamTournament", "GoldenDuckRewardClaims");
        }
        
        /// <summary>
        /// Implements any storage change for CasinoJamTournament.TournamentSchedules
        /// </summary>
        [StorageChange("CasinoJamTournament", "TournamentSchedules")]
        public void OnUpdateTournamentSchedules(string key, string data)
        {
            TournamentSchedulesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TournamentSchedules
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentScheduledAction GetTournamentSchedules(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TournamentSchedulesTypedStorage.Dictionary.TryGetValue(key, out Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentScheduledAction result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CasinoJamTournament.TreasuryAccountsCache
        /// </summary>
        [StorageChange("CasinoJamTournament", "TreasuryAccountsCache")]
        public void OnUpdateTreasuryAccountsCache(string key, string data)
        {
            TreasuryAccountsCacheTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TreasuryAccountsCache
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTreasuryAccountsCache(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TreasuryAccountsCacheTypedStorage.Dictionary.TryGetValue(key, out Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CasinoJamTournament.NextTournamentIds
        /// </summary>
        [StorageChange("CasinoJamTournament", "NextTournamentIds")]
        public void OnUpdateNextTournamentIds(string key, string data)
        {
            NextTournamentIdsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> NextTournamentIds
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 GetNextTournamentIds(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (NextTournamentIdsTypedStorage.Dictionary.TryGetValue(key, out Substrate.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CasinoJamTournament.Tournaments
        /// </summary>
        [StorageChange("CasinoJamTournament", "Tournaments")]
        public void OnUpdateTournaments(string key, string data)
        {
            TournamentsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Tournaments
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.TournamentConfig GetTournaments(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TournamentsTypedStorage.Dictionary.TryGetValue(key, out Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.TournamentConfig result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CasinoJamTournament.ActiveTournaments
        /// </summary>
        [StorageChange("CasinoJamTournament", "ActiveTournaments")]
        public void OnUpdateActiveTournaments(string key, string data)
        {
            ActiveTournamentsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> ActiveTournaments
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentState GetActiveTournaments(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (ActiveTournamentsTypedStorage.Dictionary.TryGetValue(key, out Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumTournamentState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CasinoJamTournament.TournamentRankings
        /// </summary>
        [StorageChange("CasinoJamTournament", "TournamentRankings")]
        public void OnUpdateTournamentRankings(string key, string data)
        {
            TournamentRankingsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TournamentRankings
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31 GetTournamentRankings(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TournamentRankingsTypedStorage.Dictionary.TryGetValue(key, out Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT31 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CasinoJamTournament.TournamentRewardClaims
        /// </summary>
        [StorageChange("CasinoJamTournament", "TournamentRewardClaims")]
        public void OnUpdateTournamentRewardClaims(string key, string data)
        {
            TournamentRewardClaimsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> TournamentRewardClaims
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState GetTournamentRewardClaims(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (TournamentRewardClaimsTypedStorage.Dictionary.TryGetValue(key, out Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CasinoJamTournament.GoldenDucks
        /// </summary>
        [StorageChange("CasinoJamTournament", "GoldenDucks")]
        public void OnUpdateGoldenDucks(string key, string data)
        {
            GoldenDucksTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> GoldenDucks
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumGoldenDuckState GetGoldenDucks(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (GoldenDucksTypedStorage.Dictionary.TryGetValue(key, out Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumGoldenDuckState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for CasinoJamTournament.GoldenDuckRewardClaims
        /// </summary>
        [StorageChange("CasinoJamTournament", "GoldenDuckRewardClaims")]
        public void OnUpdateGoldenDuckRewardClaims(string key, string data)
        {
            GoldenDuckRewardClaimsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> GoldenDuckRewardClaims
        /// </summary>
        public Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState GetGoldenDuckRewardClaims(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (GoldenDuckRewardClaimsTypedStorage.Dictionary.TryGetValue(key, out Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_ajuna_tournament.config.EnumRewardClaimState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
    }
}
