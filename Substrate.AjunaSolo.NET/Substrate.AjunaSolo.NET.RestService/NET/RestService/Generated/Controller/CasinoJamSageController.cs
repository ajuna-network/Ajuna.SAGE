//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Substrate.AjunaSolo.NET.RestService.Generated.Storage;
using Substrate.NetApi.Model.Types.Base;
using Substrate.ServiceLayer.Attributes;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace Substrate.AjunaSolo.NET.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// CasinoJamSageController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class CasinoJamSageController : ControllerBase
    {
        
        private ICasinoJamSageStorage _casinoJamSageStorage;
        
        /// <summary>
        /// CasinoJamSageController constructor.
        /// </summary>
        public CasinoJamSageController(ICasinoJamSageStorage casinoJamSageStorage)
        {
            _casinoJamSageStorage = casinoJamSageStorage;
        }
        
        /// <summary>
        /// >> Organizer
        ///  Organizer of the game. Essentially the administrator with certain privileges.
        /// </summary>
        [HttpGet("Organizer")]
        [ProducesResponseType(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "OrganizerParams")]
        public IActionResult GetOrganizer()
        {
            return this.Ok(_casinoJamSageStorage.GetOrganizer());
        }
        
        /// <summary>
        /// >> GeneralConfigStore
        ///  Tracks global configuration values that can be changed by the organizer only.
        /// </summary>
        [HttpGet("GeneralConfigStore")]
        [ProducesResponseType(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.GeneralConfig), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "GeneralConfigStoreParams")]
        public IActionResult GetGeneralConfigStore()
        {
            return this.Ok(_casinoJamSageStorage.GetGeneralConfigStore());
        }
        
        /// <summary>
        /// >> TransitionConfigStore
        ///  Configuration values specific to the transition being used.
        /// </summary>
        [HttpGet("TransitionConfigStore")]
        [ProducesResponseType(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.transition.CasinoJamTransitionConfig), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "TransitionConfigStoreParams")]
        public IActionResult GetTransitionConfigStore()
        {
            return this.Ok(_casinoJamSageStorage.GetTransitionConfigStore());
        }
        
        /// <summary>
        /// >> SeasonUnlocks
        ///  Some features need to be unlocked fulfilling certain criteria.
        /// 
        ///  This storage keeps track of the `UnlockRule` that needs to be satisfied to unlock the
        ///  feature. If there is no unlock rule, the feature can't be unlocked in that season.
        /// </summary>
        [HttpGet("SeasonUnlocks")]
        [ProducesResponseType(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Types.Base.Arr5U8), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "SeasonUnlocksParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.EnumLockableFeature>))]
        public IActionResult GetSeasonUnlocks(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetSeasonUnlocks(key));
        }
        
        /// <summary>
        /// >> PlayerSeasonConfigs
        ///  Tracks player configs per season. This can be mutated by unlocking certain privileges, e.g.
        ///  upgrading the storage inventory size.
        /// </summary>
        [HttpGet("PlayerSeasonConfigs")]
        [ProducesResponseType(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerConfig), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "PlayerSeasonConfigsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetPlayerSeasonConfigs(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetPlayerSeasonConfigs(key));
        }
        
        /// <summary>
        /// >> PlayerSeasonStats
        ///  Tracks player stats per season.
        /// </summary>
        [HttpGet("PlayerSeasonStats")]
        [ProducesResponseType(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.pallet_sage.config.player.PlayerStats), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "PlayerSeasonStatsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetPlayerSeasonStats(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetPlayerSeasonStats(key));
        }
        
        /// <summary>
        /// >> Assets
        ///  Maps the `AssetId` to its owner and the asset.
        /// </summary>
        [HttpGet("Assets")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.Asset>), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "AssetsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetAssets(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetAssets(key));
        }
        
        /// <summary>
        /// >> AssetOwners
        ///  Keeps track of the assets owned by an account and in which season the asset was created.
        /// 
        ///  We mostly do ownership checks on this in the runtime. Whereas the frontends want to display
        ///  a list. This has to be queried with a `state.getKeysPaged` followed by a `state.getStorage`
        ///  call. Maybe it makes sense to implement a runtime api call for this to reduce networking
        ///  bandwidth.
        /// </summary>
        [HttpGet("AssetOwners")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Base.BaseTuple), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "AssetOwnersParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetAssetOwners(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetAssetOwners(key));
        }
        
        /// <summary>
        /// >> AssetsOwnedCount
        ///  Keeps track of how many assets an account owns.
        /// </summary>
        [HttpGet("AssetsOwnedCount")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U8), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "AssetsOwnedCountParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetAssetsOwnedCount(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetAssetsOwnedCount(key));
        }
        
        /// <summary>
        /// >> SeasonTradeFilters
        ///  A filter that assets need to pass in order to be traded.
        /// 
        ///  The filter can be changed by the organizer.
        /// </summary>
        [HttpGet("SeasonTradeFilters")]
        [ProducesResponseType(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "SeasonTradeFiltersParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetSeasonTradeFilters(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetSeasonTradeFilters(key));
        }
        
        /// <summary>
        /// >> SeasonTransferFilters
        ///  A filter that assets need to pass in order to be transfer.
        /// 
        ///  The filter can be changed by the organizer.
        /// </summary>
        [HttpGet("SeasonTransferFilters")]
        [ProducesResponseType(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.example_transition.asset.EnumVariantType), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "SeasonTransferFiltersParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetSeasonTransferFilters(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetSeasonTransferFilters(key));
        }
        
        /// <summary>
        /// >> AssetTradePrices
        ///  Tracks assets that have been put on the market with a certain price.
        /// </summary>
        [HttpGet("AssetTradePrices")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "AssetTradePricesParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Primitive.U32>))]
        public IActionResult GetAssetTradePrices(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetAssetTradePrices(key));
        }
        
        /// <summary>
        /// >> LockedAssets
        ///  Tracks assets that have been locked either through the `lock_asset` extrinsic, or by
        ///  other pallets via this pallet's `AssetManager` implementation.
        /// 
        ///  A locked asset can't be transferred, traded, consumed or mutated.
        /// </summary>
        [HttpGet("LockedAssets")]
        [ProducesResponseType(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_primitives.asset_manager.Lock), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "LockedAssetsParams", typeof(Substrate.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetLockedAssets(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetLockedAssets(key));
        }
        
        /// <summary>
        /// >> AssetFunds
        ///  Tracks how many funds assets have, which will be returned to the owner, once the
        ///  asset is consumed
        /// </summary>
        [HttpGet("AssetFunds")]
        [ProducesResponseType(typeof(Substrate.NetApi.Model.Types.Primitive.U128), 200)]
        [StorageKeyBuilder(typeof(Substrate.AjunaSolo.NET.NetApiExt.Generated.Storage.CasinoJamSageStorage), "AssetFundsParams", typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.AjunaSolo.NET.NetApiExt.Generated.Model.ajuna_payment_handler.withdraw_credit.EnumWithdrawKind>))]
        public IActionResult GetAssetFunds(string key)
        {
            return this.Ok(_casinoJamSageStorage.GetAssetFunds(key));
        }
    }
}
